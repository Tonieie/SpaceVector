
SpaceVector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c2c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006df8  08006df8  00016df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe8  08006fe8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ff0  08006ff0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff0  08006ff0  00016ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ff4  08006ff4  00016ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000010  08007004  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08007004  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e950  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002155  00000000  00000000  0002e98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00030ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  000318f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023693  00000000  00000000  00032610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011419  00000000  00000000  00055ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd9c3  00000000  00000000  000670bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144a7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f70  00000000  00000000  00144ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006ddc 	.word	0x08006ddc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08006ddc 	.word	0x08006ddc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b974 	b.w	8000ee4 <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9d08      	ldr	r5, [sp, #32]
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	468e      	mov	lr, r1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d14d      	bne.n	8000cbe <__udivmoddi4+0xaa>
 8000c22:	428a      	cmp	r2, r1
 8000c24:	4694      	mov	ip, r2
 8000c26:	d969      	bls.n	8000cfc <__udivmoddi4+0xe8>
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	b152      	cbz	r2, 8000c44 <__udivmoddi4+0x30>
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	f1c2 0120 	rsb	r1, r2, #32
 8000c36:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c42:	4094      	lsls	r4, r2
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	0c21      	lsrs	r1, r4, #16
 8000c4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4e:	fa1f f78c 	uxth.w	r7, ip
 8000c52:	fb08 e316 	mls	r3, r8, r6, lr
 8000c56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5a:	fb06 f107 	mul.w	r1, r6, r7
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x64>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 811f 	bcs.w	8000eac <__udivmoddi4+0x298>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 811c 	bls.w	8000eac <__udivmoddi4+0x298>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 f707 	mul.w	r7, r0, r7
 8000c8c:	42a7      	cmp	r7, r4
 8000c8e:	d90a      	bls.n	8000ca6 <__udivmoddi4+0x92>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c98:	f080 810a 	bcs.w	8000eb0 <__udivmoddi4+0x29c>
 8000c9c:	42a7      	cmp	r7, r4
 8000c9e:	f240 8107 	bls.w	8000eb0 <__udivmoddi4+0x29c>
 8000ca2:	4464      	add	r4, ip
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	1be4      	subs	r4, r4, r7
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa4>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xc2>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	f000 80ef 	beq.w	8000ea6 <__udivmoddi4+0x292>
 8000cc8:	2600      	movs	r6, #0
 8000cca:	e9c5 0100 	strd	r0, r1, [r5]
 8000cce:	4630      	mov	r0, r6
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f683 	clz	r6, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d14a      	bne.n	8000d74 <__udivmoddi4+0x160>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd4>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80f9 	bhi.w	8000eda <__udivmoddi4+0x2c6>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	469e      	mov	lr, r3
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa4>
 8000cf6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa4>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xec>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 8092 	bne.w	8000e2e <__udivmoddi4+0x21a>
 8000d0a:	eba1 010c 	sub.w	r1, r1, ip
 8000d0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d12:	fa1f fe8c 	uxth.w	lr, ip
 8000d16:	2601      	movs	r6, #1
 8000d18:	0c20      	lsrs	r0, r4, #16
 8000d1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000d22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d26:	fb0e f003 	mul.w	r0, lr, r3
 8000d2a:	4288      	cmp	r0, r1
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x12c>
 8000d2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x12a>
 8000d38:	4288      	cmp	r0, r1
 8000d3a:	f200 80cb 	bhi.w	8000ed4 <__udivmoddi4+0x2c0>
 8000d3e:	4643      	mov	r3, r8
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d48:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d50:	fb0e fe00 	mul.w	lr, lr, r0
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x156>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d60:	d202      	bcs.n	8000d68 <__udivmoddi4+0x154>
 8000d62:	45a6      	cmp	lr, r4
 8000d64:	f200 80bb 	bhi.w	8000ede <__udivmoddi4+0x2ca>
 8000d68:	4608      	mov	r0, r1
 8000d6a:	eba4 040e 	sub.w	r4, r4, lr
 8000d6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x9a>
 8000d74:	f1c6 0720 	rsb	r7, r6, #32
 8000d78:	40b3      	lsls	r3, r6
 8000d7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d82:	fa20 f407 	lsr.w	r4, r0, r7
 8000d86:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8a:	431c      	orrs	r4, r3
 8000d8c:	40f9      	lsrs	r1, r7
 8000d8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d92:	fa00 f306 	lsl.w	r3, r0, r6
 8000d96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9a:	0c20      	lsrs	r0, r4, #16
 8000d9c:	fa1f fe8c 	uxth.w	lr, ip
 8000da0:	fb09 1118 	mls	r1, r9, r8, r1
 8000da4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da8:	fb08 f00e 	mul.w	r0, r8, lr
 8000dac:	4288      	cmp	r0, r1
 8000dae:	fa02 f206 	lsl.w	r2, r2, r6
 8000db2:	d90b      	bls.n	8000dcc <__udivmoddi4+0x1b8>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dbc:	f080 8088 	bcs.w	8000ed0 <__udivmoddi4+0x2bc>
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	f240 8085 	bls.w	8000ed0 <__udivmoddi4+0x2bc>
 8000dc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dca:	4461      	add	r1, ip
 8000dcc:	1a09      	subs	r1, r1, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ddc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de0:	458e      	cmp	lr, r1
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1e2>
 8000de4:	eb1c 0101 	adds.w	r1, ip, r1
 8000de8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dec:	d26c      	bcs.n	8000ec8 <__udivmoddi4+0x2b4>
 8000dee:	458e      	cmp	lr, r1
 8000df0:	d96a      	bls.n	8000ec8 <__udivmoddi4+0x2b4>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4461      	add	r1, ip
 8000df6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfe:	eba1 010e 	sub.w	r1, r1, lr
 8000e02:	42a1      	cmp	r1, r4
 8000e04:	46c8      	mov	r8, r9
 8000e06:	46a6      	mov	lr, r4
 8000e08:	d356      	bcc.n	8000eb8 <__udivmoddi4+0x2a4>
 8000e0a:	d053      	beq.n	8000eb4 <__udivmoddi4+0x2a0>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x212>
 8000e0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e12:	eb61 010e 	sbc.w	r1, r1, lr
 8000e16:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1e:	40f1      	lsrs	r1, r6
 8000e20:	431f      	orrs	r7, r3
 8000e22:	e9c5 7100 	strd	r7, r1, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1c2 0320 	rsb	r3, r2, #32
 8000e32:	40d8      	lsrs	r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	4301      	orrs	r1, r0
 8000e40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e44:	fa1f fe8c 	uxth.w	lr, ip
 8000e48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e50:	0c0b      	lsrs	r3, r1, #16
 8000e52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e56:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5a:	429e      	cmp	r6, r3
 8000e5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x260>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6a:	d22f      	bcs.n	8000ecc <__udivmoddi4+0x2b8>
 8000e6c:	429e      	cmp	r6, r3
 8000e6e:	d92d      	bls.n	8000ecc <__udivmoddi4+0x2b8>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1b9b      	subs	r3, r3, r6
 8000e76:	b289      	uxth	r1, r1
 8000e78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb06 f30e 	mul.w	r3, r6, lr
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x28a>
 8000e8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e94:	d216      	bcs.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d914      	bls.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e9a:	3e02      	subs	r6, #2
 8000e9c:	4461      	add	r1, ip
 8000e9e:	1ac9      	subs	r1, r1, r3
 8000ea0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea4:	e738      	b.n	8000d18 <__udivmoddi4+0x104>
 8000ea6:	462e      	mov	r6, r5
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	e705      	b.n	8000cb8 <__udivmoddi4+0xa4>
 8000eac:	4606      	mov	r6, r0
 8000eae:	e6e3      	b.n	8000c78 <__udivmoddi4+0x64>
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	e6f8      	b.n	8000ca6 <__udivmoddi4+0x92>
 8000eb4:	454b      	cmp	r3, r9
 8000eb6:	d2a9      	bcs.n	8000e0c <__udivmoddi4+0x1f8>
 8000eb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ebc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7a3      	b.n	8000e0c <__udivmoddi4+0x1f8>
 8000ec4:	4646      	mov	r6, r8
 8000ec6:	e7ea      	b.n	8000e9e <__udivmoddi4+0x28a>
 8000ec8:	4620      	mov	r0, r4
 8000eca:	e794      	b.n	8000df6 <__udivmoddi4+0x1e2>
 8000ecc:	4640      	mov	r0, r8
 8000ece:	e7d1      	b.n	8000e74 <__udivmoddi4+0x260>
 8000ed0:	46d0      	mov	r8, sl
 8000ed2:	e77b      	b.n	8000dcc <__udivmoddi4+0x1b8>
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	4461      	add	r1, ip
 8000ed8:	e732      	b.n	8000d40 <__udivmoddi4+0x12c>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e709      	b.n	8000cf2 <__udivmoddi4+0xde>
 8000ede:	4464      	add	r4, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e742      	b.n	8000d6a <__udivmoddi4+0x156>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
void SpaceVector(double V_ref,float Ceta);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&i_ph1, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4925      	ldr	r1, [pc, #148]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ef4:	4825      	ldr	r0, [pc, #148]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ef6:	f001 fb47 	bl	8002588 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&i_ph2, 1);
 8000efa:	2201      	movs	r2, #1
 8000efc:	4924      	ldr	r1, [pc, #144]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000efe:	4825      	ldr	r0, [pc, #148]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f00:	f001 fb42 	bl	8002588 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&i_ph3, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	4924      	ldr	r1, [pc, #144]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f08:	4824      	ldr	r0, [pc, #144]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f0a:	f001 fb3d 	bl	8002588 <HAL_ADC_Start_DMA>
	TIM1->CCR1 = Va*2598;
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f14:	a31a      	add	r3, pc, #104	; (adr r3, 8000f80 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	f7ff fb31 	bl	8000580 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4c20      	ldr	r4, [pc, #128]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f7ff fdec 	bl	8000b04 <__aeabi_d2uiz>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = Vb*2598;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f36:	a312      	add	r3, pc, #72	; (adr r3, 8000f80 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb20 	bl	8000580 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4c17      	ldr	r4, [pc, #92]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fddb 	bl	8000b04 <__aeabi_d2uiz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = Vc*2598;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f58:	a309      	add	r3, pc, #36	; (adr r3, 8000f80 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	f7ff fb0f 	bl	8000580 <__aeabi_dmul>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4c0f      	ldr	r4, [pc, #60]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fdca 	bl	8000b04 <__aeabi_d2uiz>
 8000f70:	4603      	mov	r3, r0
 8000f72:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd90      	pop	{r4, r7, pc}
 8000f7c:	f3af 8000 	nop.w
 8000f80:	00000000 	.word	0x00000000
 8000f84:	40a44c00 	.word	0x40a44c00
 8000f88:	200002e4 	.word	0x200002e4
 8000f8c:	2000002c 	.word	0x2000002c
 8000f90:	200002e6 	.word	0x200002e6
 8000f94:	20000074 	.word	0x20000074
 8000f98:	200002e8 	.word	0x200002e8
 8000f9c:	200000bc 	.word	0x200000bc
 8000fa0:	200002c8 	.word	0x200002c8
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	200002d0 	.word	0x200002d0
 8000fac:	200002d8 	.word	0x200002d8

08000fb0 <adc2phase>:
//{
//    // Read & Update The ADC Result
//
//}

void adc2phase(struct Phase *i_ph){
 8000fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  i_ph->a = -(i_ph1/4095.0f*3.3-1.65)/(CURRENT_SENSE_GAIN*R_SENSE);
 8000fba:	4b53      	ldr	r3, [pc, #332]	; (8001108 <adc2phase+0x158>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc8:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800110c <adc2phase+0x15c>
 8000fcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd0:	ee16 0a90 	vmov	r0, s13
 8000fd4:	f7ff fa7c 	bl	80004d0 <__aeabi_f2d>
 8000fd8:	a345      	add	r3, pc, #276	; (adr r3, 80010f0 <adc2phase+0x140>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff facf 	bl	8000580 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	a343      	add	r3, pc, #268	; (adr r3, 80010f8 <adc2phase+0x148>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff f90e 	bl	8000210 <__aeabi_dsub>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4692      	mov	sl, r2
 8000ffa:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8000ffe:	a340      	add	r3, pc, #256	; (adr r3, 8001100 <adc2phase+0x150>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	4650      	mov	r0, sl
 8001006:	4659      	mov	r1, fp
 8001008:	f7ff fbe4 	bl	80007d4 <__aeabi_ddiv>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fd96 	bl	8000b44 <__aeabi_d2f>
 8001018:	4602      	mov	r2, r0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
  i_ph->b = -(i_ph2/4095.0f*3.3-1.65)/(CURRENT_SENSE_GAIN*R_SENSE);
 800101e:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <adc2phase+0x160>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800110c <adc2phase+0x15c>
 8001030:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001034:	ee16 0a90 	vmov	r0, s13
 8001038:	f7ff fa4a 	bl	80004d0 <__aeabi_f2d>
 800103c:	a32c      	add	r3, pc, #176	; (adr r3, 80010f0 <adc2phase+0x140>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fa9d 	bl	8000580 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	a32a      	add	r3, pc, #168	; (adr r3, 80010f8 <adc2phase+0x148>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f7ff f8dc 	bl	8000210 <__aeabi_dsub>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4690      	mov	r8, r2
 800105e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001062:	a327      	add	r3, pc, #156	; (adr r3, 8001100 <adc2phase+0x150>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	4640      	mov	r0, r8
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff fbb2 	bl	80007d4 <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fd64 	bl	8000b44 <__aeabi_d2f>
 800107c:	4602      	mov	r2, r0
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	605a      	str	r2, [r3, #4]
  i_ph->c = -(i_ph3/4095.0f*3.3-1.65)/(CURRENT_SENSE_GAIN*R_SENSE);
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <adc2phase+0x164>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	b29b      	uxth	r3, r3
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001090:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800110c <adc2phase+0x15c>
 8001094:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001098:	ee16 0a90 	vmov	r0, s13
 800109c:	f7ff fa18 	bl	80004d0 <__aeabi_f2d>
 80010a0:	a313      	add	r3, pc, #76	; (adr r3, 80010f0 <adc2phase+0x140>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff fa6b 	bl	8000580 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	a311      	add	r3, pc, #68	; (adr r3, 80010f8 <adc2phase+0x148>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff f8aa 	bl	8000210 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4614      	mov	r4, r2
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80010c6:	a30e      	add	r3, pc, #56	; (adr r3, 8001100 <adc2phase+0x150>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	4620      	mov	r0, r4
 80010ce:	4629      	mov	r1, r5
 80010d0:	f7ff fb80 	bl	80007d4 <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fd32 	bl	8000b44 <__aeabi_d2f>
 80010e0:	4602      	mov	r2, r0
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	609a      	str	r2, [r3, #8]
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010f0:	66666666 	.word	0x66666666
 80010f4:	400a6666 	.word	0x400a6666
 80010f8:	66666666 	.word	0x66666666
 80010fc:	3ffa6666 	.word	0x3ffa6666
 8001100:	40000000 	.word	0x40000000
 8001104:	3f947ae1 	.word	0x3f947ae1
 8001108:	200002e4 	.word	0x200002e4
 800110c:	457ff000 	.word	0x457ff000
 8001110:	200002e6 	.word	0x200002e6
 8001114:	200002e8 	.word	0x200002e8

08001118 <phase2dqs>:

void phase2dqs(struct Phase *i_ph, struct Stationary *i_dqs){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	i_dqs->ds = (2*i_ph->a - i_ph->b - i_ph->c)/3;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001132:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a02 	vldr	s15, [r3, #8]
 800113c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001140:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	edc3 7a00 	vstr	s15, [r3]
	i_dqs->qs = (i_ph->b - i_ph->c)/sqrt(3);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ed93 7a01 	vldr	s14, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edd3 7a02 	vldr	s15, [r3, #8]
 800115a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115e:	ee17 0a90 	vmov	r0, s15
 8001162:	f7ff f9b5 	bl	80004d0 <__aeabi_f2d>
 8001166:	a30a      	add	r3, pc, #40	; (adr r3, 8001190 <phase2dqs+0x78>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff fb32 	bl	80007d4 <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fce4 	bl	8000b44 <__aeabi_d2f>
 800117c:	4602      	mov	r2, r0
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	605a      	str	r2, [r3, #4]
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	f3af 8000 	nop.w
 8001190:	e8584caa 	.word	0xe8584caa
 8001194:	3ffbb67a 	.word	0x3ffbb67a

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119e:	f001 f919 	bl	80023d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a2:	f000 f891 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f000 fb13 	bl	80017d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80011aa:	f000 fa2b 	bl	8001604 <MX_TIM1_Init>
  MX_SPI2_Init();
 80011ae:	f000 f9f3 	bl	8001598 <MX_SPI2_Init>
  MX_DMA_Init();
 80011b2:	f000 fadd 	bl	8001770 <MX_DMA_Init>
  MX_ADC1_Init();
 80011b6:	f000 f8f9 	bl	80013ac <MX_ADC1_Init>
  MX_ADC3_Init();
 80011ba:	f000 f99b 	bl	80014f4 <MX_ADC3_Init>
  MX_ADC2_Init();
 80011be:	f000 f947 	bl	8001450 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80011c2:	4839      	ldr	r0, [pc, #228]	; (80012a8 <main+0x110>)
 80011c4:	f003 fcd2 	bl	8004b6c <HAL_TIM_Base_Start_IT>
  TIM1->RCR = 1;
 80011c8:	4b38      	ldr	r3, [pc, #224]	; (80012ac <main+0x114>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011ce:	2100      	movs	r1, #0
 80011d0:	4835      	ldr	r0, [pc, #212]	; (80012a8 <main+0x110>)
 80011d2:	f003 fd95 	bl	8004d00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011d6:	2104      	movs	r1, #4
 80011d8:	4833      	ldr	r0, [pc, #204]	; (80012a8 <main+0x110>)
 80011da:	f003 fd91 	bl	8004d00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011de:	2108      	movs	r1, #8
 80011e0:	4831      	ldr	r0, [pc, #196]	; (80012a8 <main+0x110>)
 80011e2:	f003 fd8d 	bl	8004d00 <HAL_TIM_PWM_Start>

  setMosfet();
 80011e6:	f000 fbdf 	bl	80019a8 <setMosfet>
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	4830      	ldr	r0, [pc, #192]	; (80012b0 <main+0x118>)
 80011f0:	f002 fbbe 	bl	8003970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(N_BRAKE_GPIO_Port, N_BRAKE_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fa:	482d      	ldr	r0, [pc, #180]	; (80012b0 <main+0x118>)
 80011fc:	f002 fbb8 	bl	8003970 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001204:	f001 f958 	bl	80024b8 <HAL_Delay>
  SpaceVector(6, 0);
 8001208:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 80012b4 <main+0x11c>
 800120c:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001290 <main+0xf8>
 8001210:	f000 fc72 	bl	8001af8 <SpaceVector>
  HAL_Delay(1000);
 8001214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001218:	f001 f94e 	bl	80024b8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(float deg = 0; deg < 360; deg += 0.01)
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	e029      	b.n	8001278 <main+0xe0>
	  {
		  if(HAL_GetTick() - last_time >= 2)
 8001224:	f001 f93c 	bl	80024a0 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <main+0x120>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d911      	bls.n	8001258 <main+0xc0>
		  {
			  last_time = HAL_GetTick();
 8001234:	f001 f934 	bl	80024a0 <HAL_GetTick>
 8001238:	4603      	mov	r3, r0
 800123a:	4a1f      	ldr	r2, [pc, #124]	; (80012b8 <main+0x120>)
 800123c:	6013      	str	r3, [r2, #0]
			  SpaceVector(4, deg);
 800123e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001242:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001298 <main+0x100>
 8001246:	f000 fc57 	bl	8001af8 <SpaceVector>
			  adc2phase(&i_ph);
 800124a:	481c      	ldr	r0, [pc, #112]	; (80012bc <main+0x124>)
 800124c:	f7ff feb0 	bl	8000fb0 <adc2phase>
			  phase2dqs(&i_ph, &i_dqs);
 8001250:	491b      	ldr	r1, [pc, #108]	; (80012c0 <main+0x128>)
 8001252:	481a      	ldr	r0, [pc, #104]	; (80012bc <main+0x124>)
 8001254:	f7ff ff60 	bl	8001118 <phase2dqs>
	  for(float deg = 0; deg < 360; deg += 0.01)
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff f939 	bl	80004d0 <__aeabi_f2d>
 800125e:	a310      	add	r3, pc, #64	; (adr r3, 80012a0 <main+0x108>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7fe ffd6 	bl	8000214 <__adddf3>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fc68 	bl	8000b44 <__aeabi_d2f>
 8001274:	4603      	mov	r3, r0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	edd7 7a01 	vldr	s15, [r7, #4]
 800127c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80012c4 <main+0x12c>
 8001280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001288:	d4cc      	bmi.n	8001224 <main+0x8c>
 800128a:	e7c7      	b.n	800121c <main+0x84>
 800128c:	f3af 8000 	nop.w
 8001290:	00000000 	.word	0x00000000
 8001294:	40180000 	.word	0x40180000
 8001298:	00000000 	.word	0x00000000
 800129c:	40100000 	.word	0x40100000
 80012a0:	47ae147b 	.word	0x47ae147b
 80012a4:	3f847ae1 	.word	0x3f847ae1
 80012a8:	2000027c 	.word	0x2000027c
 80012ac:	40010000 	.word	0x40010000
 80012b0:	40020800 	.word	0x40020800
 80012b4:	00000000 	.word	0x00000000
 80012b8:	200002e0 	.word	0x200002e0
 80012bc:	200002ec 	.word	0x200002ec
 80012c0:	200002f8 	.word	0x200002f8
 80012c4:	43b40000 	.word	0x43b40000

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	; 0x50
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	2234      	movs	r2, #52	; 0x34
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 fd78 	bl	8006dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <SystemClock_Config+0xdc>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a2b      	ldr	r2, [pc, #172]	; (80013a4 <SystemClock_Config+0xdc>)
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
 80012fc:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <SystemClock_Config+0xdc>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001308:	2300      	movs	r3, #0
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <SystemClock_Config+0xe0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a25      	ldr	r2, [pc, #148]	; (80013a8 <SystemClock_Config+0xe0>)
 8001312:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <SystemClock_Config+0xe0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001328:	2301      	movs	r3, #1
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800132c:	2310      	movs	r3, #16
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001330:	2302      	movs	r3, #2
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001334:	2300      	movs	r3, #0
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001338:	2308      	movs	r3, #8
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800133c:	23b4      	movs	r3, #180	; 0xb4
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001340:	2302      	movs	r3, #2
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001344:	2302      	movs	r3, #2
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001348:	2302      	movs	r3, #2
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fe8d 	bl	8004070 <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800135c:	f000 fd96 	bl	8001e8c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001360:	f002 fb20 	bl	80039a4 <HAL_PWREx_EnableOverDrive>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800136a:	f000 fd8f 	bl	8001e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136e:	230f      	movs	r3, #15
 8001370:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	2302      	movs	r3, #2
 8001374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800137a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800137e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	2105      	movs	r1, #5
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fb59 	bl	8003a44 <HAL_RCC_ClockConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001398:	f000 fd78 	bl	8001e8c <Error_Handler>
  }
}
 800139c:	bf00      	nop
 800139e:	3750      	adds	r7, #80	; 0x50
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40007000 	.word	0x40007000

080013ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_ADC1_Init+0x98>)
 80013c0:	4a21      	ldr	r2, [pc, #132]	; (8001448 <MX_ADC1_Init+0x9c>)
 80013c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_ADC1_Init+0x98>)
 80013c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_ADC1_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_ADC1_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_ADC1_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_ADC1_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_ADC1_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_ADC1_Init+0x98>)
 80013ee:	4a17      	ldr	r2, [pc, #92]	; (800144c <MX_ADC1_Init+0xa0>)
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_ADC1_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_ADC1_Init+0x98>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_ADC1_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_ADC1_Init+0x98>)
 8001408:	2201      	movs	r2, #1
 800140a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_ADC1_Init+0x98>)
 800140e:	f001 f877 	bl	8002500 <HAL_ADC_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001418:	f000 fd38 	bl	8001e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800141c:	230b      	movs	r3, #11
 800141e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_ADC1_Init+0x98>)
 800142e:	f001 f9d9 	bl	80027e4 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001438:	f000 fd28 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000002c 	.word	0x2000002c
 8001448:	40012000 	.word	0x40012000
 800144c:	0f000001 	.word	0x0f000001

08001450 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <MX_ADC2_Init+0x98>)
 8001464:	4a21      	ldr	r2, [pc, #132]	; (80014ec <MX_ADC2_Init+0x9c>)
 8001466:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_ADC2_Init+0x98>)
 800146a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800146e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_ADC2_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_ADC2_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_ADC2_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_ADC2_Init+0x98>)
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_ADC2_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_ADC2_Init+0x98>)
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <MX_ADC2_Init+0xa0>)
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_ADC2_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <MX_ADC2_Init+0x98>)
 800149e:	2201      	movs	r2, #1
 80014a0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_ADC2_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_ADC2_Init+0x98>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_ADC2_Init+0x98>)
 80014b2:	f001 f825 	bl	8002500 <HAL_ADC_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80014bc:	f000 fce6 	bl	8001e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80014c0:	230c      	movs	r3, #12
 80014c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_ADC2_Init+0x98>)
 80014d2:	f001 f987 	bl	80027e4 <HAL_ADC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80014dc:	f000 fcd6 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000074 	.word	0x20000074
 80014ec:	40012100 	.word	0x40012100
 80014f0:	0f000001 	.word	0x0f000001

080014f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_ADC3_Init+0x98>)
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <MX_ADC3_Init+0x9c>)
 800150a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_ADC3_Init+0x98>)
 800150e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001512:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_ADC3_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_ADC3_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_ADC3_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_ADC3_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_ADC3_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_ADC3_Init+0x98>)
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <MX_ADC3_Init+0xa0>)
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_ADC3_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_ADC3_Init+0x98>)
 8001542:	2201      	movs	r2, #1
 8001544:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_ADC3_Init+0x98>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_ADC3_Init+0x98>)
 8001550:	2201      	movs	r2, #1
 8001552:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_ADC3_Init+0x98>)
 8001556:	f000 ffd3 	bl	8002500 <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001560:	f000 fc94 	bl	8001e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001564:	230d      	movs	r3, #13
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_ADC3_Init+0x98>)
 8001576:	f001 f935 	bl	80027e4 <HAL_ADC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001580:	f000 fc84 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000bc 	.word	0x200000bc
 8001590:	40012200 	.word	0x40012200
 8001594:	0f000001 	.word	0x0f000001

08001598 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <MX_SPI2_Init+0x64>)
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <MX_SPI2_Init+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <MX_SPI2_Init+0x64>)
 80015a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_SPI2_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_SPI2_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_SPI2_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_SPI2_Init+0x64>)
 80015be:	2201      	movs	r2, #1
 80015c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_SPI2_Init+0x64>)
 80015c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_SPI2_Init+0x64>)
 80015cc:	2220      	movs	r2, #32
 80015ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <MX_SPI2_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_SPI2_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <MX_SPI2_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_SPI2_Init+0x64>)
 80015e4:	220a      	movs	r2, #10
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <MX_SPI2_Init+0x64>)
 80015ea:	f002 ffdf 	bl	80045ac <HAL_SPI_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015f4:	f000 fc4a 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000224 	.word	0x20000224
 8001600:	40003800 	.word	0x40003800

08001604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b096      	sub	sp, #88	; 0x58
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2220      	movs	r2, #32
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f005 fbc5 	bl	8006dcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <MX_TIM1_Init+0x164>)
 8001644:	4a49      	ldr	r2, [pc, #292]	; (800176c <MX_TIM1_Init+0x168>)
 8001646:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001648:	4b47      	ldr	r3, [pc, #284]	; (8001768 <MX_TIM1_Init+0x164>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <MX_TIM1_Init+0x164>)
 8001650:	2220      	movs	r2, #32
 8001652:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4499;
 8001654:	4b44      	ldr	r3, [pc, #272]	; (8001768 <MX_TIM1_Init+0x164>)
 8001656:	f241 1293 	movw	r2, #4499	; 0x1193
 800165a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165c:	4b42      	ldr	r3, [pc, #264]	; (8001768 <MX_TIM1_Init+0x164>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <MX_TIM1_Init+0x164>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001668:	483f      	ldr	r0, [pc, #252]	; (8001768 <MX_TIM1_Init+0x164>)
 800166a:	f003 fa2f 	bl	8004acc <HAL_TIM_Base_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001674:	f000 fc0a 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800167e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001682:	4619      	mov	r1, r3
 8001684:	4838      	ldr	r0, [pc, #224]	; (8001768 <MX_TIM1_Init+0x164>)
 8001686:	f003 fdcd 	bl	8005224 <HAL_TIM_ConfigClockSource>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001690:	f000 fbfc 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001694:	4834      	ldr	r0, [pc, #208]	; (8001768 <MX_TIM1_Init+0x164>)
 8001696:	f003 fad9 	bl	8004c4c <HAL_TIM_PWM_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80016a0:	f000 fbf4 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016b0:	4619      	mov	r1, r3
 80016b2:	482d      	ldr	r0, [pc, #180]	; (8001768 <MX_TIM1_Init+0x164>)
 80016b4:	f004 f9b6 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80016be:	f000 fbe5 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c2:	2360      	movs	r3, #96	; 0x60
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ce:	2300      	movs	r3, #0
 80016d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4820      	ldr	r0, [pc, #128]	; (8001768 <MX_TIM1_Init+0x164>)
 80016e8:	f003 fcda 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80016f2:	f000 fbcb 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	2204      	movs	r2, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	481a      	ldr	r0, [pc, #104]	; (8001768 <MX_TIM1_Init+0x164>)
 8001700:	f003 fcce 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800170a:	f000 fbbf 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800170e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001712:	2208      	movs	r2, #8
 8001714:	4619      	mov	r1, r3
 8001716:	4814      	ldr	r0, [pc, #80]	; (8001768 <MX_TIM1_Init+0x164>)
 8001718:	f003 fcc2 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8001722:	f000 fbb3 	bl	8001e8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800173a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <MX_TIM1_Init+0x164>)
 800174a:	f004 f9e7 	bl	8005b1c <HAL_TIMEx_ConfigBreakDeadTime>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8001754:	f000 fb9a 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <MX_TIM1_Init+0x164>)
 800175a:	f000 fd73 	bl	8002244 <HAL_TIM_MspPostInit>

}
 800175e:	bf00      	nop
 8001760:	3758      	adds	r7, #88	; 0x58
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000027c 	.word	0x2000027c
 800176c:	40010000 	.word	0x40010000

08001770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_DMA_Init+0x5c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <MX_DMA_Init+0x5c>)
 8001780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_DMA_Init+0x5c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2038      	movs	r0, #56	; 0x38
 8001798:	f001 fbaf 	bl	8002efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800179c:	2038      	movs	r0, #56	; 0x38
 800179e:	f001 fbc8 	bl	8002f32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2039      	movs	r0, #57	; 0x39
 80017a8:	f001 fba7 	bl	8002efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017ac:	2039      	movs	r0, #57	; 0x39
 80017ae:	f001 fbc0 	bl	8002f32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	203a      	movs	r0, #58	; 0x3a
 80017b8:	f001 fb9f 	bl	8002efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017bc:	203a      	movs	r0, #58	; 0x3a
 80017be:	f001 fbb8 	bl	8002f32 <HAL_NVIC_EnableIRQ>

}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b52      	ldr	r3, [pc, #328]	; (8001934 <MX_GPIO_Init+0x164>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a51      	ldr	r2, [pc, #324]	; (8001934 <MX_GPIO_Init+0x164>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <MX_GPIO_Init+0x164>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <MX_GPIO_Init+0x164>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a4a      	ldr	r2, [pc, #296]	; (8001934 <MX_GPIO_Init+0x164>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b48      	ldr	r3, [pc, #288]	; (8001934 <MX_GPIO_Init+0x164>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b44      	ldr	r3, [pc, #272]	; (8001934 <MX_GPIO_Init+0x164>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a43      	ldr	r2, [pc, #268]	; (8001934 <MX_GPIO_Init+0x164>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <MX_GPIO_Init+0x164>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <MX_GPIO_Init+0x164>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a3c      	ldr	r2, [pc, #240]	; (8001934 <MX_GPIO_Init+0x164>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <MX_GPIO_Init+0x164>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	2120      	movs	r1, #32
 800185a:	4837      	ldr	r0, [pc, #220]	; (8001938 <MX_GPIO_Init+0x168>)
 800185c:	f002 f888 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|GPIO_PIN_8|xx_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001866:	4835      	ldr	r0, [pc, #212]	; (800193c <MX_GPIO_Init+0x16c>)
 8001868:	f002 f882 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVE_EN_Pin|N_BRAKE_Pin|IN_LX_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001872:	4833      	ldr	r0, [pc, #204]	; (8001940 <MX_GPIO_Init+0x170>)
 8001874:	f002 f87c 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	482c      	ldr	r0, [pc, #176]	; (8001940 <MX_GPIO_Init+0x170>)
 8001890:	f001 feda 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001894:	230c      	movs	r3, #12
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a4:	2307      	movs	r3, #7
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	4822      	ldr	r0, [pc, #136]	; (8001938 <MX_GPIO_Init+0x168>)
 80018b0:	f001 feca 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018b4:	2320      	movs	r3, #32
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	481b      	ldr	r0, [pc, #108]	; (8001938 <MX_GPIO_Init+0x168>)
 80018cc:	f001 febc 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin xx_Pin */
  GPIO_InitStruct.Pin = CS_Pin|xx_Pin;
 80018d0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	4814      	ldr	r0, [pc, #80]	; (800193c <MX_GPIO_Init+0x16c>)
 80018ea:	f001 fead 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRIVE_EN_Pin N_BRAKE_Pin IN_LX_Pin */
  GPIO_InitStruct.Pin = DRIVE_EN_Pin|N_BRAKE_Pin|IN_LX_Pin;
 80018ee:	f44f 7360 	mov.w	r3, #896	; 0x380
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	480e      	ldr	r0, [pc, #56]	; (8001940 <MX_GPIO_Init+0x170>)
 8001908:	f001 fe9e 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800190c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_GPIO_Init+0x16c>)
 8001926:	f001 fe8f 	bl	8003648 <HAL_GPIO_Init>

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800

08001944 <SPISend>:

/* USER CODE BEGIN 4 */
void SPISend(uint8_t addr,uint8_t val1,uint8_t val2)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	460b      	mov	r3, r1
 8001950:	71bb      	strb	r3, [r7, #6]
 8001952:	4613      	mov	r3, r2
 8001954:	717b      	strb	r3, [r7, #5]
  HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800195c:	4810      	ldr	r0, [pc, #64]	; (80019a0 <SPISend+0x5c>)
 800195e:	f002 f807 	bl	8003970 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8001962:	1df9      	adds	r1, r7, #7
 8001964:	2364      	movs	r3, #100	; 0x64
 8001966:	2201      	movs	r2, #1
 8001968:	480e      	ldr	r0, [pc, #56]	; (80019a4 <SPISend+0x60>)
 800196a:	f002 fea8 	bl	80046be <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val1, 1, 100);
 800196e:	1db9      	adds	r1, r7, #6
 8001970:	2364      	movs	r3, #100	; 0x64
 8001972:	2201      	movs	r2, #1
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <SPISend+0x60>)
 8001976:	f002 fea2 	bl	80046be <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val2, 1, 100);
 800197a:	1d79      	adds	r1, r7, #5
 800197c:	2364      	movs	r3, #100	; 0x64
 800197e:	2201      	movs	r2, #1
 8001980:	4808      	ldr	r0, [pc, #32]	; (80019a4 <SPISend+0x60>)
 8001982:	f002 fe9c 	bl	80046be <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin, GPIO_PIN_SET);
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <SPISend+0x5c>)
 800198e:	f001 ffef 	bl	8003970 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f000 fd90 	bl	80024b8 <HAL_Delay>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40020400 	.word	0x40020400
 80019a4:	20000224 	.word	0x20000224

080019a8 <setMosfet>:
//  delayMicroseconds(100);
//  return data;
//}

void setMosfet()
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  SPISend(FAULT_CLR_AddWrite,FAULT_CLR_HValue,FAULT_CLR_LValue);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	2090      	movs	r0, #144	; 0x90
 80019b2:	f7ff ffc7 	bl	8001944 <SPISend>
  SPISend(SUPPLY_CFG_AddWrite,SUPPLY_CFG_HValue,SUPPLY_CFG_LValue);
 80019b6:	2202      	movs	r2, #2
 80019b8:	2168      	movs	r1, #104	; 0x68
 80019ba:	2091      	movs	r0, #145	; 0x91
 80019bc:	f7ff ffc2 	bl	8001944 <SPISend>
  SPISend(PWM_CFG_AddWrite,PWM_CFG_HValue,PWM_CFG_LValue);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2100      	movs	r1, #0
 80019c4:	2093      	movs	r0, #147	; 0x93
 80019c6:	f7ff ffbd 	bl	8001944 <SPISend>
  SPISend(SENSOR_CFG_AddWrite,SENSOR_CFG_HValue,SENSOR_CFG_LValue);
 80019ca:	2221      	movs	r2, #33	; 0x21
 80019cc:	2100      	movs	r1, #0
 80019ce:	2094      	movs	r0, #148	; 0x94
 80019d0:	f7ff ffb8 	bl	8001944 <SPISend>
  SPISend(IDRIVE_CFG_AddWrite,IDRIVE_CFG_HValue,IDRIVE_CFG_LValue);
 80019d4:	22bb      	movs	r2, #187	; 0xbb
 80019d6:	21bb      	movs	r1, #187	; 0xbb
 80019d8:	2097      	movs	r0, #151	; 0x97
 80019da:	f7ff ffb3 	bl	8001944 <SPISend>
  SPISend(IDRIVE_PRE_CFG_AddWrite,IDRIVE_PRE_CFG_HValue,IDRIVE_PRE_CFG_LValue);
 80019de:	22bb      	movs	r2, #187	; 0xbb
 80019e0:	2100      	movs	r1, #0
 80019e2:	2098      	movs	r0, #152	; 0x98
 80019e4:	f7ff ffae 	bl	8001944 <SPISend>
  SPISend(TDRIVE_SRC_CFG_AddWrite,TDRIVE_SRC_CFG_HValue,TDRIVE_SRC_CFG_LValue);
 80019e8:	2205      	movs	r2, #5
 80019ea:	2109      	movs	r1, #9
 80019ec:	2099      	movs	r0, #153	; 0x99
 80019ee:	f7ff ffa9 	bl	8001944 <SPISend>
  SPISend(TDRIVE_SINK_CFG_AddWrite,TDRIVE_SINK_CFG_HValue,TDRIVE_SINK_CFG_LValue);
 80019f2:	220d      	movs	r2, #13
 80019f4:	210d      	movs	r1, #13
 80019f6:	209a      	movs	r0, #154	; 0x9a
 80019f8:	f7ff ffa4 	bl	8001944 <SPISend>
  SPISend(DT_CFG_AddWrite,DT_CFG_HValue,DT_CFG_LValue);
 80019fc:	220a      	movs	r2, #10
 80019fe:	210c      	movs	r1, #12
 8001a00:	209b      	movs	r0, #155	; 0x9b
 8001a02:	f7ff ff9f 	bl	8001944 <SPISend>
  SPISend(CSAMP_CFG_AddWrite,CSAMP_CFG_HValue,CSAMP_CFG_LValue);
 8001a06:	2270      	movs	r2, #112	; 0x70
 8001a08:	21c0      	movs	r1, #192	; 0xc0
 8001a0a:	209d      	movs	r0, #157	; 0x9d
 8001a0c:	f7ff ff9a 	bl	8001944 <SPISend>
  SPISend(CSAMP2_CFG_AddWrite,CSAMP2_CFG_HValue,CSAMP2_CFG_LValue);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2128      	movs	r1, #40	; 0x28
 8001a14:	209e      	movs	r0, #158	; 0x9e
 8001a16:	f7ff ff95 	bl	8001944 <SPISend>
  HAL_Delay(10);
 8001a1a:	200a      	movs	r0, #10
 8001a1c:	f000 fd4c 	bl	80024b8 <HAL_Delay>

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <Sector>:

int Sector(double ceta){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	ed87 0b00 	vstr	d0, [r7]
	uint8_t _sector = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]
	if(ceta >= 0 && ceta < 360)
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a3e:	f7ff f825 	bl	8000a8c <__aeabi_dcmpge>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d023      	beq.n	8001a90 <Sector+0x6c>
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <Sector+0x7c>)
 8001a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a52:	f7ff f807 	bl	8000a64 <__aeabi_dcmplt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d019      	beq.n	8001a90 <Sector+0x6c>
		_sector = ceil(ceta/60);
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <Sector+0x80>)
 8001a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a66:	f7fe feb5 	bl	80007d4 <__aeabi_ddiv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	ec43 2b17 	vmov	d7, r2, r3
 8001a72:	eeb0 0a47 	vmov.f32	s0, s14
 8001a76:	eef0 0a67 	vmov.f32	s1, s15
 8001a7a:	f004 f8b5 	bl	8005be8 <ceil>
 8001a7e:	ec53 2b10 	vmov	r2, r3, d0
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff f83d 	bl	8000b04 <__aeabi_d2uiz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	73fb      	strb	r3, [r7, #15]
 8001a8e:	e001      	b.n	8001a94 <Sector+0x70>
	else
		_sector = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
	return _sector;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40768000 	.word	0x40768000
 8001aa4:	404e0000 	.word	0x404e0000

08001aa8 <Convert>:
double Convert(double degree)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	ed87 0b00 	vstr	d0, [r7]
    return (M_PI/180*degree)-M_PI;
 8001ab2:	a30d      	add	r3, pc, #52	; (adr r3, 8001ae8 <Convert+0x40>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001abc:	f7fe fd60 	bl	8000580 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	a309      	add	r3, pc, #36	; (adr r3, 8001af0 <Convert+0x48>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	f7fe fb9f 	bl	8000210 <__aeabi_dsub>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ada:	eeb0 0a47 	vmov.f32	s0, s14
 8001ade:	eef0 0a67 	vmov.f32	s1, s15
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	a2529d39 	.word	0xa2529d39
 8001aec:	3f91df46 	.word	0x3f91df46
 8001af0:	54442d18 	.word	0x54442d18
 8001af4:	400921fb 	.word	0x400921fb

08001af8 <SpaceVector>:
void SpaceVector(double V_ref,float Ceta){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b090      	sub	sp, #64	; 0x40
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b02:	ed87 1a01 	vstr	s2, [r7, #4]

	double rad=Convert(Ceta);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7fe fce2 	bl	80004d0 <__aeabi_f2d>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	ec43 2b10 	vmov	d0, r2, r3
 8001b14:	f7ff ffc8 	bl	8001aa8 <Convert>
 8001b18:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	double ts= (V_ref/Vdc)*sqrt(3);//mi*sqrt(3)
 8001b1c:	4bc2      	ldr	r3, [pc, #776]	; (8001e28 <SpaceVector+0x330>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fcd6 	bl	80004d0 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b2c:	f7fe fe52 	bl	80007d4 <__aeabi_ddiv>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	a3b5      	add	r3, pc, #724	; (adr r3, 8001e10 <SpaceVector+0x318>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd1f 	bl	8000580 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int n=Sector(Ceta);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7fe fcc0 	bl	80004d0 <__aeabi_f2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	ec43 2b10 	vmov	d0, r2, r3
 8001b58:	f7ff ff64 	bl	8001a24 <Sector>
 8001b5c:	62f8      	str	r0, [r7, #44]	; 0x2c
	float t1 = ts*(sin(((float)n*(M_PI/3.0f))-rad));
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b68:	ee17 0a90 	vmov	r0, s15
 8001b6c:	f7fe fcb0 	bl	80004d0 <__aeabi_f2d>
 8001b70:	a3a9      	add	r3, pc, #676	; (adr r3, 8001e18 <SpaceVector+0x320>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe fd03 	bl	8000580 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b86:	f7fe fb43 	bl	8000210 <__aeabi_dsub>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	ec43 2b17 	vmov	d7, r2, r3
 8001b92:	eeb0 0a47 	vmov.f32	s0, s14
 8001b96:	eef0 0a67 	vmov.f32	s1, s15
 8001b9a:	f004 f8a9 	bl	8005cf0 <sin>
 8001b9e:	ec51 0b10 	vmov	r0, r1, d0
 8001ba2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ba6:	f7fe fceb 	bl	8000580 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f7fe ffc7 	bl	8000b44 <__aeabi_d2f>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
	float t2 = ts*(sin(rad-((float)n-1.0f)/3.0f*M_PI));
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bcc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001bd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bd4:	ee16 0a90 	vmov	r0, s13
 8001bd8:	f7fe fc7a 	bl	80004d0 <__aeabi_f2d>
 8001bdc:	a390      	add	r3, pc, #576	; (adr r3, 8001e20 <SpaceVector+0x328>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe fccd 	bl	8000580 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bee:	f7fe fb0f 	bl	8000210 <__aeabi_dsub>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	ec43 2b17 	vmov	d7, r2, r3
 8001bfa:	eeb0 0a47 	vmov.f32	s0, s14
 8001bfe:	eef0 0a67 	vmov.f32	s1, s15
 8001c02:	f004 f875 	bl	8005cf0 <sin>
 8001c06:	ec51 0b10 	vmov	r0, r1, d0
 8001c0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c0e:	f7fe fcb7 	bl	8000580 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7fe ff93 	bl	8000b44 <__aeabi_d2f>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24

	float t0 = ts-(t1+t2);
 8001c22:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	ee17 0a90 	vmov	r0, s15
 8001c32:	f7fe fc4d 	bl	80004d0 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c3e:	f7fe fae7 	bl	8000210 <__aeabi_dsub>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe ff7b 	bl	8000b44 <__aeabi_d2f>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	623b      	str	r3, [r7, #32]
	float t120 = t1+t2+(t0/2);
 8001c52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c62:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c66:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6e:	edc7 7a07 	vstr	s15, [r7, #28]
	float t10 = t1+(t0/2);
 8001c72:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c76:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	edc7 7a06 	vstr	s15, [r7, #24]
	float t20 = t2+(t0/2);
 8001c8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c96:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	edc7 7a05 	vstr	s15, [r7, #20]
    // phase A
	switch(n){
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	f200 80e6 	bhi.w	8001e78 <SpaceVector+0x380>
 8001cac:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <SpaceVector+0x1bc>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001ccd 	.word	0x08001ccd
 8001cb8:	08001d0d 	.word	0x08001d0d
 8001cbc:	08001d4d 	.word	0x08001d4d
 8001cc0:	08001d8d 	.word	0x08001d8d
 8001cc4:	08001dcd 	.word	0x08001dcd
 8001cc8:	08001e39 	.word	0x08001e39
	case 1 :Va=t120;
 8001ccc:	69f8      	ldr	r0, [r7, #28]
 8001cce:	f7fe fbff 	bl	80004d0 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4955      	ldr	r1, [pc, #340]	; (8001e2c <SpaceVector+0x334>)
 8001cd8:	e9c1 2300 	strd	r2, r3, [r1]
			Vb=t20;
 8001cdc:	6978      	ldr	r0, [r7, #20]
 8001cde:	f7fe fbf7 	bl	80004d0 <__aeabi_f2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4952      	ldr	r1, [pc, #328]	; (8001e30 <SpaceVector+0x338>)
 8001ce8:	e9c1 2300 	strd	r2, r3, [r1]
			Vc=t0/2;//
 8001cec:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cf0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001cf4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cf8:	ee16 0a90 	vmov	r0, s13
 8001cfc:	f7fe fbe8 	bl	80004d0 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	494b      	ldr	r1, [pc, #300]	; (8001e34 <SpaceVector+0x33c>)
 8001d06:	e9c1 2300 	strd	r2, r3, [r1]
	break;
 8001d0a:	e0b5      	b.n	8001e78 <SpaceVector+0x380>
 	case 2 :Va=t10;
 8001d0c:	69b8      	ldr	r0, [r7, #24]
 8001d0e:	f7fe fbdf 	bl	80004d0 <__aeabi_f2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4945      	ldr	r1, [pc, #276]	; (8001e2c <SpaceVector+0x334>)
 8001d18:	e9c1 2300 	strd	r2, r3, [r1]
 			Vb=t120;
 8001d1c:	69f8      	ldr	r0, [r7, #28]
 8001d1e:	f7fe fbd7 	bl	80004d0 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4942      	ldr	r1, [pc, #264]	; (8001e30 <SpaceVector+0x338>)
 8001d28:	e9c1 2300 	strd	r2, r3, [r1]
 			Vc=t0/2;//
 8001d2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001d34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d38:	ee16 0a90 	vmov	r0, s13
 8001d3c:	f7fe fbc8 	bl	80004d0 <__aeabi_f2d>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	493b      	ldr	r1, [pc, #236]	; (8001e34 <SpaceVector+0x33c>)
 8001d46:	e9c1 2300 	strd	r2, r3, [r1]
 	break;
 8001d4a:	e095      	b.n	8001e78 <SpaceVector+0x380>
 	case 3 :Va=t0/2;
 8001d4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d50:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001d54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d58:	ee16 0a90 	vmov	r0, s13
 8001d5c:	f7fe fbb8 	bl	80004d0 <__aeabi_f2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4931      	ldr	r1, [pc, #196]	; (8001e2c <SpaceVector+0x334>)
 8001d66:	e9c1 2300 	strd	r2, r3, [r1]
 			Vb=t120;
 8001d6a:	69f8      	ldr	r0, [r7, #28]
 8001d6c:	f7fe fbb0 	bl	80004d0 <__aeabi_f2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	492e      	ldr	r1, [pc, #184]	; (8001e30 <SpaceVector+0x338>)
 8001d76:	e9c1 2300 	strd	r2, r3, [r1]
 			Vc=t20;//
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7fe fba8 	bl	80004d0 <__aeabi_f2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	492b      	ldr	r1, [pc, #172]	; (8001e34 <SpaceVector+0x33c>)
 8001d86:	e9c1 2300 	strd	r2, r3, [r1]
 	break;
 8001d8a:	e075      	b.n	8001e78 <SpaceVector+0x380>
 	case 4 :Va=t0/2;
 8001d8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001d94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d98:	ee16 0a90 	vmov	r0, s13
 8001d9c:	f7fe fb98 	bl	80004d0 <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4921      	ldr	r1, [pc, #132]	; (8001e2c <SpaceVector+0x334>)
 8001da6:	e9c1 2300 	strd	r2, r3, [r1]
 			Vb=t10;
 8001daa:	69b8      	ldr	r0, [r7, #24]
 8001dac:	f7fe fb90 	bl	80004d0 <__aeabi_f2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	491e      	ldr	r1, [pc, #120]	; (8001e30 <SpaceVector+0x338>)
 8001db6:	e9c1 2300 	strd	r2, r3, [r1]
 			Vc=t120;//
 8001dba:	69f8      	ldr	r0, [r7, #28]
 8001dbc:	f7fe fb88 	bl	80004d0 <__aeabi_f2d>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	491b      	ldr	r1, [pc, #108]	; (8001e34 <SpaceVector+0x33c>)
 8001dc6:	e9c1 2300 	strd	r2, r3, [r1]
 	break;
 8001dca:	e055      	b.n	8001e78 <SpaceVector+0x380>
 	case 5 :Va=t20;
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f7fe fb7f 	bl	80004d0 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4915      	ldr	r1, [pc, #84]	; (8001e2c <SpaceVector+0x334>)
 8001dd8:	e9c1 2300 	strd	r2, r3, [r1]
 			Vb=t0/2;
 8001ddc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001de0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001de4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001de8:	ee16 0a90 	vmov	r0, s13
 8001dec:	f7fe fb70 	bl	80004d0 <__aeabi_f2d>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	490e      	ldr	r1, [pc, #56]	; (8001e30 <SpaceVector+0x338>)
 8001df6:	e9c1 2300 	strd	r2, r3, [r1]
 			Vc=t120;//
 8001dfa:	69f8      	ldr	r0, [r7, #28]
 8001dfc:	f7fe fb68 	bl	80004d0 <__aeabi_f2d>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	490b      	ldr	r1, [pc, #44]	; (8001e34 <SpaceVector+0x33c>)
 8001e06:	e9c1 2300 	strd	r2, r3, [r1]
 	break;
 8001e0a:	e035      	b.n	8001e78 <SpaceVector+0x380>
 8001e0c:	f3af 8000 	nop.w
 8001e10:	e8584caa 	.word	0xe8584caa
 8001e14:	3ffbb67a 	.word	0x3ffbb67a
 8001e18:	382d7365 	.word	0x382d7365
 8001e1c:	3ff0c152 	.word	0x3ff0c152
 8001e20:	54442d18 	.word	0x54442d18
 8001e24:	400921fb 	.word	0x400921fb
 8001e28:	41c00000 	.word	0x41c00000
 8001e2c:	200002c8 	.word	0x200002c8
 8001e30:	200002d0 	.word	0x200002d0
 8001e34:	200002d8 	.word	0x200002d8
 	case 6 :Va=t120;
 8001e38:	69f8      	ldr	r0, [r7, #28]
 8001e3a:	f7fe fb49 	bl	80004d0 <__aeabi_f2d>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	490f      	ldr	r1, [pc, #60]	; (8001e80 <SpaceVector+0x388>)
 8001e44:	e9c1 2300 	strd	r2, r3, [r1]
 			Vb=t0/2;
 8001e48:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001e50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e54:	ee16 0a90 	vmov	r0, s13
 8001e58:	f7fe fb3a 	bl	80004d0 <__aeabi_f2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4908      	ldr	r1, [pc, #32]	; (8001e84 <SpaceVector+0x38c>)
 8001e62:	e9c1 2300 	strd	r2, r3, [r1]
 			Vc=t10;//
 8001e66:	69b8      	ldr	r0, [r7, #24]
 8001e68:	f7fe fb32 	bl	80004d0 <__aeabi_f2d>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4905      	ldr	r1, [pc, #20]	; (8001e88 <SpaceVector+0x390>)
 8001e72:	e9c1 2300 	strd	r2, r3, [r1]
 	break;
 8001e76:	bf00      	nop
	}
}
 8001e78:	bf00      	nop
 8001e7a:	3740      	adds	r7, #64	; 0x40
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200002c8 	.word	0x200002c8
 8001e84:	200002d0 	.word	0x200002d0
 8001e88:	200002d8 	.word	0x200002d8

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <Error_Handler+0x8>
	...

08001e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ed6:	2007      	movs	r0, #7
 8001ed8:	f001 f804 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08e      	sub	sp, #56	; 0x38
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a8c      	ldr	r2, [pc, #560]	; (8002138 <HAL_ADC_MspInit+0x250>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d157      	bne.n	8001fba <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
 8001f0e:	4b8b      	ldr	r3, [pc, #556]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a8a      	ldr	r2, [pc, #552]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b88      	ldr	r3, [pc, #544]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	4b84      	ldr	r3, [pc, #528]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a83      	ldr	r2, [pc, #524]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b81      	ldr	r3, [pc, #516]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f42:	2302      	movs	r3, #2
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f46:	2303      	movs	r3, #3
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	4619      	mov	r1, r3
 8001f54:	487a      	ldr	r0, [pc, #488]	; (8002140 <HAL_ADC_MspInit+0x258>)
 8001f56:	f001 fb77 	bl	8003648 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f5a:	4b7a      	ldr	r3, [pc, #488]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f5c:	4a7a      	ldr	r2, [pc, #488]	; (8002148 <HAL_ADC_MspInit+0x260>)
 8001f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f60:	4b78      	ldr	r3, [pc, #480]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f66:	4b77      	ldr	r3, [pc, #476]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6c:	4b75      	ldr	r3, [pc, #468]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f72:	4b74      	ldr	r3, [pc, #464]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f7a:	4b72      	ldr	r3, [pc, #456]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f82:	4b70      	ldr	r3, [pc, #448]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f8a:	4b6e      	ldr	r3, [pc, #440]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f90:	4b6c      	ldr	r3, [pc, #432]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f96:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f9c:	4869      	ldr	r0, [pc, #420]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001f9e:	f000 ffe3 	bl	8002f68 <HAL_DMA_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001fa8:	f7ff ff70 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a65      	ldr	r2, [pc, #404]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001fb0:	639a      	str	r2, [r3, #56]	; 0x38
 8001fb2:	4a64      	ldr	r2, [pc, #400]	; (8002144 <HAL_ADC_MspInit+0x25c>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001fb8:	e0ba      	b.n	8002130 <HAL_ADC_MspInit+0x248>
  else if(hadc->Instance==ADC2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a63      	ldr	r2, [pc, #396]	; (800214c <HAL_ADC_MspInit+0x264>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d158      	bne.n	8002076 <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	4b5c      	ldr	r3, [pc, #368]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	4a5b      	ldr	r2, [pc, #364]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd4:	4b59      	ldr	r3, [pc, #356]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	4b55      	ldr	r3, [pc, #340]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	4a54      	ldr	r2, [pc, #336]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff0:	4b52      	ldr	r3, [pc, #328]	; (800213c <HAL_ADC_MspInit+0x254>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002000:	2303      	movs	r3, #3
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200c:	4619      	mov	r1, r3
 800200e:	484c      	ldr	r0, [pc, #304]	; (8002140 <HAL_ADC_MspInit+0x258>)
 8002010:	f001 fb1a 	bl	8003648 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002014:	4b4e      	ldr	r3, [pc, #312]	; (8002150 <HAL_ADC_MspInit+0x268>)
 8002016:	4a4f      	ldr	r2, [pc, #316]	; (8002154 <HAL_ADC_MspInit+0x26c>)
 8002018:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800201a:	4b4d      	ldr	r3, [pc, #308]	; (8002150 <HAL_ADC_MspInit+0x268>)
 800201c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002020:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002022:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <HAL_ADC_MspInit+0x268>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002028:	4b49      	ldr	r3, [pc, #292]	; (8002150 <HAL_ADC_MspInit+0x268>)
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800202e:	4b48      	ldr	r3, [pc, #288]	; (8002150 <HAL_ADC_MspInit+0x268>)
 8002030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002034:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_ADC_MspInit+0x268>)
 8002038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800203c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800203e:	4b44      	ldr	r3, [pc, #272]	; (8002150 <HAL_ADC_MspInit+0x268>)
 8002040:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002044:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002046:	4b42      	ldr	r3, [pc, #264]	; (8002150 <HAL_ADC_MspInit+0x268>)
 8002048:	2200      	movs	r2, #0
 800204a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800204c:	4b40      	ldr	r3, [pc, #256]	; (8002150 <HAL_ADC_MspInit+0x268>)
 800204e:	2200      	movs	r2, #0
 8002050:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002052:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <HAL_ADC_MspInit+0x268>)
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002058:	483d      	ldr	r0, [pc, #244]	; (8002150 <HAL_ADC_MspInit+0x268>)
 800205a:	f000 ff85 	bl	8002f68 <HAL_DMA_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_ADC_MspInit+0x180>
      Error_Handler();
 8002064:	f7ff ff12 	bl	8001e8c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a39      	ldr	r2, [pc, #228]	; (8002150 <HAL_ADC_MspInit+0x268>)
 800206c:	639a      	str	r2, [r3, #56]	; 0x38
 800206e:	4a38      	ldr	r2, [pc, #224]	; (8002150 <HAL_ADC_MspInit+0x268>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002074:	e05c      	b.n	8002130 <HAL_ADC_MspInit+0x248>
  else if(hadc->Instance==ADC3)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a37      	ldr	r2, [pc, #220]	; (8002158 <HAL_ADC_MspInit+0x270>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d157      	bne.n	8002130 <HAL_ADC_MspInit+0x248>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_ADC_MspInit+0x254>)
 8002086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002088:	4a2c      	ldr	r2, [pc, #176]	; (800213c <HAL_ADC_MspInit+0x254>)
 800208a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208e:	6453      	str	r3, [r2, #68]	; 0x44
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_ADC_MspInit+0x254>)
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4b26      	ldr	r3, [pc, #152]	; (800213c <HAL_ADC_MspInit+0x254>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a25      	ldr	r2, [pc, #148]	; (800213c <HAL_ADC_MspInit+0x254>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6313      	str	r3, [r2, #48]	; 0x30
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_ADC_MspInit+0x254>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020b8:	2308      	movs	r3, #8
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020bc:	2303      	movs	r3, #3
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	481d      	ldr	r0, [pc, #116]	; (8002140 <HAL_ADC_MspInit+0x258>)
 80020cc:	f001 fabc 	bl	8003648 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_ADC_MspInit+0x274>)
 80020d2:	4a23      	ldr	r2, [pc, #140]	; (8002160 <HAL_ADC_MspInit+0x278>)
 80020d4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_ADC_MspInit+0x274>)
 80020d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020dc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <HAL_ADC_MspInit+0x274>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_ADC_MspInit+0x274>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_ADC_MspInit+0x274>)
 80020ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_ADC_MspInit+0x274>)
 80020f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020f8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_ADC_MspInit+0x274>)
 80020fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002100:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_ADC_MspInit+0x274>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_ADC_MspInit+0x274>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_ADC_MspInit+0x274>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002114:	4811      	ldr	r0, [pc, #68]	; (800215c <HAL_ADC_MspInit+0x274>)
 8002116:	f000 ff27 	bl	8002f68 <HAL_DMA_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_ADC_MspInit+0x23c>
      Error_Handler();
 8002120:	f7ff feb4 	bl	8001e8c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a0d      	ldr	r2, [pc, #52]	; (800215c <HAL_ADC_MspInit+0x274>)
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
 800212a:	4a0c      	ldr	r2, [pc, #48]	; (800215c <HAL_ADC_MspInit+0x274>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002130:	bf00      	nop
 8002132:	3738      	adds	r7, #56	; 0x38
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40012000 	.word	0x40012000
 800213c:	40023800 	.word	0x40023800
 8002140:	40020800 	.word	0x40020800
 8002144:	20000104 	.word	0x20000104
 8002148:	40026410 	.word	0x40026410
 800214c:	40012100 	.word	0x40012100
 8002150:	20000164 	.word	0x20000164
 8002154:	40026440 	.word	0x40026440
 8002158:	40012200 	.word	0x40012200
 800215c:	200001c4 	.word	0x200001c4
 8002160:	40026428 	.word	0x40026428

08002164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_SPI_MspInit+0x84>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d12c      	bne.n	80021e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_SPI_MspInit+0x88>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a17      	ldr	r2, [pc, #92]	; (80021ec <HAL_SPI_MspInit+0x88>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_SPI_MspInit+0x88>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_SPI_MspInit+0x88>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a10      	ldr	r2, [pc, #64]	; (80021ec <HAL_SPI_MspInit+0x88>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_SPI_MspInit+0x88>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021d0:	2305      	movs	r3, #5
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <HAL_SPI_MspInit+0x8c>)
 80021dc:	f001 fa34 	bl	8003648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40003800 	.word	0x40003800
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020400 	.word	0x40020400

080021f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0e      	ldr	r2, [pc, #56]	; (800223c <HAL_TIM_Base_MspInit+0x48>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d115      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_TIM_Base_MspInit+0x4c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_TIM_Base_MspInit+0x4c>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_TIM_Base_MspInit+0x4c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2019      	movs	r0, #25
 8002228:	f000 fe67 	bl	8002efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800222c:	2019      	movs	r0, #25
 800222e:	f000 fe80 	bl	8002f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40010000 	.word	0x40010000
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a12      	ldr	r2, [pc, #72]	; (80022ac <HAL_TIM_MspPostInit+0x68>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d11e      	bne.n	80022a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_TIM_MspPostInit+0x6c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_TIM_MspPostInit+0x6c>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_TIM_MspPostInit+0x6c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002282:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002286:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002294:	2301      	movs	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	4619      	mov	r1, r3
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <HAL_TIM_MspPostInit+0x70>)
 80022a0:	f001 f9d2 	bl	8003648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022a4:	bf00      	nop
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020000 	.word	0x40020000

080022b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <NMI_Handler+0x4>

080022be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <MemManage_Handler+0x4>

080022ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f000 f8b8 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002312:	f002 fdbd 	bl	8004e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000027c 	.word	0x2000027c

08002320 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <DMA2_Stream0_IRQHandler+0x10>)
 8002326:	f000 ff25 	bl	8003174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000104 	.word	0x20000104

08002334 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <DMA2_Stream1_IRQHandler+0x10>)
 800233a:	f000 ff1b 	bl	8003174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200001c4 	.word	0x200001c4

08002348 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <DMA2_Stream2_IRQHandler+0x10>)
 800234e:	f000 ff11 	bl	8003174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000164 	.word	0x20000164

0800235c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <SystemInit+0x20>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <SystemInit+0x20>)
 8002368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800236c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002386:	490e      	ldr	r1, [pc, #56]	; (80023c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002388:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800239c:	4c0b      	ldr	r4, [pc, #44]	; (80023cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023aa:	f7ff ffd7 	bl	800235c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ae:	f004 fce9 	bl	8006d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023b2:	f7fe fef1 	bl	8001198 <main>
  bx  lr    
 80023b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80023c4:	08006ff8 	.word	0x08006ff8
  ldr r2, =_sbss
 80023c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80023cc:	20000304 	.word	0x20000304

080023d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <ADC_IRQHandler>
	...

080023d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <HAL_Init+0x40>)
 80023de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_Init+0x40>)
 80023ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a07      	ldr	r2, [pc, #28]	; (8002414 <HAL_Init+0x40>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f000 fd71 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002402:	2000      	movs	r0, #0
 8002404:	f000 f808 	bl	8002418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002408:	f7ff fd46 	bl	8001e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023c00 	.word	0x40023c00

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_InitTick+0x54>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_InitTick+0x58>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fd89 	bl	8002f4e <HAL_SYSTICK_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00e      	b.n	8002464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b0f      	cmp	r3, #15
 800244a:	d80a      	bhi.n	8002462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800244c:	2200      	movs	r2, #0
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f000 fd51 	bl	8002efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <HAL_InitTick+0x5c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000000 	.word	0x20000000
 8002470:	20000008 	.word	0x20000008
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x20>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x24>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_IncTick+0x24>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008
 800249c:	20000300 	.word	0x20000300

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000300 	.word	0x20000300

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff ffee 	bl	80024a0 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d005      	beq.n	80024de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_Delay+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024de:	bf00      	nop
 80024e0:	f7ff ffde 	bl	80024a0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f7      	bhi.n	80024e0 <HAL_Delay+0x28>
  {
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008

08002500 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e033      	b.n	800257e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fce2 	bl	8001ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002546:	f023 0302 	bic.w	r3, r3, #2
 800254a:	f043 0202 	orr.w	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fa78 	bl	8002a48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
 800256e:	e001      	b.n	8002574 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_Start_DMA+0x1e>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e0e9      	b.n	800277a <HAL_ADC_Start_DMA+0x1f2>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d018      	beq.n	80025ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025cc:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <HAL_ADC_Start_DMA+0x1fc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a6d      	ldr	r2, [pc, #436]	; (8002788 <HAL_ADC_Start_DMA+0x200>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0c9a      	lsrs	r2, r3, #18
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025e0:	e002      	b.n	80025e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f9      	bne.n	80025e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fc:	d107      	bne.n	800260e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800260c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	f040 80a1 	bne.w	8002760 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002648:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	d106      	bne.n	800266c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f023 0206 	bic.w	r2, r3, #6
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
 800266a:	e002      	b.n	8002672 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267a:	4b44      	ldr	r3, [pc, #272]	; (800278c <HAL_ADC_Start_DMA+0x204>)
 800267c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	4a43      	ldr	r2, [pc, #268]	; (8002790 <HAL_ADC_Start_DMA+0x208>)
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	4a42      	ldr	r2, [pc, #264]	; (8002794 <HAL_ADC_Start_DMA+0x20c>)
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	4a41      	ldr	r2, [pc, #260]	; (8002798 <HAL_ADC_Start_DMA+0x210>)
 8002694:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800269e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	334c      	adds	r3, #76	; 0x4c
 80026ca:	4619      	mov	r1, r3
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f000 fcf8 	bl	80030c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d12a      	bne.n	8002736 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2d      	ldr	r2, [pc, #180]	; (800279c <HAL_ADC_Start_DMA+0x214>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d015      	beq.n	8002716 <HAL_ADC_Start_DMA+0x18e>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <HAL_ADC_Start_DMA+0x218>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d105      	bne.n	8002700 <HAL_ADC_Start_DMA+0x178>
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <HAL_ADC_Start_DMA+0x204>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <HAL_ADC_Start_DMA+0x21c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d136      	bne.n	8002778 <HAL_ADC_Start_DMA+0x1f0>
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_ADC_Start_DMA+0x204>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d130      	bne.n	8002778 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d129      	bne.n	8002778 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	e020      	b.n	8002778 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_ADC_Start_DMA+0x214>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d11b      	bne.n	8002778 <HAL_ADC_Start_DMA+0x1f0>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d114      	bne.n	8002778 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	e00b      	b.n	8002778 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f043 0210 	orr.w	r2, r3, #16
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000000 	.word	0x20000000
 8002788:	431bde83 	.word	0x431bde83
 800278c:	40012300 	.word	0x40012300
 8002790:	08002c41 	.word	0x08002c41
 8002794:	08002cfb 	.word	0x08002cfb
 8002798:	08002d17 	.word	0x08002d17
 800279c:	40012000 	.word	0x40012000
 80027a0:	40012100 	.word	0x40012100
 80027a4:	40012200 	.word	0x40012200

080027a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x1c>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e113      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x244>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b09      	cmp	r3, #9
 800280e:	d925      	bls.n	800285c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68d9      	ldr	r1, [r3, #12]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	3b1e      	subs	r3, #30
 8002826:	2207      	movs	r2, #7
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43da      	mvns	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	400a      	ands	r2, r1
 8002834:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68d9      	ldr	r1, [r3, #12]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	4618      	mov	r0, r3
 8002848:	4603      	mov	r3, r0
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4403      	add	r3, r0
 800284e:	3b1e      	subs	r3, #30
 8002850:	409a      	lsls	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	e022      	b.n	80028a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6919      	ldr	r1, [r3, #16]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	2207      	movs	r2, #7
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	400a      	ands	r2, r1
 800287e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6919      	ldr	r1, [r3, #16]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	4618      	mov	r0, r3
 8002892:	4603      	mov	r3, r0
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4403      	add	r3, r0
 8002898:	409a      	lsls	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d824      	bhi.n	80028f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3b05      	subs	r3, #5
 80028bc:	221f      	movs	r2, #31
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	400a      	ands	r2, r1
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	3b05      	subs	r3, #5
 80028e6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34
 80028f2:	e04c      	b.n	800298e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d824      	bhi.n	8002946 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	3b23      	subs	r3, #35	; 0x23
 800290e:	221f      	movs	r2, #31
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43da      	mvns	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	400a      	ands	r2, r1
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	4618      	mov	r0, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	3b23      	subs	r3, #35	; 0x23
 8002938:	fa00 f203 	lsl.w	r2, r0, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
 8002944:	e023      	b.n	800298e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	3b41      	subs	r3, #65	; 0x41
 8002958:	221f      	movs	r2, #31
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	400a      	ands	r2, r1
 8002966:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	4618      	mov	r0, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	3b41      	subs	r3, #65	; 0x41
 8002982:	fa00 f203 	lsl.w	r2, r0, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800298e:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <HAL_ADC_ConfigChannel+0x250>)
 8002990:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a28      	ldr	r2, [pc, #160]	; (8002a38 <HAL_ADC_ConfigChannel+0x254>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d10f      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x1d8>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b12      	cmp	r3, #18
 80029a2:	d10b      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <HAL_ADC_ConfigChannel+0x254>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d12b      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x23a>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_ADC_ConfigChannel+0x258>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x1f4>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b11      	cmp	r3, #17
 80029d6:	d122      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <HAL_ADC_ConfigChannel+0x258>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d111      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_ADC_ConfigChannel+0x25c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a11      	ldr	r2, [pc, #68]	; (8002a44 <HAL_ADC_ConfigChannel+0x260>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	0c9a      	lsrs	r2, r3, #18
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a10:	e002      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f9      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40012300 	.word	0x40012300
 8002a38:	40012000 	.word	0x40012000
 8002a3c:	10000012 	.word	0x10000012
 8002a40:	20000000 	.word	0x20000000
 8002a44:	431bde83 	.word	0x431bde83

08002a48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a50:	4b79      	ldr	r3, [pc, #484]	; (8002c38 <ADC_Init+0x1f0>)
 8002a52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	021a      	lsls	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <ADC_Init+0x1f4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d022      	beq.n	8002b26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6899      	ldr	r1, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	e00f      	b.n	8002b46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0202 	bic.w	r2, r2, #2
 8002b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	7e1b      	ldrb	r3, [r3, #24]
 8002b60:	005a      	lsls	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01b      	beq.n	8002bac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	035a      	lsls	r2, r3, #13
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	e007      	b.n	8002bbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	051a      	lsls	r2, r3, #20
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6899      	ldr	r1, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bfe:	025a      	lsls	r2, r3, #9
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6899      	ldr	r1, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	029a      	lsls	r2, r3, #10
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40012300 	.word	0x40012300
 8002c3c:	0f000001 	.word	0x0f000001

08002c40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d13c      	bne.n	8002cd4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d12b      	bne.n	8002ccc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d127      	bne.n	8002ccc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d119      	bne.n	8002ccc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0220 	bic.w	r2, r2, #32
 8002ca6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff fd6b 	bl	80027a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cd2:	e00e      	b.n	8002cf2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff fd75 	bl	80027d0 <HAL_ADC_ErrorCallback>
}
 8002ce6:	e004      	b.n	8002cf2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
}
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f7ff fd57 	bl	80027bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2240      	movs	r2, #64	; 0x40
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f043 0204 	orr.w	r2, r3, #4
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff fd4a 	bl	80027d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb0:	d301      	bcc.n	8002eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00f      	b.n	8002ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <SysTick_Config+0x40>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec4:	f7ff ff8e 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <SysTick_Config+0x40>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <SysTick_Config+0x40>)
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010

08002ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff29 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f0c:	f7ff ff3e 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f7ff ff8e 	bl	8002e38 <NVIC_EncodePriority>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff5d 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f2a:	bf00      	nop
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	4603      	mov	r3, r0
 8002f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff31 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ffa2 	bl	8002ea0 <SysTick_Config>
 8002f5c:	4603      	mov	r3, r0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7ff fa94 	bl	80024a0 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e099      	b.n	80030b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa4:	e00f      	b.n	8002fc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fa6:	f7ff fa7b 	bl	80024a0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d908      	bls.n	8002fc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e078      	b.n	80030b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e8      	bne.n	8002fa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <HAL_DMA_Init+0x158>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	2b04      	cmp	r3, #4
 800301e:	d107      	bne.n	8003030 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	4313      	orrs	r3, r2
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 0307 	bic.w	r3, r3, #7
 8003046:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2b04      	cmp	r3, #4
 8003058:	d117      	bne.n	800308a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00e      	beq.n	800308a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fa6f 	bl	8003550 <DMA_CheckFifoParam>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003086:	2301      	movs	r3, #1
 8003088:	e016      	b.n	80030b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fa26 	bl	80034e4 <DMA_CalcBaseAndBitshift>
 8003098:	4603      	mov	r3, r0
 800309a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	223f      	movs	r2, #63	; 0x3f
 80030a2:	409a      	lsls	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	f010803f 	.word	0xf010803f

080030c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_DMA_Start_IT+0x26>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e040      	b.n	800316c <HAL_DMA_Start_IT+0xa8>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d12f      	bne.n	800315e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2202      	movs	r2, #2
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f9b8 	bl	8003488 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	223f      	movs	r2, #63	; 0x3f
 800311e:	409a      	lsls	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0216 	orr.w	r2, r2, #22
 8003132:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0208 	orr.w	r2, r2, #8
 800314a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e005      	b.n	800316a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003166:	2302      	movs	r3, #2
 8003168:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800316a:	7dfb      	ldrb	r3, [r7, #23]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003180:	4b8e      	ldr	r3, [pc, #568]	; (80033bc <HAL_DMA_IRQHandler+0x248>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a8e      	ldr	r2, [pc, #568]	; (80033c0 <HAL_DMA_IRQHandler+0x24c>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0a9b      	lsrs	r3, r3, #10
 800318c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	2208      	movs	r2, #8
 80031a0:	409a      	lsls	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01a      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	2208      	movs	r2, #8
 80031ce:	409a      	lsls	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	2201      	movs	r2, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d012      	beq.n	8003216 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	2201      	movs	r2, #1
 8003204:	409a      	lsls	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	f043 0202 	orr.w	r2, r3, #2
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	2204      	movs	r2, #4
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d012      	beq.n	800324c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003238:	2204      	movs	r2, #4
 800323a:	409a      	lsls	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f043 0204 	orr.w	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	2210      	movs	r2, #16
 8003252:	409a      	lsls	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d043      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d03c      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	2210      	movs	r2, #16
 8003270:	409a      	lsls	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d018      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d024      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
 80032a2:	e01f      	b.n	80032e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01b      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
 80032b4:	e016      	b.n	80032e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0208 	bic.w	r2, r2, #8
 80032d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	2220      	movs	r2, #32
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 808f 	beq.w	8003414 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8087 	beq.w	8003414 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	2220      	movs	r2, #32
 800330c:	409a      	lsls	r2, r3
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b05      	cmp	r3, #5
 800331c:	d136      	bne.n	800338c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0216 	bic.w	r2, r2, #22
 800332c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800333c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <HAL_DMA_IRQHandler+0x1da>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0208 	bic.w	r2, r2, #8
 800335c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003362:	223f      	movs	r2, #63	; 0x3f
 8003364:	409a      	lsls	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337e:	2b00      	cmp	r3, #0
 8003380:	d07e      	beq.n	8003480 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
        }
        return;
 800338a:	e079      	b.n	8003480 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01d      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d031      	beq.n	8003414 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
 80033b8:	e02c      	b.n	8003414 <HAL_DMA_IRQHandler+0x2a0>
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000
 80033c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d023      	beq.n	8003414 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
 80033d4:	e01e      	b.n	8003414 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10f      	bne.n	8003404 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0210 	bic.w	r2, r2, #16
 80033f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003418:	2b00      	cmp	r3, #0
 800341a:	d032      	beq.n	8003482 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d022      	beq.n	800346e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2205      	movs	r2, #5
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3301      	adds	r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	429a      	cmp	r2, r3
 800344a:	d307      	bcc.n	800345c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f2      	bne.n	8003440 <HAL_DMA_IRQHandler+0x2cc>
 800345a:	e000      	b.n	800345e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800345c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
 800347e:	e000      	b.n	8003482 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003480:	bf00      	nop
    }
  }
}
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d108      	bne.n	80034c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034c6:	e007      	b.n	80034d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	3b10      	subs	r3, #16
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <DMA_CalcBaseAndBitshift+0x64>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034fe:	4a13      	ldr	r2, [pc, #76]	; (800354c <DMA_CalcBaseAndBitshift+0x68>)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d909      	bls.n	8003526 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	1d1a      	adds	r2, r3, #4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	659a      	str	r2, [r3, #88]	; 0x58
 8003524:	e007      	b.n	8003536 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	aaaaaaab 	.word	0xaaaaaaab
 800354c:	08006e08 	.word	0x08006e08

08003550 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d11f      	bne.n	80035aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d856      	bhi.n	800361e <DMA_CheckFifoParam+0xce>
 8003570:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <DMA_CheckFifoParam+0x28>)
 8003572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003576:	bf00      	nop
 8003578:	08003589 	.word	0x08003589
 800357c:	0800359b 	.word	0x0800359b
 8003580:	08003589 	.word	0x08003589
 8003584:	0800361f 	.word	0x0800361f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d046      	beq.n	8003622 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003598:	e043      	b.n	8003622 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035a2:	d140      	bne.n	8003626 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a8:	e03d      	b.n	8003626 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b2:	d121      	bne.n	80035f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d837      	bhi.n	800362a <DMA_CheckFifoParam+0xda>
 80035ba:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <DMA_CheckFifoParam+0x70>)
 80035bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c0:	080035d1 	.word	0x080035d1
 80035c4:	080035d7 	.word	0x080035d7
 80035c8:	080035d1 	.word	0x080035d1
 80035cc:	080035e9 	.word	0x080035e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      break;
 80035d4:	e030      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d025      	beq.n	800362e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e6:	e022      	b.n	800362e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035f0:	d11f      	bne.n	8003632 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035f6:	e01c      	b.n	8003632 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d903      	bls.n	8003606 <DMA_CheckFifoParam+0xb6>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d003      	beq.n	800360c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003604:	e018      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      break;
 800360a:	e015      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e00b      	b.n	8003636 <DMA_CheckFifoParam+0xe6>
      break;
 800361e:	bf00      	nop
 8003620:	e00a      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 8003622:	bf00      	nop
 8003624:	e008      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 8003626:	bf00      	nop
 8003628:	e006      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 800362a:	bf00      	nop
 800362c:	e004      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 800362e:	bf00      	nop
 8003630:	e002      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;   
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 8003636:	bf00      	nop
    }
  } 
  
  return status; 
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e165      	b.n	8003930 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003664:	2201      	movs	r2, #1
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	429a      	cmp	r2, r3
 800367e:	f040 8154 	bne.w	800392a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d005      	beq.n	800369a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003696:	2b02      	cmp	r3, #2
 8003698:	d130      	bne.n	80036fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d0:	2201      	movs	r2, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 0201 	and.w	r2, r3, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b03      	cmp	r3, #3
 8003706:	d017      	beq.n	8003738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d123      	bne.n	800378c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	220f      	movs	r2, #15
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	08da      	lsrs	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3208      	adds	r2, #8
 8003786:	69b9      	ldr	r1, [r7, #24]
 8003788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0203 	and.w	r2, r3, #3
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80ae 	beq.w	800392a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b5d      	ldr	r3, [pc, #372]	; (8003948 <HAL_GPIO_Init+0x300>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	4a5c      	ldr	r2, [pc, #368]	; (8003948 <HAL_GPIO_Init+0x300>)
 80037d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037dc:	6453      	str	r3, [r2, #68]	; 0x44
 80037de:	4b5a      	ldr	r3, [pc, #360]	; (8003948 <HAL_GPIO_Init+0x300>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ea:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_GPIO_Init+0x304>)
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	220f      	movs	r2, #15
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4f      	ldr	r2, [pc, #316]	; (8003950 <HAL_GPIO_Init+0x308>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d025      	beq.n	8003862 <HAL_GPIO_Init+0x21a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4e      	ldr	r2, [pc, #312]	; (8003954 <HAL_GPIO_Init+0x30c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d01f      	beq.n	800385e <HAL_GPIO_Init+0x216>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4d      	ldr	r2, [pc, #308]	; (8003958 <HAL_GPIO_Init+0x310>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d019      	beq.n	800385a <HAL_GPIO_Init+0x212>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4c      	ldr	r2, [pc, #304]	; (800395c <HAL_GPIO_Init+0x314>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_GPIO_Init+0x20e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4b      	ldr	r2, [pc, #300]	; (8003960 <HAL_GPIO_Init+0x318>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00d      	beq.n	8003852 <HAL_GPIO_Init+0x20a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4a      	ldr	r2, [pc, #296]	; (8003964 <HAL_GPIO_Init+0x31c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <HAL_GPIO_Init+0x206>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a49      	ldr	r2, [pc, #292]	; (8003968 <HAL_GPIO_Init+0x320>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_GPIO_Init+0x202>
 8003846:	2306      	movs	r3, #6
 8003848:	e00c      	b.n	8003864 <HAL_GPIO_Init+0x21c>
 800384a:	2307      	movs	r3, #7
 800384c:	e00a      	b.n	8003864 <HAL_GPIO_Init+0x21c>
 800384e:	2305      	movs	r3, #5
 8003850:	e008      	b.n	8003864 <HAL_GPIO_Init+0x21c>
 8003852:	2304      	movs	r3, #4
 8003854:	e006      	b.n	8003864 <HAL_GPIO_Init+0x21c>
 8003856:	2303      	movs	r3, #3
 8003858:	e004      	b.n	8003864 <HAL_GPIO_Init+0x21c>
 800385a:	2302      	movs	r3, #2
 800385c:	e002      	b.n	8003864 <HAL_GPIO_Init+0x21c>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_GPIO_Init+0x21c>
 8003862:	2300      	movs	r3, #0
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f002 0203 	and.w	r2, r2, #3
 800386a:	0092      	lsls	r2, r2, #2
 800386c:	4093      	lsls	r3, r2
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003874:	4935      	ldr	r1, [pc, #212]	; (800394c <HAL_GPIO_Init+0x304>)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	089b      	lsrs	r3, r3, #2
 800387a:	3302      	adds	r3, #2
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003882:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_GPIO_Init+0x324>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038a6:	4a31      	ldr	r2, [pc, #196]	; (800396c <HAL_GPIO_Init+0x324>)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ac:	4b2f      	ldr	r3, [pc, #188]	; (800396c <HAL_GPIO_Init+0x324>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d0:	4a26      	ldr	r2, [pc, #152]	; (800396c <HAL_GPIO_Init+0x324>)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_GPIO_Init+0x324>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fa:	4a1c      	ldr	r2, [pc, #112]	; (800396c <HAL_GPIO_Init+0x324>)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <HAL_GPIO_Init+0x324>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003924:	4a11      	ldr	r2, [pc, #68]	; (800396c <HAL_GPIO_Init+0x324>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3301      	adds	r3, #1
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b0f      	cmp	r3, #15
 8003934:	f67f ae96 	bls.w	8003664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	40013800 	.word	0x40013800
 8003950:	40020000 	.word	0x40020000
 8003954:	40020400 	.word	0x40020400
 8003958:	40020800 	.word	0x40020800
 800395c:	40020c00 	.word	0x40020c00
 8003960:	40021000 	.word	0x40021000
 8003964:	40021400 	.word	0x40021400
 8003968:	40021800 	.word	0x40021800
 800396c:	40013c00 	.word	0x40013c00

08003970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
 800397c:	4613      	mov	r3, r2
 800397e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003980:	787b      	ldrb	r3, [r7, #1]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800398c:	e003      	b.n	8003996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	041a      	lsls	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	619a      	str	r2, [r3, #24]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_PWREx_EnableOverDrive+0x90>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <HAL_PWREx_EnableOverDrive+0x90>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <HAL_PWREx_EnableOverDrive+0x90>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x94>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d0:	f7fe fd66 	bl	80024a0 <HAL_GetTick>
 80039d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039d6:	e009      	b.n	80039ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039d8:	f7fe fd62 	bl	80024a0 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e6:	d901      	bls.n	80039ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e01f      	b.n	8003a2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <HAL_PWREx_EnableOverDrive+0x98>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d1ee      	bne.n	80039d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a00:	f7fe fd4e 	bl	80024a0 <HAL_GetTick>
 8003a04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a06:	e009      	b.n	8003a1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a08:	f7fe fd4a 	bl	80024a0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a16:	d901      	bls.n	8003a1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e007      	b.n	8003a2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <HAL_PWREx_EnableOverDrive+0x98>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a28:	d1ee      	bne.n	8003a08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	420e0040 	.word	0x420e0040
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	420e0044 	.word	0x420e0044

08003a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0cc      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b68      	ldr	r3, [pc, #416]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d90c      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b65      	ldr	r3, [pc, #404]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b63      	ldr	r3, [pc, #396]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0b8      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a98:	4b59      	ldr	r3, [pc, #356]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a58      	ldr	r2, [pc, #352]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab0:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	494d      	ldr	r1, [pc, #308]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d044      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d119      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e07f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d003      	beq.n	8003b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b02:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	4b3b      	ldr	r3, [pc, #236]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e067      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b22:	4b37      	ldr	r3, [pc, #220]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 0203 	bic.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4934      	ldr	r1, [pc, #208]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b34:	f7fe fcb4 	bl	80024a0 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3c:	f7fe fcb0 	bl	80024a0 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e04f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 020c 	and.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d1eb      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b64:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d20c      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e032      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4916      	ldr	r1, [pc, #88]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	490e      	ldr	r1, [pc, #56]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bca:	f000 f821 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	490a      	ldr	r1, [pc, #40]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	5ccb      	ldrb	r3, [r1, r3]
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_ClockConfig+0x1c8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fc14 	bl	8002418 <HAL_InitTick>

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023c00 	.word	0x40023c00
 8003c00:	40023800 	.word	0x40023800
 8003c04:	08006df8 	.word	0x08006df8
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	20000004 	.word	0x20000004

08003c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b0ae      	sub	sp, #184	; 0xb8
 8003c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c36:	4bcb      	ldr	r3, [pc, #812]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	f200 8206 	bhi.w	8004050 <HAL_RCC_GetSysClockFreq+0x440>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c81 	.word	0x08003c81
 8003c50:	08004051 	.word	0x08004051
 8003c54:	08004051 	.word	0x08004051
 8003c58:	08004051 	.word	0x08004051
 8003c5c:	08003c89 	.word	0x08003c89
 8003c60:	08004051 	.word	0x08004051
 8003c64:	08004051 	.word	0x08004051
 8003c68:	08004051 	.word	0x08004051
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08004051 	.word	0x08004051
 8003c74:	08004051 	.word	0x08004051
 8003c78:	08004051 	.word	0x08004051
 8003c7c:	08003e81 	.word	0x08003e81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4bb9      	ldr	r3, [pc, #740]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c86:	e1e7      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c88:	4bb8      	ldr	r3, [pc, #736]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c8e:	e1e3      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c90:	4bb4      	ldr	r3, [pc, #720]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c9c:	4bb1      	ldr	r3, [pc, #708]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d071      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca8:	4bae      	ldr	r3, [pc, #696]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cb4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cce:	4622      	mov	r2, r4
 8003cd0:	462b      	mov	r3, r5
 8003cd2:	f04f 0000 	mov.w	r0, #0
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	0159      	lsls	r1, r3, #5
 8003cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce0:	0150      	lsls	r0, r2, #5
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	1a51      	subs	r1, r2, r1
 8003cea:	6439      	str	r1, [r7, #64]	; 0x40
 8003cec:	4629      	mov	r1, r5
 8003cee:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d00:	4649      	mov	r1, r9
 8003d02:	018b      	lsls	r3, r1, #6
 8003d04:	4641      	mov	r1, r8
 8003d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	018a      	lsls	r2, r1, #6
 8003d0e:	4641      	mov	r1, r8
 8003d10:	1a51      	subs	r1, r2, r1
 8003d12:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d14:	4649      	mov	r1, r9
 8003d16:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d28:	4649      	mov	r1, r9
 8003d2a:	00cb      	lsls	r3, r1, #3
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d32:	4641      	mov	r1, r8
 8003d34:	00ca      	lsls	r2, r1, #3
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	189b      	adds	r3, r3, r2
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
 8003d42:	462b      	mov	r3, r5
 8003d44:	460a      	mov	r2, r1
 8003d46:	eb42 0303 	adc.w	r3, r2, r3
 8003d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d58:	4629      	mov	r1, r5
 8003d5a:	024b      	lsls	r3, r1, #9
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d62:	4621      	mov	r1, r4
 8003d64:	024a      	lsls	r2, r1, #9
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d7c:	f7fc ff32 	bl	8000be4 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4613      	mov	r3, r2
 8003d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d8a:	e067      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8c:	4b75      	ldr	r3, [pc, #468]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d98:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003da6:	2300      	movs	r3, #0
 8003da8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003daa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003dae:	4622      	mov	r2, r4
 8003db0:	462b      	mov	r3, r5
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	0159      	lsls	r1, r3, #5
 8003dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc0:	0150      	lsls	r0, r2, #5
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	1a51      	subs	r1, r2, r1
 8003dca:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dcc:	4629      	mov	r1, r5
 8003dce:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003de0:	4649      	mov	r1, r9
 8003de2:	018b      	lsls	r3, r1, #6
 8003de4:	4641      	mov	r1, r8
 8003de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dea:	4641      	mov	r1, r8
 8003dec:	018a      	lsls	r2, r1, #6
 8003dee:	4641      	mov	r1, r8
 8003df0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003df4:	4649      	mov	r1, r9
 8003df6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e0e:	4692      	mov	sl, r2
 8003e10:	469b      	mov	fp, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	eb1a 0303 	adds.w	r3, sl, r3
 8003e18:	623b      	str	r3, [r7, #32]
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e2e:	4629      	mov	r1, r5
 8003e30:	028b      	lsls	r3, r1, #10
 8003e32:	4621      	mov	r1, r4
 8003e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e38:	4621      	mov	r1, r4
 8003e3a:	028a      	lsls	r2, r1, #10
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e44:	2200      	movs	r2, #0
 8003e46:	673b      	str	r3, [r7, #112]	; 0x70
 8003e48:	677a      	str	r2, [r7, #116]	; 0x74
 8003e4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e4e:	f7fc fec9 	bl	8000be4 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4613      	mov	r3, r2
 8003e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e5c:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	3301      	adds	r3, #1
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e7e:	e0eb      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e80:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8c:	4b35      	ldr	r3, [pc, #212]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d06b      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e98:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8003eac:	2300      	movs	r3, #0
 8003eae:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	f04f 0000 	mov.w	r0, #0
 8003ebc:	f04f 0100 	mov.w	r1, #0
 8003ec0:	0159      	lsls	r1, r3, #5
 8003ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec6:	0150      	lsls	r0, r2, #5
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4621      	mov	r1, r4
 8003ece:	1a51      	subs	r1, r2, r1
 8003ed0:	61b9      	str	r1, [r7, #24]
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ee6:	4659      	mov	r1, fp
 8003ee8:	018b      	lsls	r3, r1, #6
 8003eea:	4651      	mov	r1, sl
 8003eec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef0:	4651      	mov	r1, sl
 8003ef2:	018a      	lsls	r2, r1, #6
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	ebb2 0801 	subs.w	r8, r2, r1
 8003efa:	4659      	mov	r1, fp
 8003efc:	eb63 0901 	sbc.w	r9, r3, r1
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f14:	4690      	mov	r8, r2
 8003f16:	4699      	mov	r9, r3
 8003f18:	4623      	mov	r3, r4
 8003f1a:	eb18 0303 	adds.w	r3, r8, r3
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	462b      	mov	r3, r5
 8003f22:	eb49 0303 	adc.w	r3, r9, r3
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f34:	4629      	mov	r1, r5
 8003f36:	024b      	lsls	r3, r1, #9
 8003f38:	4621      	mov	r1, r4
 8003f3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f3e:	4621      	mov	r1, r4
 8003f40:	024a      	lsls	r2, r1, #9
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f54:	f7fc fe46 	bl	8000be4 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f62:	e065      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x420>
 8003f64:	40023800 	.word	0x40023800
 8003f68:	00f42400 	.word	0x00f42400
 8003f6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f70:	4b3d      	ldr	r3, [pc, #244]	; (8004068 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	2200      	movs	r2, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f80:	653b      	str	r3, [r7, #80]	; 0x50
 8003f82:	2300      	movs	r3, #0
 8003f84:	657b      	str	r3, [r7, #84]	; 0x54
 8003f86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f8a:	4642      	mov	r2, r8
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	f04f 0000 	mov.w	r0, #0
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	0159      	lsls	r1, r3, #5
 8003f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f9c:	0150      	lsls	r0, r2, #5
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	1a51      	subs	r1, r2, r1
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	4649      	mov	r1, r9
 8003faa:	eb63 0301 	sbc.w	r3, r3, r1
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	018b      	lsls	r3, r1, #6
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	018a      	lsls	r2, r1, #6
 8003fca:	4651      	mov	r1, sl
 8003fcc:	1a54      	subs	r4, r2, r1
 8003fce:	4659      	mov	r1, fp
 8003fd0:	eb63 0501 	sbc.w	r5, r3, r1
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	00eb      	lsls	r3, r5, #3
 8003fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe2:	00e2      	lsls	r2, r4, #3
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	4643      	mov	r3, r8
 8003fea:	18e3      	adds	r3, r4, r3
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	464b      	mov	r3, r9
 8003ff0:	eb45 0303 	adc.w	r3, r5, r3
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004002:	4629      	mov	r1, r5
 8004004:	028b      	lsls	r3, r1, #10
 8004006:	4621      	mov	r1, r4
 8004008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800400c:	4621      	mov	r1, r4
 800400e:	028a      	lsls	r2, r1, #10
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004018:	2200      	movs	r2, #0
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48
 800401c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800401e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004022:	f7fc fddf 	bl	8000be4 <__aeabi_uldivmod>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4613      	mov	r3, r2
 800402c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004030:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_RCC_GetSysClockFreq+0x458>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	0f1b      	lsrs	r3, r3, #28
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800403e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800404e:	e003      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004056:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800405c:	4618      	mov	r0, r3
 800405e:	37b8      	adds	r7, #184	; 0xb8
 8004060:	46bd      	mov	sp, r7
 8004062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800
 800406c:	00f42400 	.word	0x00f42400

08004070 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e28d      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8083 	beq.w	8004196 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004090:	4b94      	ldr	r3, [pc, #592]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b04      	cmp	r3, #4
 800409a:	d019      	beq.n	80040d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800409c:	4b91      	ldr	r3, [pc, #580]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040a8:	4b8e      	ldr	r3, [pc, #568]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b4:	d00c      	beq.n	80040d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b8b      	ldr	r3, [pc, #556]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d112      	bne.n	80040e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c2:	4b88      	ldr	r3, [pc, #544]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ce:	d10b      	bne.n	80040e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	4b84      	ldr	r3, [pc, #528]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d05b      	beq.n	8004194 <HAL_RCC_OscConfig+0x124>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d157      	bne.n	8004194 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e25a      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d106      	bne.n	8004100 <HAL_RCC_OscConfig+0x90>
 80040f2:	4b7c      	ldr	r3, [pc, #496]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a7b      	ldr	r2, [pc, #492]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e01d      	b.n	800413c <HAL_RCC_OscConfig+0xcc>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0xb4>
 800410a:	4b76      	ldr	r3, [pc, #472]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a75      	ldr	r2, [pc, #468]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b73      	ldr	r3, [pc, #460]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a72      	ldr	r2, [pc, #456]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0xcc>
 8004124:	4b6f      	ldr	r3, [pc, #444]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a6e      	ldr	r2, [pc, #440]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 800412a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b6c      	ldr	r3, [pc, #432]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a6b      	ldr	r2, [pc, #428]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d013      	beq.n	800416c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fe f9ac 	bl	80024a0 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800414c:	f7fe f9a8 	bl	80024a0 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e21f      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b61      	ldr	r3, [pc, #388]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0xdc>
 800416a:	e014      	b.n	8004196 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe f998 	bl	80024a0 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004174:	f7fe f994 	bl	80024a0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	; 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e20b      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	4b57      	ldr	r3, [pc, #348]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x104>
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d06f      	beq.n	8004282 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041a2:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d017      	beq.n	80041de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ae:	4b4d      	ldr	r3, [pc, #308]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d105      	bne.n	80041c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ba:	4b4a      	ldr	r3, [pc, #296]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d11c      	bne.n	800420c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b44      	ldr	r3, [pc, #272]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d116      	bne.n	800420c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041de:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_RCC_OscConfig+0x186>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d001      	beq.n	80041f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e1d3      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4937      	ldr	r1, [pc, #220]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	e03a      	b.n	8004282 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004214:	4b34      	ldr	r3, [pc, #208]	; (80042e8 <HAL_RCC_OscConfig+0x278>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fe f941 	bl	80024a0 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004222:	f7fe f93d 	bl	80024a0 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1b4      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004240:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4925      	ldr	r1, [pc, #148]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
 8004254:	e015      	b.n	8004282 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCC_OscConfig+0x278>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fe f920 	bl	80024a0 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004264:	f7fe f91c 	bl	80024a0 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e193      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d036      	beq.n	80042fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <HAL_RCC_OscConfig+0x27c>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fe f900 	bl	80024a0 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a4:	f7fe f8fc 	bl	80024a0 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e173      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80042b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x234>
 80042c2:	e01b      	b.n	80042fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCC_OscConfig+0x27c>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fe f8e9 	bl	80024a0 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	e00e      	b.n	80042f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fe f8e5 	bl	80024a0 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d907      	bls.n	80042f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e15c      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
 80042e4:	40023800 	.word	0x40023800
 80042e8:	42470000 	.word	0x42470000
 80042ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	4b8a      	ldr	r3, [pc, #552]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80042f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ea      	bne.n	80042d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8097 	beq.w	8004438 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b83      	ldr	r3, [pc, #524]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	4b7f      	ldr	r3, [pc, #508]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a7e      	ldr	r2, [pc, #504]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b7c      	ldr	r3, [pc, #496]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	4b79      	ldr	r3, [pc, #484]	; (8004520 <HAL_RCC_OscConfig+0x4b0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d118      	bne.n	8004378 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004346:	4b76      	ldr	r3, [pc, #472]	; (8004520 <HAL_RCC_OscConfig+0x4b0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a75      	ldr	r2, [pc, #468]	; (8004520 <HAL_RCC_OscConfig+0x4b0>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004352:	f7fe f8a5 	bl	80024a0 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435a:	f7fe f8a1 	bl	80024a0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e118      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	4b6c      	ldr	r3, [pc, #432]	; (8004520 <HAL_RCC_OscConfig+0x4b0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x31e>
 8004380:	4b66      	ldr	r3, [pc, #408]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a65      	ldr	r2, [pc, #404]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e01c      	b.n	80043c8 <HAL_RCC_OscConfig+0x358>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b05      	cmp	r3, #5
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x340>
 8004396:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a60      	ldr	r2, [pc, #384]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	4b5e      	ldr	r3, [pc, #376]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a5d      	ldr	r2, [pc, #372]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0x358>
 80043b0:	4b5a      	ldr	r3, [pc, #360]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	4a59      	ldr	r2, [pc, #356]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	6713      	str	r3, [r2, #112]	; 0x70
 80043bc:	4b57      	ldr	r3, [pc, #348]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	4a56      	ldr	r2, [pc, #344]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043c2:	f023 0304 	bic.w	r3, r3, #4
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d015      	beq.n	80043fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fe f866 	bl	80024a0 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fe f862 	bl	80024a0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0d7      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ee:	4b4b      	ldr	r3, [pc, #300]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ee      	beq.n	80043d8 <HAL_RCC_OscConfig+0x368>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fe f850 	bl	80024a0 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fe f84c 	bl	80024a0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0c1      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441a:	4b40      	ldr	r3, [pc, #256]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ee      	bne.n	8004404 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	4a3a      	ldr	r2, [pc, #232]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80ad 	beq.w	800459c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b08      	cmp	r3, #8
 800444c:	d060      	beq.n	8004510 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d145      	bne.n	80044e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004456:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_RCC_OscConfig+0x4b4>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fe f820 	bl	80024a0 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004464:	f7fe f81c 	bl	80024a0 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e093      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	3b01      	subs	r3, #1
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	071b      	lsls	r3, r3, #28
 80044ae:	491b      	ldr	r1, [pc, #108]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCC_OscConfig+0x4b4>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fd fff1 	bl	80024a0 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fd ffed 	bl	80024a0 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e064      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x452>
 80044e0:	e05c      	b.n	800459c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_RCC_OscConfig+0x4b4>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fd ffda 	bl	80024a0 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd ffd6 	bl	80024a0 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e04d      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x480>
 800450e:	e045      	b.n	800459c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e040      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
 800451c:	40023800 	.word	0x40023800
 8004520:	40007000 	.word	0x40007000
 8004524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004528:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <HAL_RCC_OscConfig+0x538>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d030      	beq.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d129      	bne.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d122      	bne.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004558:	4013      	ands	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800455e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004560:	4293      	cmp	r3, r2
 8004562:	d119      	bne.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	3b01      	subs	r3, #1
 8004572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d10f      	bne.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d107      	bne.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800

080045ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e07b      	b.n	80046b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d108      	bne.n	80045d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ce:	d009      	beq.n	80045e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	61da      	str	r2, [r3, #28]
 80045d6:	e005      	b.n	80045e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fd fdb0 	bl	8002164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	ea42 0103 	orr.w	r1, r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	0c1b      	lsrs	r3, r3, #16
 8004682:	f003 0104 	and.w	r1, r3, #4
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f003 0210 	and.w	r2, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b088      	sub	sp, #32
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_SPI_Transmit+0x22>
 80046dc:	2302      	movs	r3, #2
 80046de:	e126      	b.n	800492e <HAL_SPI_Transmit+0x270>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046e8:	f7fd feda 	bl	80024a0 <HAL_GetTick>
 80046ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d002      	beq.n	8004704 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
 8004700:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004702:	e10b      	b.n	800491c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_SPI_Transmit+0x52>
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d102      	bne.n	8004716 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004714:	e102      	b.n	800491c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2203      	movs	r2, #3
 800471a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	88fa      	ldrh	r2, [r7, #6]
 800472e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475c:	d10f      	bne.n	800477e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800477c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d007      	beq.n	800479c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800479a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a4:	d14b      	bne.n	800483e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Transmit+0xf6>
 80047ae:	8afb      	ldrh	r3, [r7, #22]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d13e      	bne.n	8004832 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	1c9a      	adds	r2, r3, #2
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047d8:	e02b      	b.n	8004832 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d112      	bne.n	800480e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	881a      	ldrh	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	1c9a      	adds	r2, r3, #2
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	86da      	strh	r2, [r3, #54]	; 0x36
 800480c:	e011      	b.n	8004832 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800480e:	f7fd fe47 	bl	80024a0 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d803      	bhi.n	8004826 <HAL_SPI_Transmit+0x168>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d102      	bne.n	800482c <HAL_SPI_Transmit+0x16e>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004830:	e074      	b.n	800491c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ce      	bne.n	80047da <HAL_SPI_Transmit+0x11c>
 800483c:	e04c      	b.n	80048d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_SPI_Transmit+0x18e>
 8004846:	8afb      	ldrh	r3, [r7, #22]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d140      	bne.n	80048ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	7812      	ldrb	r2, [r2, #0]
 8004858:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004872:	e02c      	b.n	80048ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d113      	bne.n	80048aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	7812      	ldrb	r2, [r2, #0]
 800488e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80048a8:	e011      	b.n	80048ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048aa:	f7fd fdf9 	bl	80024a0 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d803      	bhi.n	80048c2 <HAL_SPI_Transmit+0x204>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d102      	bne.n	80048c8 <HAL_SPI_Transmit+0x20a>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048cc:	e026      	b.n	800491c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1cd      	bne.n	8004874 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f8b3 	bl	8004a48 <SPI_EndRxTxTransaction>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e000      	b.n	800491c <HAL_SPI_Transmit+0x25e>
  }

error:
 800491a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800492c:	7ffb      	ldrb	r3, [r7, #31]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004948:	f7fd fdaa 	bl	80024a0 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	4413      	add	r3, r2
 8004956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004958:	f7fd fda2 	bl	80024a0 <HAL_GetTick>
 800495c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800495e:	4b39      	ldr	r3, [pc, #228]	; (8004a44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	015b      	lsls	r3, r3, #5
 8004964:	0d1b      	lsrs	r3, r3, #20
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800496e:	e054      	b.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d050      	beq.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004978:	f7fd fd92 	bl	80024a0 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	429a      	cmp	r2, r3
 8004986:	d902      	bls.n	800498e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d13d      	bne.n	8004a0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800499c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049a6:	d111      	bne.n	80049cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b0:	d004      	beq.n	80049bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ba:	d107      	bne.n	80049cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d4:	d10f      	bne.n	80049f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e017      	b.n	8004a3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d19b      	bne.n	8004970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000000 	.word	0x20000000

08004a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <SPI_EndRxTxTransaction+0x7c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <SPI_EndRxTxTransaction+0x80>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	0d5b      	lsrs	r3, r3, #21
 8004a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a72:	d112      	bne.n	8004a9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2180      	movs	r1, #128	; 0x80
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f7ff ff5a 	bl	8004938 <SPI_WaitFlagStateUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d016      	beq.n	8004ab8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f043 0220 	orr.w	r2, r3, #32
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e00f      	b.n	8004aba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab0:	2b80      	cmp	r3, #128	; 0x80
 8004ab2:	d0f2      	beq.n	8004a9a <SPI_EndRxTxTransaction+0x52>
 8004ab4:	e000      	b.n	8004ab8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ab6:	bf00      	nop
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	165e9f81 	.word	0x165e9f81

08004acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e041      	b.n	8004b62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fd fb7e 	bl	80021f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f000 fc7a 	bl	8005404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d001      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e04e      	b.n	8004c22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a23      	ldr	r2, [pc, #140]	; (8004c30 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d022      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bae:	d01d      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d018      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d013      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d111      	bne.n	8004c10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d010      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0e:	e007      	b.n	8004c20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40000400 	.word	0x40000400
 8004c38:	40000800 	.word	0x40000800
 8004c3c:	40000c00 	.word	0x40000c00
 8004c40:	40010400 	.word	0x40010400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40001800 	.word	0x40001800

08004c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e041      	b.n	8004ce2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f839 	bl	8004cea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f000 fbba 	bl	8005404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_TIM_PWM_Start+0x24>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e022      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d109      	bne.n	8004d3e <HAL_TIM_PWM_Start+0x3e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e015      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d109      	bne.n	8004d58 <HAL_TIM_PWM_Start+0x58>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e008      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e07c      	b.n	8004e6c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Start+0x82>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	e013      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Start+0x92>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	e00b      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0xa2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da0:	e003      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fe10 	bl	80059d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2d      	ldr	r2, [pc, #180]	; (8004e74 <HAL_TIM_PWM_Start+0x174>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <HAL_TIM_PWM_Start+0xcc>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <HAL_TIM_PWM_Start+0x178>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIM_PWM_Start+0xd0>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xd2>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a22      	ldr	r2, [pc, #136]	; (8004e74 <HAL_TIM_PWM_Start+0x174>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d01d      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <HAL_TIM_PWM_Start+0x17c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <HAL_TIM_PWM_Start+0x180>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <HAL_TIM_PWM_Start+0x184>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_TIM_PWM_Start+0x178>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <HAL_TIM_PWM_Start+0x188>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a16      	ldr	r2, [pc, #88]	; (8004e8c <HAL_TIM_PWM_Start+0x18c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d111      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b06      	cmp	r3, #6
 8004e46:	d010      	beq.n	8004e6a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	e007      	b.n	8004e6a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40010400 	.word	0x40010400
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40001800 	.word	0x40001800

08004e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0202 	mvn.w	r2, #2
 8004ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa77 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fa69 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fa7a 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0204 	mvn.w	r2, #4
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fa4d 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fa3f 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fa50 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d122      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d11b      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0208 	mvn.w	r2, #8
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2204      	movs	r2, #4
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa23 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fa15 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fa26 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d122      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d11b      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0210 	mvn.w	r2, #16
 8004fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f9f9 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8004fd4:	e005      	b.n	8004fe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f9eb 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f9fc 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d10e      	bne.n	8005014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d107      	bne.n	8005014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0201 	mvn.w	r2, #1
 800500c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fb ff6a 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501e:	2b80      	cmp	r3, #128	; 0x80
 8005020:	d10e      	bne.n	8005040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502c:	2b80      	cmp	r3, #128	; 0x80
 800502e:	d107      	bne.n	8005040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fdca 	bl	8005bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d10e      	bne.n	800506c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	d107      	bne.n	800506c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f9c1 	bl	80053ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b20      	cmp	r3, #32
 8005078:	d10e      	bne.n	8005098 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b20      	cmp	r3, #32
 8005086:	d107      	bne.n	8005098 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0220 	mvn.w	r2, #32
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fd94 	bl	8005bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e0ae      	b.n	800521c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b0c      	cmp	r3, #12
 80050ca:	f200 809f 	bhi.w	800520c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050ce:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	08005109 	.word	0x08005109
 80050d8:	0800520d 	.word	0x0800520d
 80050dc:	0800520d 	.word	0x0800520d
 80050e0:	0800520d 	.word	0x0800520d
 80050e4:	08005149 	.word	0x08005149
 80050e8:	0800520d 	.word	0x0800520d
 80050ec:	0800520d 	.word	0x0800520d
 80050f0:	0800520d 	.word	0x0800520d
 80050f4:	0800518b 	.word	0x0800518b
 80050f8:	0800520d 	.word	0x0800520d
 80050fc:	0800520d 	.word	0x0800520d
 8005100:	0800520d 	.word	0x0800520d
 8005104:	080051cb 	.word	0x080051cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fa18 	bl	8005544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0208 	orr.w	r2, r2, #8
 8005122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0204 	bic.w	r2, r2, #4
 8005132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6999      	ldr	r1, [r3, #24]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	619a      	str	r2, [r3, #24]
      break;
 8005146:	e064      	b.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fa68 	bl	8005624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	619a      	str	r2, [r3, #24]
      break;
 8005188:	e043      	b.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fabd 	bl	8005710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0208 	orr.w	r2, r2, #8
 80051a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0204 	bic.w	r2, r2, #4
 80051b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69d9      	ldr	r1, [r3, #28]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	61da      	str	r2, [r3, #28]
      break;
 80051c8:	e023      	b.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fb11 	bl	80057f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69d9      	ldr	r1, [r3, #28]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	021a      	lsls	r2, r3, #8
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	61da      	str	r2, [r3, #28]
      break;
 800520a:	e002      	b.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	75fb      	strb	r3, [r7, #23]
      break;
 8005210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800521a:	7dfb      	ldrb	r3, [r7, #23]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_TIM_ConfigClockSource+0x1c>
 800523c:	2302      	movs	r3, #2
 800523e:	e0b4      	b.n	80053aa <HAL_TIM_ConfigClockSource+0x186>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800525e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005278:	d03e      	beq.n	80052f8 <HAL_TIM_ConfigClockSource+0xd4>
 800527a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527e:	f200 8087 	bhi.w	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005286:	f000 8086 	beq.w	8005396 <HAL_TIM_ConfigClockSource+0x172>
 800528a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528e:	d87f      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b70      	cmp	r3, #112	; 0x70
 8005292:	d01a      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0xa6>
 8005294:	2b70      	cmp	r3, #112	; 0x70
 8005296:	d87b      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b60      	cmp	r3, #96	; 0x60
 800529a:	d050      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x11a>
 800529c:	2b60      	cmp	r3, #96	; 0x60
 800529e:	d877      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b50      	cmp	r3, #80	; 0x50
 80052a2:	d03c      	beq.n	800531e <HAL_TIM_ConfigClockSource+0xfa>
 80052a4:	2b50      	cmp	r3, #80	; 0x50
 80052a6:	d873      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d058      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x13a>
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d86f      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b30      	cmp	r3, #48	; 0x30
 80052b2:	d064      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x15a>
 80052b4:	2b30      	cmp	r3, #48	; 0x30
 80052b6:	d86b      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d060      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x15a>
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d867      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d05c      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x15a>
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d05a      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x15a>
 80052c8:	e062      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6899      	ldr	r1, [r3, #8]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f000 fb5d 	bl	8005998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	609a      	str	r2, [r3, #8]
      break;
 80052f6:	e04f      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6899      	ldr	r1, [r3, #8]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f000 fb46 	bl	8005998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800531a:	609a      	str	r2, [r3, #8]
      break;
 800531c:	e03c      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	461a      	mov	r2, r3
 800532c:	f000 faba 	bl	80058a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2150      	movs	r1, #80	; 0x50
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fb13 	bl	8005962 <TIM_ITRx_SetConfig>
      break;
 800533c:	e02c      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6859      	ldr	r1, [r3, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	461a      	mov	r2, r3
 800534c:	f000 fad9 	bl	8005902 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2160      	movs	r1, #96	; 0x60
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fb03 	bl	8005962 <TIM_ITRx_SetConfig>
      break;
 800535c:	e01c      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	461a      	mov	r2, r3
 800536c:	f000 fa9a 	bl	80058a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2140      	movs	r1, #64	; 0x40
 8005376:	4618      	mov	r0, r3
 8005378:	f000 faf3 	bl	8005962 <TIM_ITRx_SetConfig>
      break;
 800537c:	e00c      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4619      	mov	r1, r3
 8005388:	4610      	mov	r0, r2
 800538a:	f000 faea 	bl	8005962 <TIM_ITRx_SetConfig>
      break;
 800538e:	e003      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
      break;
 8005394:	e000      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a40      	ldr	r2, [pc, #256]	; (8005518 <TIM_Base_SetConfig+0x114>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005422:	d00f      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a3d      	ldr	r2, [pc, #244]	; (800551c <TIM_Base_SetConfig+0x118>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00b      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a3c      	ldr	r2, [pc, #240]	; (8005520 <TIM_Base_SetConfig+0x11c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d007      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a3b      	ldr	r2, [pc, #236]	; (8005524 <TIM_Base_SetConfig+0x120>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3a      	ldr	r2, [pc, #232]	; (8005528 <TIM_Base_SetConfig+0x124>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d108      	bne.n	8005456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a2f      	ldr	r2, [pc, #188]	; (8005518 <TIM_Base_SetConfig+0x114>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d02b      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005464:	d027      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2c      	ldr	r2, [pc, #176]	; (800551c <TIM_Base_SetConfig+0x118>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d023      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2b      	ldr	r2, [pc, #172]	; (8005520 <TIM_Base_SetConfig+0x11c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d01f      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2a      	ldr	r2, [pc, #168]	; (8005524 <TIM_Base_SetConfig+0x120>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01b      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a29      	ldr	r2, [pc, #164]	; (8005528 <TIM_Base_SetConfig+0x124>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d017      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a28      	ldr	r2, [pc, #160]	; (800552c <TIM_Base_SetConfig+0x128>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a27      	ldr	r2, [pc, #156]	; (8005530 <TIM_Base_SetConfig+0x12c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00f      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a26      	ldr	r2, [pc, #152]	; (8005534 <TIM_Base_SetConfig+0x130>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00b      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a25      	ldr	r2, [pc, #148]	; (8005538 <TIM_Base_SetConfig+0x134>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d007      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a24      	ldr	r2, [pc, #144]	; (800553c <TIM_Base_SetConfig+0x138>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d003      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a23      	ldr	r2, [pc, #140]	; (8005540 <TIM_Base_SetConfig+0x13c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d108      	bne.n	80054c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a0a      	ldr	r2, [pc, #40]	; (8005518 <TIM_Base_SetConfig+0x114>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_Base_SetConfig+0xf8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a0c      	ldr	r2, [pc, #48]	; (8005528 <TIM_Base_SetConfig+0x124>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d103      	bne.n	8005504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	615a      	str	r2, [r3, #20]
}
 800550a:	bf00      	nop
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40010000 	.word	0x40010000
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40010400 	.word	0x40010400
 800552c:	40014000 	.word	0x40014000
 8005530:	40014400 	.word	0x40014400
 8005534:	40014800 	.word	0x40014800
 8005538:	40001800 	.word	0x40001800
 800553c:	40001c00 	.word	0x40001c00
 8005540:	40002000 	.word	0x40002000

08005544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0201 	bic.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f023 0302 	bic.w	r3, r3, #2
 800558c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a20      	ldr	r2, [pc, #128]	; (800561c <TIM_OC1_SetConfig+0xd8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_OC1_SetConfig+0x64>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <TIM_OC1_SetConfig+0xdc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d10c      	bne.n	80055c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0308 	bic.w	r3, r3, #8
 80055ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 0304 	bic.w	r3, r3, #4
 80055c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <TIM_OC1_SetConfig+0xd8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC1_SetConfig+0x8e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <TIM_OC1_SetConfig+0xdc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40010000 	.word	0x40010000
 8005620:	40010400 	.word	0x40010400

08005624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f023 0210 	bic.w	r2, r3, #16
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0320 	bic.w	r3, r3, #32
 800566e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a22      	ldr	r2, [pc, #136]	; (8005708 <TIM_OC2_SetConfig+0xe4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d003      	beq.n	800568c <TIM_OC2_SetConfig+0x68>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a21      	ldr	r2, [pc, #132]	; (800570c <TIM_OC2_SetConfig+0xe8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d10d      	bne.n	80056a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <TIM_OC2_SetConfig+0xe4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_OC2_SetConfig+0x94>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a16      	ldr	r2, [pc, #88]	; (800570c <TIM_OC2_SetConfig+0xe8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d113      	bne.n	80056e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400

08005710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a21      	ldr	r2, [pc, #132]	; (80057f0 <TIM_OC3_SetConfig+0xe0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d003      	beq.n	8005776 <TIM_OC3_SetConfig+0x66>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a20      	ldr	r2, [pc, #128]	; (80057f4 <TIM_OC3_SetConfig+0xe4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d10d      	bne.n	8005792 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800577c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a16      	ldr	r2, [pc, #88]	; (80057f0 <TIM_OC3_SetConfig+0xe0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <TIM_OC3_SetConfig+0x92>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a15      	ldr	r2, [pc, #84]	; (80057f4 <TIM_OC3_SetConfig+0xe4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d113      	bne.n	80057ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40010400 	.word	0x40010400

080057f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	031b      	lsls	r3, r3, #12
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a12      	ldr	r2, [pc, #72]	; (800589c <TIM_OC4_SetConfig+0xa4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_OC4_SetConfig+0x68>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a11      	ldr	r2, [pc, #68]	; (80058a0 <TIM_OC4_SetConfig+0xa8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d109      	bne.n	8005874 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	019b      	lsls	r3, r3, #6
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40010000 	.word	0x40010000
 80058a0:	40010400 	.word	0x40010400

080058a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f023 0201 	bic.w	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 030a 	bic.w	r3, r3, #10
 80058e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005902:	b480      	push	{r7}
 8005904:	b087      	sub	sp, #28
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0210 	bic.w	r2, r3, #16
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800592c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	031b      	lsls	r3, r3, #12
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800593e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	f043 0307 	orr.w	r3, r3, #7
 8005984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	609a      	str	r2, [r3, #8]
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	021a      	lsls	r2, r3, #8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4313      	orrs	r3, r2
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	609a      	str	r2, [r3, #8]
}
 80059cc:	bf00      	nop
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2201      	movs	r2, #1
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1a      	ldr	r2, [r3, #32]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	401a      	ands	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a1a      	ldr	r2, [r3, #32]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e05a      	b.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d022      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a88:	d01d      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1d      	ldr	r2, [pc, #116]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d018      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a18      	ldr	r2, [pc, #96]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40010400 	.word	0x40010400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40001800 	.word	0x40001800

08005b1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e03d      	b.n	8005bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <ceil>:
 8005be8:	ec51 0b10 	vmov	r0, r1, d0
 8005bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005bf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005bf8:	2e13      	cmp	r6, #19
 8005bfa:	ee10 5a10 	vmov	r5, s0
 8005bfe:	ee10 8a10 	vmov	r8, s0
 8005c02:	460c      	mov	r4, r1
 8005c04:	dc30      	bgt.n	8005c68 <ceil+0x80>
 8005c06:	2e00      	cmp	r6, #0
 8005c08:	da12      	bge.n	8005c30 <ceil+0x48>
 8005c0a:	a335      	add	r3, pc, #212	; (adr r3, 8005ce0 <ceil+0xf8>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f7fa fb00 	bl	8000214 <__adddf3>
 8005c14:	2200      	movs	r2, #0
 8005c16:	2300      	movs	r3, #0
 8005c18:	f7fa ff42 	bl	8000aa0 <__aeabi_dcmpgt>
 8005c1c:	b128      	cbz	r0, 8005c2a <ceil+0x42>
 8005c1e:	2c00      	cmp	r4, #0
 8005c20:	db55      	blt.n	8005cce <ceil+0xe6>
 8005c22:	432c      	orrs	r4, r5
 8005c24:	d057      	beq.n	8005cd6 <ceil+0xee>
 8005c26:	4c30      	ldr	r4, [pc, #192]	; (8005ce8 <ceil+0x100>)
 8005c28:	2500      	movs	r5, #0
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	e025      	b.n	8005c7c <ceil+0x94>
 8005c30:	4f2e      	ldr	r7, [pc, #184]	; (8005cec <ceil+0x104>)
 8005c32:	4137      	asrs	r7, r6
 8005c34:	ea01 0307 	and.w	r3, r1, r7
 8005c38:	4303      	orrs	r3, r0
 8005c3a:	d01f      	beq.n	8005c7c <ceil+0x94>
 8005c3c:	a328      	add	r3, pc, #160	; (adr r3, 8005ce0 <ceil+0xf8>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f7fa fae7 	bl	8000214 <__adddf3>
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f7fa ff29 	bl	8000aa0 <__aeabi_dcmpgt>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d0eb      	beq.n	8005c2a <ceil+0x42>
 8005c52:	2c00      	cmp	r4, #0
 8005c54:	bfc2      	ittt	gt
 8005c56:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8005c5a:	fa43 f606 	asrgt.w	r6, r3, r6
 8005c5e:	19a4      	addgt	r4, r4, r6
 8005c60:	ea24 0407 	bic.w	r4, r4, r7
 8005c64:	2500      	movs	r5, #0
 8005c66:	e7e0      	b.n	8005c2a <ceil+0x42>
 8005c68:	2e33      	cmp	r6, #51	; 0x33
 8005c6a:	dd0b      	ble.n	8005c84 <ceil+0x9c>
 8005c6c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005c70:	d104      	bne.n	8005c7c <ceil+0x94>
 8005c72:	ee10 2a10 	vmov	r2, s0
 8005c76:	460b      	mov	r3, r1
 8005c78:	f7fa facc 	bl	8000214 <__adddf3>
 8005c7c:	ec41 0b10 	vmov	d0, r0, r1
 8005c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c84:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005c88:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8c:	fa23 f707 	lsr.w	r7, r3, r7
 8005c90:	4207      	tst	r7, r0
 8005c92:	d0f3      	beq.n	8005c7c <ceil+0x94>
 8005c94:	a312      	add	r3, pc, #72	; (adr r3, 8005ce0 <ceil+0xf8>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f7fa fabb 	bl	8000214 <__adddf3>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f7fa fefd 	bl	8000aa0 <__aeabi_dcmpgt>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d0bf      	beq.n	8005c2a <ceil+0x42>
 8005caa:	2c00      	cmp	r4, #0
 8005cac:	dd02      	ble.n	8005cb4 <ceil+0xcc>
 8005cae:	2e14      	cmp	r6, #20
 8005cb0:	d103      	bne.n	8005cba <ceil+0xd2>
 8005cb2:	3401      	adds	r4, #1
 8005cb4:	ea25 0507 	bic.w	r5, r5, r7
 8005cb8:	e7b7      	b.n	8005c2a <ceil+0x42>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005cc0:	fa03 f606 	lsl.w	r6, r3, r6
 8005cc4:	4435      	add	r5, r6
 8005cc6:	4545      	cmp	r5, r8
 8005cc8:	bf38      	it	cc
 8005cca:	18e4      	addcc	r4, r4, r3
 8005ccc:	e7f2      	b.n	8005cb4 <ceil+0xcc>
 8005cce:	2500      	movs	r5, #0
 8005cd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005cd4:	e7a9      	b.n	8005c2a <ceil+0x42>
 8005cd6:	4625      	mov	r5, r4
 8005cd8:	e7a7      	b.n	8005c2a <ceil+0x42>
 8005cda:	bf00      	nop
 8005cdc:	f3af 8000 	nop.w
 8005ce0:	8800759c 	.word	0x8800759c
 8005ce4:	7e37e43c 	.word	0x7e37e43c
 8005ce8:	3ff00000 	.word	0x3ff00000
 8005cec:	000fffff 	.word	0x000fffff

08005cf0 <sin>:
 8005cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cf2:	ec53 2b10 	vmov	r2, r3, d0
 8005cf6:	4828      	ldr	r0, [pc, #160]	; (8005d98 <sin+0xa8>)
 8005cf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005cfc:	4281      	cmp	r1, r0
 8005cfe:	dc07      	bgt.n	8005d10 <sin+0x20>
 8005d00:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005d90 <sin+0xa0>
 8005d04:	2000      	movs	r0, #0
 8005d06:	b005      	add	sp, #20
 8005d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d0c:	f000 be6c 	b.w	80069e8 <__kernel_sin>
 8005d10:	4822      	ldr	r0, [pc, #136]	; (8005d9c <sin+0xac>)
 8005d12:	4281      	cmp	r1, r0
 8005d14:	dd09      	ble.n	8005d2a <sin+0x3a>
 8005d16:	ee10 0a10 	vmov	r0, s0
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f7fa fa78 	bl	8000210 <__aeabi_dsub>
 8005d20:	ec41 0b10 	vmov	d0, r0, r1
 8005d24:	b005      	add	sp, #20
 8005d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d2a:	4668      	mov	r0, sp
 8005d2c:	f000 f838 	bl	8005da0 <__ieee754_rem_pio2>
 8005d30:	f000 0003 	and.w	r0, r0, #3
 8005d34:	2801      	cmp	r0, #1
 8005d36:	d00c      	beq.n	8005d52 <sin+0x62>
 8005d38:	2802      	cmp	r0, #2
 8005d3a:	d011      	beq.n	8005d60 <sin+0x70>
 8005d3c:	b9f0      	cbnz	r0, 8005d7c <sin+0x8c>
 8005d3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d42:	ed9d 0b00 	vldr	d0, [sp]
 8005d46:	2001      	movs	r0, #1
 8005d48:	f000 fe4e 	bl	80069e8 <__kernel_sin>
 8005d4c:	ec51 0b10 	vmov	r0, r1, d0
 8005d50:	e7e6      	b.n	8005d20 <sin+0x30>
 8005d52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d56:	ed9d 0b00 	vldr	d0, [sp]
 8005d5a:	f000 fa2d 	bl	80061b8 <__kernel_cos>
 8005d5e:	e7f5      	b.n	8005d4c <sin+0x5c>
 8005d60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d64:	ed9d 0b00 	vldr	d0, [sp]
 8005d68:	2001      	movs	r0, #1
 8005d6a:	f000 fe3d 	bl	80069e8 <__kernel_sin>
 8005d6e:	ec53 2b10 	vmov	r2, r3, d0
 8005d72:	ee10 0a10 	vmov	r0, s0
 8005d76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005d7a:	e7d1      	b.n	8005d20 <sin+0x30>
 8005d7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d80:	ed9d 0b00 	vldr	d0, [sp]
 8005d84:	f000 fa18 	bl	80061b8 <__kernel_cos>
 8005d88:	e7f1      	b.n	8005d6e <sin+0x7e>
 8005d8a:	bf00      	nop
 8005d8c:	f3af 8000 	nop.w
	...
 8005d98:	3fe921fb 	.word	0x3fe921fb
 8005d9c:	7fefffff 	.word	0x7fefffff

08005da0 <__ieee754_rem_pio2>:
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	ed2d 8b02 	vpush	{d8}
 8005da8:	ec55 4b10 	vmov	r4, r5, d0
 8005dac:	4bca      	ldr	r3, [pc, #808]	; (80060d8 <__ieee754_rem_pio2+0x338>)
 8005dae:	b08b      	sub	sp, #44	; 0x2c
 8005db0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005db4:	4598      	cmp	r8, r3
 8005db6:	4682      	mov	sl, r0
 8005db8:	9502      	str	r5, [sp, #8]
 8005dba:	dc08      	bgt.n	8005dce <__ieee754_rem_pio2+0x2e>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	ed80 0b00 	vstr	d0, [r0]
 8005dc4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005dc8:	f04f 0b00 	mov.w	fp, #0
 8005dcc:	e028      	b.n	8005e20 <__ieee754_rem_pio2+0x80>
 8005dce:	4bc3      	ldr	r3, [pc, #780]	; (80060dc <__ieee754_rem_pio2+0x33c>)
 8005dd0:	4598      	cmp	r8, r3
 8005dd2:	dc78      	bgt.n	8005ec6 <__ieee754_rem_pio2+0x126>
 8005dd4:	9b02      	ldr	r3, [sp, #8]
 8005dd6:	4ec2      	ldr	r6, [pc, #776]	; (80060e0 <__ieee754_rem_pio2+0x340>)
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	ee10 0a10 	vmov	r0, s0
 8005dde:	a3b0      	add	r3, pc, #704	; (adr r3, 80060a0 <__ieee754_rem_pio2+0x300>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	4629      	mov	r1, r5
 8005de6:	dd39      	ble.n	8005e5c <__ieee754_rem_pio2+0xbc>
 8005de8:	f7fa fa12 	bl	8000210 <__aeabi_dsub>
 8005dec:	45b0      	cmp	r8, r6
 8005dee:	4604      	mov	r4, r0
 8005df0:	460d      	mov	r5, r1
 8005df2:	d01b      	beq.n	8005e2c <__ieee754_rem_pio2+0x8c>
 8005df4:	a3ac      	add	r3, pc, #688	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x308>)
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f7fa fa09 	bl	8000210 <__aeabi_dsub>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	e9ca 2300 	strd	r2, r3, [sl]
 8005e06:	4620      	mov	r0, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	f7fa fa01 	bl	8000210 <__aeabi_dsub>
 8005e0e:	a3a6      	add	r3, pc, #664	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x308>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f7fa f9fc 	bl	8000210 <__aeabi_dsub>
 8005e18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e1c:	f04f 0b01 	mov.w	fp, #1
 8005e20:	4658      	mov	r0, fp
 8005e22:	b00b      	add	sp, #44	; 0x2c
 8005e24:	ecbd 8b02 	vpop	{d8}
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	a3a0      	add	r3, pc, #640	; (adr r3, 80060b0 <__ieee754_rem_pio2+0x310>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa f9ed 	bl	8000210 <__aeabi_dsub>
 8005e36:	a3a0      	add	r3, pc, #640	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x318>)
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	460d      	mov	r5, r1
 8005e40:	f7fa f9e6 	bl	8000210 <__aeabi_dsub>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	e9ca 2300 	strd	r2, r3, [sl]
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	4629      	mov	r1, r5
 8005e50:	f7fa f9de 	bl	8000210 <__aeabi_dsub>
 8005e54:	a398      	add	r3, pc, #608	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x318>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	e7db      	b.n	8005e14 <__ieee754_rem_pio2+0x74>
 8005e5c:	f7fa f9da 	bl	8000214 <__adddf3>
 8005e60:	45b0      	cmp	r8, r6
 8005e62:	4604      	mov	r4, r0
 8005e64:	460d      	mov	r5, r1
 8005e66:	d016      	beq.n	8005e96 <__ieee754_rem_pio2+0xf6>
 8005e68:	a38f      	add	r3, pc, #572	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x308>)
 8005e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6e:	f7fa f9d1 	bl	8000214 <__adddf3>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	e9ca 2300 	strd	r2, r3, [sl]
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f7fa f9c7 	bl	8000210 <__aeabi_dsub>
 8005e82:	a389      	add	r3, pc, #548	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x308>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f7fa f9c4 	bl	8000214 <__adddf3>
 8005e8c:	f04f 3bff 	mov.w	fp, #4294967295
 8005e90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e94:	e7c4      	b.n	8005e20 <__ieee754_rem_pio2+0x80>
 8005e96:	a386      	add	r3, pc, #536	; (adr r3, 80060b0 <__ieee754_rem_pio2+0x310>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f7fa f9ba 	bl	8000214 <__adddf3>
 8005ea0:	a385      	add	r3, pc, #532	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x318>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	460d      	mov	r5, r1
 8005eaa:	f7fa f9b3 	bl	8000214 <__adddf3>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	e9ca 2300 	strd	r2, r3, [sl]
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f7fa f9a9 	bl	8000210 <__aeabi_dsub>
 8005ebe:	a37e      	add	r3, pc, #504	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x318>)
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	e7e0      	b.n	8005e88 <__ieee754_rem_pio2+0xe8>
 8005ec6:	4b87      	ldr	r3, [pc, #540]	; (80060e4 <__ieee754_rem_pio2+0x344>)
 8005ec8:	4598      	cmp	r8, r3
 8005eca:	f300 80d9 	bgt.w	8006080 <__ieee754_rem_pio2+0x2e0>
 8005ece:	f000 fe49 	bl	8006b64 <fabs>
 8005ed2:	ec55 4b10 	vmov	r4, r5, d0
 8005ed6:	ee10 0a10 	vmov	r0, s0
 8005eda:	a379      	add	r3, pc, #484	; (adr r3, 80060c0 <__ieee754_rem_pio2+0x320>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7fa fb4d 	bl	8000580 <__aeabi_dmul>
 8005ee6:	4b80      	ldr	r3, [pc, #512]	; (80060e8 <__ieee754_rem_pio2+0x348>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f7fa f993 	bl	8000214 <__adddf3>
 8005eee:	f7fa fde1 	bl	8000ab4 <__aeabi_d2iz>
 8005ef2:	4683      	mov	fp, r0
 8005ef4:	f7fa fada 	bl	80004ac <__aeabi_i2d>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	ec43 2b18 	vmov	d8, r2, r3
 8005f00:	a367      	add	r3, pc, #412	; (adr r3, 80060a0 <__ieee754_rem_pio2+0x300>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f7fa fb3b 	bl	8000580 <__aeabi_dmul>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4620      	mov	r0, r4
 8005f10:	4629      	mov	r1, r5
 8005f12:	f7fa f97d 	bl	8000210 <__aeabi_dsub>
 8005f16:	a364      	add	r3, pc, #400	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x308>)
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	460f      	mov	r7, r1
 8005f20:	ec51 0b18 	vmov	r0, r1, d8
 8005f24:	f7fa fb2c 	bl	8000580 <__aeabi_dmul>
 8005f28:	f1bb 0f1f 	cmp.w	fp, #31
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	460d      	mov	r5, r1
 8005f30:	dc0d      	bgt.n	8005f4e <__ieee754_rem_pio2+0x1ae>
 8005f32:	4b6e      	ldr	r3, [pc, #440]	; (80060ec <__ieee754_rem_pio2+0x34c>)
 8005f34:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3c:	4543      	cmp	r3, r8
 8005f3e:	d006      	beq.n	8005f4e <__ieee754_rem_pio2+0x1ae>
 8005f40:	4622      	mov	r2, r4
 8005f42:	462b      	mov	r3, r5
 8005f44:	4630      	mov	r0, r6
 8005f46:	4639      	mov	r1, r7
 8005f48:	f7fa f962 	bl	8000210 <__aeabi_dsub>
 8005f4c:	e00f      	b.n	8005f6e <__ieee754_rem_pio2+0x1ce>
 8005f4e:	462b      	mov	r3, r5
 8005f50:	4622      	mov	r2, r4
 8005f52:	4630      	mov	r0, r6
 8005f54:	4639      	mov	r1, r7
 8005f56:	f7fa f95b 	bl	8000210 <__aeabi_dsub>
 8005f5a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005f5e:	9303      	str	r3, [sp, #12]
 8005f60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f64:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005f68:	f1b8 0f10 	cmp.w	r8, #16
 8005f6c:	dc02      	bgt.n	8005f74 <__ieee754_rem_pio2+0x1d4>
 8005f6e:	e9ca 0100 	strd	r0, r1, [sl]
 8005f72:	e039      	b.n	8005fe8 <__ieee754_rem_pio2+0x248>
 8005f74:	a34e      	add	r3, pc, #312	; (adr r3, 80060b0 <__ieee754_rem_pio2+0x310>)
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	ec51 0b18 	vmov	r0, r1, d8
 8005f7e:	f7fa faff 	bl	8000580 <__aeabi_dmul>
 8005f82:	4604      	mov	r4, r0
 8005f84:	460d      	mov	r5, r1
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	f7fa f93f 	bl	8000210 <__aeabi_dsub>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4680      	mov	r8, r0
 8005f98:	4689      	mov	r9, r1
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	f7fa f937 	bl	8000210 <__aeabi_dsub>
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	f7fa f933 	bl	8000210 <__aeabi_dsub>
 8005faa:	a343      	add	r3, pc, #268	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x318>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	460d      	mov	r5, r1
 8005fb4:	ec51 0b18 	vmov	r0, r1, d8
 8005fb8:	f7fa fae2 	bl	8000580 <__aeabi_dmul>
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	462b      	mov	r3, r5
 8005fc0:	f7fa f926 	bl	8000210 <__aeabi_dsub>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4604      	mov	r4, r0
 8005fca:	460d      	mov	r5, r1
 8005fcc:	4640      	mov	r0, r8
 8005fce:	4649      	mov	r1, r9
 8005fd0:	f7fa f91e 	bl	8000210 <__aeabi_dsub>
 8005fd4:	9a03      	ldr	r2, [sp, #12]
 8005fd6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b31      	cmp	r3, #49	; 0x31
 8005fde:	dc24      	bgt.n	800602a <__ieee754_rem_pio2+0x28a>
 8005fe0:	e9ca 0100 	strd	r0, r1, [sl]
 8005fe4:	4646      	mov	r6, r8
 8005fe6:	464f      	mov	r7, r9
 8005fe8:	e9da 8900 	ldrd	r8, r9, [sl]
 8005fec:	4630      	mov	r0, r6
 8005fee:	4642      	mov	r2, r8
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f7fa f90c 	bl	8000210 <__aeabi_dsub>
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	f7fa f908 	bl	8000210 <__aeabi_dsub>
 8006000:	9b02      	ldr	r3, [sp, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006008:	f6bf af0a 	bge.w	8005e20 <__ieee754_rem_pio2+0x80>
 800600c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006010:	f8ca 3004 	str.w	r3, [sl, #4]
 8006014:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006018:	f8ca 8000 	str.w	r8, [sl]
 800601c:	f8ca 0008 	str.w	r0, [sl, #8]
 8006020:	f8ca 300c 	str.w	r3, [sl, #12]
 8006024:	f1cb 0b00 	rsb	fp, fp, #0
 8006028:	e6fa      	b.n	8005e20 <__ieee754_rem_pio2+0x80>
 800602a:	a327      	add	r3, pc, #156	; (adr r3, 80060c8 <__ieee754_rem_pio2+0x328>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	ec51 0b18 	vmov	r0, r1, d8
 8006034:	f7fa faa4 	bl	8000580 <__aeabi_dmul>
 8006038:	4604      	mov	r4, r0
 800603a:	460d      	mov	r5, r1
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4640      	mov	r0, r8
 8006042:	4649      	mov	r1, r9
 8006044:	f7fa f8e4 	bl	8000210 <__aeabi_dsub>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4606      	mov	r6, r0
 800604e:	460f      	mov	r7, r1
 8006050:	4640      	mov	r0, r8
 8006052:	4649      	mov	r1, r9
 8006054:	f7fa f8dc 	bl	8000210 <__aeabi_dsub>
 8006058:	4622      	mov	r2, r4
 800605a:	462b      	mov	r3, r5
 800605c:	f7fa f8d8 	bl	8000210 <__aeabi_dsub>
 8006060:	a31b      	add	r3, pc, #108	; (adr r3, 80060d0 <__ieee754_rem_pio2+0x330>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	4604      	mov	r4, r0
 8006068:	460d      	mov	r5, r1
 800606a:	ec51 0b18 	vmov	r0, r1, d8
 800606e:	f7fa fa87 	bl	8000580 <__aeabi_dmul>
 8006072:	4622      	mov	r2, r4
 8006074:	462b      	mov	r3, r5
 8006076:	f7fa f8cb 	bl	8000210 <__aeabi_dsub>
 800607a:	4604      	mov	r4, r0
 800607c:	460d      	mov	r5, r1
 800607e:	e75f      	b.n	8005f40 <__ieee754_rem_pio2+0x1a0>
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <__ieee754_rem_pio2+0x350>)
 8006082:	4598      	cmp	r8, r3
 8006084:	dd36      	ble.n	80060f4 <__ieee754_rem_pio2+0x354>
 8006086:	ee10 2a10 	vmov	r2, s0
 800608a:	462b      	mov	r3, r5
 800608c:	4620      	mov	r0, r4
 800608e:	4629      	mov	r1, r5
 8006090:	f7fa f8be 	bl	8000210 <__aeabi_dsub>
 8006094:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006098:	e9ca 0100 	strd	r0, r1, [sl]
 800609c:	e694      	b.n	8005dc8 <__ieee754_rem_pio2+0x28>
 800609e:	bf00      	nop
 80060a0:	54400000 	.word	0x54400000
 80060a4:	3ff921fb 	.word	0x3ff921fb
 80060a8:	1a626331 	.word	0x1a626331
 80060ac:	3dd0b461 	.word	0x3dd0b461
 80060b0:	1a600000 	.word	0x1a600000
 80060b4:	3dd0b461 	.word	0x3dd0b461
 80060b8:	2e037073 	.word	0x2e037073
 80060bc:	3ba3198a 	.word	0x3ba3198a
 80060c0:	6dc9c883 	.word	0x6dc9c883
 80060c4:	3fe45f30 	.word	0x3fe45f30
 80060c8:	2e000000 	.word	0x2e000000
 80060cc:	3ba3198a 	.word	0x3ba3198a
 80060d0:	252049c1 	.word	0x252049c1
 80060d4:	397b839a 	.word	0x397b839a
 80060d8:	3fe921fb 	.word	0x3fe921fb
 80060dc:	4002d97b 	.word	0x4002d97b
 80060e0:	3ff921fb 	.word	0x3ff921fb
 80060e4:	413921fb 	.word	0x413921fb
 80060e8:	3fe00000 	.word	0x3fe00000
 80060ec:	08006e10 	.word	0x08006e10
 80060f0:	7fefffff 	.word	0x7fefffff
 80060f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80060f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80060fc:	ee10 0a10 	vmov	r0, s0
 8006100:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006104:	ee10 6a10 	vmov	r6, s0
 8006108:	460f      	mov	r7, r1
 800610a:	f7fa fcd3 	bl	8000ab4 <__aeabi_d2iz>
 800610e:	f7fa f9cd 	bl	80004ac <__aeabi_i2d>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4630      	mov	r0, r6
 8006118:	4639      	mov	r1, r7
 800611a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800611e:	f7fa f877 	bl	8000210 <__aeabi_dsub>
 8006122:	4b23      	ldr	r3, [pc, #140]	; (80061b0 <__ieee754_rem_pio2+0x410>)
 8006124:	2200      	movs	r2, #0
 8006126:	f7fa fa2b 	bl	8000580 <__aeabi_dmul>
 800612a:	460f      	mov	r7, r1
 800612c:	4606      	mov	r6, r0
 800612e:	f7fa fcc1 	bl	8000ab4 <__aeabi_d2iz>
 8006132:	f7fa f9bb 	bl	80004ac <__aeabi_i2d>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4630      	mov	r0, r6
 800613c:	4639      	mov	r1, r7
 800613e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006142:	f7fa f865 	bl	8000210 <__aeabi_dsub>
 8006146:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <__ieee754_rem_pio2+0x410>)
 8006148:	2200      	movs	r2, #0
 800614a:	f7fa fa19 	bl	8000580 <__aeabi_dmul>
 800614e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006152:	ad04      	add	r5, sp, #16
 8006154:	f04f 0803 	mov.w	r8, #3
 8006158:	46a9      	mov	r9, r5
 800615a:	2600      	movs	r6, #0
 800615c:	2700      	movs	r7, #0
 800615e:	4632      	mov	r2, r6
 8006160:	463b      	mov	r3, r7
 8006162:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006166:	46c3      	mov	fp, r8
 8006168:	3d08      	subs	r5, #8
 800616a:	f108 38ff 	add.w	r8, r8, #4294967295
 800616e:	f7fa fc6f 	bl	8000a50 <__aeabi_dcmpeq>
 8006172:	2800      	cmp	r0, #0
 8006174:	d1f3      	bne.n	800615e <__ieee754_rem_pio2+0x3be>
 8006176:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <__ieee754_rem_pio2+0x414>)
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	2302      	movs	r3, #2
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	4622      	mov	r2, r4
 8006180:	465b      	mov	r3, fp
 8006182:	4651      	mov	r1, sl
 8006184:	4648      	mov	r0, r9
 8006186:	f000 f8df 	bl	8006348 <__kernel_rem_pio2>
 800618a:	9b02      	ldr	r3, [sp, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	4683      	mov	fp, r0
 8006190:	f6bf ae46 	bge.w	8005e20 <__ieee754_rem_pio2+0x80>
 8006194:	e9da 2100 	ldrd	r2, r1, [sl]
 8006198:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800619c:	e9ca 2300 	strd	r2, r3, [sl]
 80061a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80061a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80061ac:	e73a      	b.n	8006024 <__ieee754_rem_pio2+0x284>
 80061ae:	bf00      	nop
 80061b0:	41700000 	.word	0x41700000
 80061b4:	08006e90 	.word	0x08006e90

080061b8 <__kernel_cos>:
 80061b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	ec57 6b10 	vmov	r6, r7, d0
 80061c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80061c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80061c8:	ed8d 1b00 	vstr	d1, [sp]
 80061cc:	da07      	bge.n	80061de <__kernel_cos+0x26>
 80061ce:	ee10 0a10 	vmov	r0, s0
 80061d2:	4639      	mov	r1, r7
 80061d4:	f7fa fc6e 	bl	8000ab4 <__aeabi_d2iz>
 80061d8:	2800      	cmp	r0, #0
 80061da:	f000 8088 	beq.w	80062ee <__kernel_cos+0x136>
 80061de:	4632      	mov	r2, r6
 80061e0:	463b      	mov	r3, r7
 80061e2:	4630      	mov	r0, r6
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7fa f9cb 	bl	8000580 <__aeabi_dmul>
 80061ea:	4b51      	ldr	r3, [pc, #324]	; (8006330 <__kernel_cos+0x178>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	4604      	mov	r4, r0
 80061f0:	460d      	mov	r5, r1
 80061f2:	f7fa f9c5 	bl	8000580 <__aeabi_dmul>
 80061f6:	a340      	add	r3, pc, #256	; (adr r3, 80062f8 <__kernel_cos+0x140>)
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	4682      	mov	sl, r0
 80061fe:	468b      	mov	fp, r1
 8006200:	4620      	mov	r0, r4
 8006202:	4629      	mov	r1, r5
 8006204:	f7fa f9bc 	bl	8000580 <__aeabi_dmul>
 8006208:	a33d      	add	r3, pc, #244	; (adr r3, 8006300 <__kernel_cos+0x148>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa f801 	bl	8000214 <__adddf3>
 8006212:	4622      	mov	r2, r4
 8006214:	462b      	mov	r3, r5
 8006216:	f7fa f9b3 	bl	8000580 <__aeabi_dmul>
 800621a:	a33b      	add	r3, pc, #236	; (adr r3, 8006308 <__kernel_cos+0x150>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7f9 fff6 	bl	8000210 <__aeabi_dsub>
 8006224:	4622      	mov	r2, r4
 8006226:	462b      	mov	r3, r5
 8006228:	f7fa f9aa 	bl	8000580 <__aeabi_dmul>
 800622c:	a338      	add	r3, pc, #224	; (adr r3, 8006310 <__kernel_cos+0x158>)
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f7f9 ffef 	bl	8000214 <__adddf3>
 8006236:	4622      	mov	r2, r4
 8006238:	462b      	mov	r3, r5
 800623a:	f7fa f9a1 	bl	8000580 <__aeabi_dmul>
 800623e:	a336      	add	r3, pc, #216	; (adr r3, 8006318 <__kernel_cos+0x160>)
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f7f9 ffe4 	bl	8000210 <__aeabi_dsub>
 8006248:	4622      	mov	r2, r4
 800624a:	462b      	mov	r3, r5
 800624c:	f7fa f998 	bl	8000580 <__aeabi_dmul>
 8006250:	a333      	add	r3, pc, #204	; (adr r3, 8006320 <__kernel_cos+0x168>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f7f9 ffdd 	bl	8000214 <__adddf3>
 800625a:	4622      	mov	r2, r4
 800625c:	462b      	mov	r3, r5
 800625e:	f7fa f98f 	bl	8000580 <__aeabi_dmul>
 8006262:	4622      	mov	r2, r4
 8006264:	462b      	mov	r3, r5
 8006266:	f7fa f98b 	bl	8000580 <__aeabi_dmul>
 800626a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800626e:	4604      	mov	r4, r0
 8006270:	460d      	mov	r5, r1
 8006272:	4630      	mov	r0, r6
 8006274:	4639      	mov	r1, r7
 8006276:	f7fa f983 	bl	8000580 <__aeabi_dmul>
 800627a:	460b      	mov	r3, r1
 800627c:	4602      	mov	r2, r0
 800627e:	4629      	mov	r1, r5
 8006280:	4620      	mov	r0, r4
 8006282:	f7f9 ffc5 	bl	8000210 <__aeabi_dsub>
 8006286:	4b2b      	ldr	r3, [pc, #172]	; (8006334 <__kernel_cos+0x17c>)
 8006288:	4598      	cmp	r8, r3
 800628a:	4606      	mov	r6, r0
 800628c:	460f      	mov	r7, r1
 800628e:	dc10      	bgt.n	80062b2 <__kernel_cos+0xfa>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4650      	mov	r0, sl
 8006296:	4659      	mov	r1, fp
 8006298:	f7f9 ffba 	bl	8000210 <__aeabi_dsub>
 800629c:	460b      	mov	r3, r1
 800629e:	4926      	ldr	r1, [pc, #152]	; (8006338 <__kernel_cos+0x180>)
 80062a0:	4602      	mov	r2, r0
 80062a2:	2000      	movs	r0, #0
 80062a4:	f7f9 ffb4 	bl	8000210 <__aeabi_dsub>
 80062a8:	ec41 0b10 	vmov	d0, r0, r1
 80062ac:	b003      	add	sp, #12
 80062ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b2:	4b22      	ldr	r3, [pc, #136]	; (800633c <__kernel_cos+0x184>)
 80062b4:	4920      	ldr	r1, [pc, #128]	; (8006338 <__kernel_cos+0x180>)
 80062b6:	4598      	cmp	r8, r3
 80062b8:	bfcc      	ite	gt
 80062ba:	4d21      	ldrgt	r5, [pc, #132]	; (8006340 <__kernel_cos+0x188>)
 80062bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80062c0:	2400      	movs	r4, #0
 80062c2:	4622      	mov	r2, r4
 80062c4:	462b      	mov	r3, r5
 80062c6:	2000      	movs	r0, #0
 80062c8:	f7f9 ffa2 	bl	8000210 <__aeabi_dsub>
 80062cc:	4622      	mov	r2, r4
 80062ce:	4680      	mov	r8, r0
 80062d0:	4689      	mov	r9, r1
 80062d2:	462b      	mov	r3, r5
 80062d4:	4650      	mov	r0, sl
 80062d6:	4659      	mov	r1, fp
 80062d8:	f7f9 ff9a 	bl	8000210 <__aeabi_dsub>
 80062dc:	4632      	mov	r2, r6
 80062de:	463b      	mov	r3, r7
 80062e0:	f7f9 ff96 	bl	8000210 <__aeabi_dsub>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4640      	mov	r0, r8
 80062ea:	4649      	mov	r1, r9
 80062ec:	e7da      	b.n	80062a4 <__kernel_cos+0xec>
 80062ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006328 <__kernel_cos+0x170>
 80062f2:	e7db      	b.n	80062ac <__kernel_cos+0xf4>
 80062f4:	f3af 8000 	nop.w
 80062f8:	be8838d4 	.word	0xbe8838d4
 80062fc:	bda8fae9 	.word	0xbda8fae9
 8006300:	bdb4b1c4 	.word	0xbdb4b1c4
 8006304:	3e21ee9e 	.word	0x3e21ee9e
 8006308:	809c52ad 	.word	0x809c52ad
 800630c:	3e927e4f 	.word	0x3e927e4f
 8006310:	19cb1590 	.word	0x19cb1590
 8006314:	3efa01a0 	.word	0x3efa01a0
 8006318:	16c15177 	.word	0x16c15177
 800631c:	3f56c16c 	.word	0x3f56c16c
 8006320:	5555554c 	.word	0x5555554c
 8006324:	3fa55555 	.word	0x3fa55555
 8006328:	00000000 	.word	0x00000000
 800632c:	3ff00000 	.word	0x3ff00000
 8006330:	3fe00000 	.word	0x3fe00000
 8006334:	3fd33332 	.word	0x3fd33332
 8006338:	3ff00000 	.word	0x3ff00000
 800633c:	3fe90000 	.word	0x3fe90000
 8006340:	3fd20000 	.word	0x3fd20000
 8006344:	00000000 	.word	0x00000000

08006348 <__kernel_rem_pio2>:
 8006348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634c:	ed2d 8b02 	vpush	{d8}
 8006350:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006354:	f112 0f14 	cmn.w	r2, #20
 8006358:	9308      	str	r3, [sp, #32]
 800635a:	9101      	str	r1, [sp, #4]
 800635c:	4bc4      	ldr	r3, [pc, #784]	; (8006670 <__kernel_rem_pio2+0x328>)
 800635e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006360:	900b      	str	r0, [sp, #44]	; 0x2c
 8006362:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006366:	9302      	str	r3, [sp, #8]
 8006368:	9b08      	ldr	r3, [sp, #32]
 800636a:	f103 33ff 	add.w	r3, r3, #4294967295
 800636e:	bfa8      	it	ge
 8006370:	1ed4      	subge	r4, r2, #3
 8006372:	9306      	str	r3, [sp, #24]
 8006374:	bfb2      	itee	lt
 8006376:	2400      	movlt	r4, #0
 8006378:	2318      	movge	r3, #24
 800637a:	fb94 f4f3 	sdivge	r4, r4, r3
 800637e:	f06f 0317 	mvn.w	r3, #23
 8006382:	fb04 3303 	mla	r3, r4, r3, r3
 8006386:	eb03 0a02 	add.w	sl, r3, r2
 800638a:	9b02      	ldr	r3, [sp, #8]
 800638c:	9a06      	ldr	r2, [sp, #24]
 800638e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006660 <__kernel_rem_pio2+0x318>
 8006392:	eb03 0802 	add.w	r8, r3, r2
 8006396:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006398:	1aa7      	subs	r7, r4, r2
 800639a:	ae22      	add	r6, sp, #136	; 0x88
 800639c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80063a0:	2500      	movs	r5, #0
 80063a2:	4545      	cmp	r5, r8
 80063a4:	dd13      	ble.n	80063ce <__kernel_rem_pio2+0x86>
 80063a6:	9b08      	ldr	r3, [sp, #32]
 80063a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006660 <__kernel_rem_pio2+0x318>
 80063ac:	aa22      	add	r2, sp, #136	; 0x88
 80063ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80063b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80063b6:	f04f 0800 	mov.w	r8, #0
 80063ba:	9b02      	ldr	r3, [sp, #8]
 80063bc:	4598      	cmp	r8, r3
 80063be:	dc2f      	bgt.n	8006420 <__kernel_rem_pio2+0xd8>
 80063c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80063c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80063c8:	462f      	mov	r7, r5
 80063ca:	2600      	movs	r6, #0
 80063cc:	e01b      	b.n	8006406 <__kernel_rem_pio2+0xbe>
 80063ce:	42ef      	cmn	r7, r5
 80063d0:	d407      	bmi.n	80063e2 <__kernel_rem_pio2+0x9a>
 80063d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80063d6:	f7fa f869 	bl	80004ac <__aeabi_i2d>
 80063da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80063de:	3501      	adds	r5, #1
 80063e0:	e7df      	b.n	80063a2 <__kernel_rem_pio2+0x5a>
 80063e2:	ec51 0b18 	vmov	r0, r1, d8
 80063e6:	e7f8      	b.n	80063da <__kernel_rem_pio2+0x92>
 80063e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80063f0:	f7fa f8c6 	bl	8000580 <__aeabi_dmul>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063fc:	f7f9 ff0a 	bl	8000214 <__adddf3>
 8006400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006404:	3601      	adds	r6, #1
 8006406:	9b06      	ldr	r3, [sp, #24]
 8006408:	429e      	cmp	r6, r3
 800640a:	f1a7 0708 	sub.w	r7, r7, #8
 800640e:	ddeb      	ble.n	80063e8 <__kernel_rem_pio2+0xa0>
 8006410:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006414:	f108 0801 	add.w	r8, r8, #1
 8006418:	ecab 7b02 	vstmia	fp!, {d7}
 800641c:	3508      	adds	r5, #8
 800641e:	e7cc      	b.n	80063ba <__kernel_rem_pio2+0x72>
 8006420:	9b02      	ldr	r3, [sp, #8]
 8006422:	aa0e      	add	r2, sp, #56	; 0x38
 8006424:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006428:	930d      	str	r3, [sp, #52]	; 0x34
 800642a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800642c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006430:	9c02      	ldr	r4, [sp, #8]
 8006432:	930c      	str	r3, [sp, #48]	; 0x30
 8006434:	00e3      	lsls	r3, r4, #3
 8006436:	930a      	str	r3, [sp, #40]	; 0x28
 8006438:	ab9a      	add	r3, sp, #616	; 0x268
 800643a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800643e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006442:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006446:	ab72      	add	r3, sp, #456	; 0x1c8
 8006448:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800644c:	46c3      	mov	fp, r8
 800644e:	46a1      	mov	r9, r4
 8006450:	f1b9 0f00 	cmp.w	r9, #0
 8006454:	f1a5 0508 	sub.w	r5, r5, #8
 8006458:	dc77      	bgt.n	800654a <__kernel_rem_pio2+0x202>
 800645a:	ec47 6b10 	vmov	d0, r6, r7
 800645e:	4650      	mov	r0, sl
 8006460:	f000 fc0a 	bl	8006c78 <scalbn>
 8006464:	ec57 6b10 	vmov	r6, r7, d0
 8006468:	2200      	movs	r2, #0
 800646a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800646e:	ee10 0a10 	vmov	r0, s0
 8006472:	4639      	mov	r1, r7
 8006474:	f7fa f884 	bl	8000580 <__aeabi_dmul>
 8006478:	ec41 0b10 	vmov	d0, r0, r1
 800647c:	f000 fb7c 	bl	8006b78 <floor>
 8006480:	4b7c      	ldr	r3, [pc, #496]	; (8006674 <__kernel_rem_pio2+0x32c>)
 8006482:	ec51 0b10 	vmov	r0, r1, d0
 8006486:	2200      	movs	r2, #0
 8006488:	f7fa f87a 	bl	8000580 <__aeabi_dmul>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4630      	mov	r0, r6
 8006492:	4639      	mov	r1, r7
 8006494:	f7f9 febc 	bl	8000210 <__aeabi_dsub>
 8006498:	460f      	mov	r7, r1
 800649a:	4606      	mov	r6, r0
 800649c:	f7fa fb0a 	bl	8000ab4 <__aeabi_d2iz>
 80064a0:	9004      	str	r0, [sp, #16]
 80064a2:	f7fa f803 	bl	80004ac <__aeabi_i2d>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4630      	mov	r0, r6
 80064ac:	4639      	mov	r1, r7
 80064ae:	f7f9 feaf 	bl	8000210 <__aeabi_dsub>
 80064b2:	f1ba 0f00 	cmp.w	sl, #0
 80064b6:	4606      	mov	r6, r0
 80064b8:	460f      	mov	r7, r1
 80064ba:	dd6d      	ble.n	8006598 <__kernel_rem_pio2+0x250>
 80064bc:	1e62      	subs	r2, r4, #1
 80064be:	ab0e      	add	r3, sp, #56	; 0x38
 80064c0:	9d04      	ldr	r5, [sp, #16]
 80064c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80064c6:	f1ca 0118 	rsb	r1, sl, #24
 80064ca:	fa40 f301 	asr.w	r3, r0, r1
 80064ce:	441d      	add	r5, r3
 80064d0:	408b      	lsls	r3, r1
 80064d2:	1ac0      	subs	r0, r0, r3
 80064d4:	ab0e      	add	r3, sp, #56	; 0x38
 80064d6:	9504      	str	r5, [sp, #16]
 80064d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80064dc:	f1ca 0317 	rsb	r3, sl, #23
 80064e0:	fa40 fb03 	asr.w	fp, r0, r3
 80064e4:	f1bb 0f00 	cmp.w	fp, #0
 80064e8:	dd65      	ble.n	80065b6 <__kernel_rem_pio2+0x26e>
 80064ea:	9b04      	ldr	r3, [sp, #16]
 80064ec:	2200      	movs	r2, #0
 80064ee:	3301      	adds	r3, #1
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	4615      	mov	r5, r2
 80064f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80064f8:	4294      	cmp	r4, r2
 80064fa:	f300 809c 	bgt.w	8006636 <__kernel_rem_pio2+0x2ee>
 80064fe:	f1ba 0f00 	cmp.w	sl, #0
 8006502:	dd07      	ble.n	8006514 <__kernel_rem_pio2+0x1cc>
 8006504:	f1ba 0f01 	cmp.w	sl, #1
 8006508:	f000 80c0 	beq.w	800668c <__kernel_rem_pio2+0x344>
 800650c:	f1ba 0f02 	cmp.w	sl, #2
 8006510:	f000 80c6 	beq.w	80066a0 <__kernel_rem_pio2+0x358>
 8006514:	f1bb 0f02 	cmp.w	fp, #2
 8006518:	d14d      	bne.n	80065b6 <__kernel_rem_pio2+0x26e>
 800651a:	4632      	mov	r2, r6
 800651c:	463b      	mov	r3, r7
 800651e:	4956      	ldr	r1, [pc, #344]	; (8006678 <__kernel_rem_pio2+0x330>)
 8006520:	2000      	movs	r0, #0
 8006522:	f7f9 fe75 	bl	8000210 <__aeabi_dsub>
 8006526:	4606      	mov	r6, r0
 8006528:	460f      	mov	r7, r1
 800652a:	2d00      	cmp	r5, #0
 800652c:	d043      	beq.n	80065b6 <__kernel_rem_pio2+0x26e>
 800652e:	4650      	mov	r0, sl
 8006530:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006668 <__kernel_rem_pio2+0x320>
 8006534:	f000 fba0 	bl	8006c78 <scalbn>
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	ec53 2b10 	vmov	r2, r3, d0
 8006540:	f7f9 fe66 	bl	8000210 <__aeabi_dsub>
 8006544:	4606      	mov	r6, r0
 8006546:	460f      	mov	r7, r1
 8006548:	e035      	b.n	80065b6 <__kernel_rem_pio2+0x26e>
 800654a:	4b4c      	ldr	r3, [pc, #304]	; (800667c <__kernel_rem_pio2+0x334>)
 800654c:	2200      	movs	r2, #0
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	f7fa f815 	bl	8000580 <__aeabi_dmul>
 8006556:	f7fa faad 	bl	8000ab4 <__aeabi_d2iz>
 800655a:	f7f9 ffa7 	bl	80004ac <__aeabi_i2d>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	ec43 2b18 	vmov	d8, r2, r3
 8006566:	4b46      	ldr	r3, [pc, #280]	; (8006680 <__kernel_rem_pio2+0x338>)
 8006568:	2200      	movs	r2, #0
 800656a:	f7fa f809 	bl	8000580 <__aeabi_dmul>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4630      	mov	r0, r6
 8006574:	4639      	mov	r1, r7
 8006576:	f7f9 fe4b 	bl	8000210 <__aeabi_dsub>
 800657a:	f7fa fa9b 	bl	8000ab4 <__aeabi_d2iz>
 800657e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006582:	f84b 0b04 	str.w	r0, [fp], #4
 8006586:	ec51 0b18 	vmov	r0, r1, d8
 800658a:	f7f9 fe43 	bl	8000214 <__adddf3>
 800658e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006592:	4606      	mov	r6, r0
 8006594:	460f      	mov	r7, r1
 8006596:	e75b      	b.n	8006450 <__kernel_rem_pio2+0x108>
 8006598:	d106      	bne.n	80065a8 <__kernel_rem_pio2+0x260>
 800659a:	1e63      	subs	r3, r4, #1
 800659c:	aa0e      	add	r2, sp, #56	; 0x38
 800659e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80065a2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80065a6:	e79d      	b.n	80064e4 <__kernel_rem_pio2+0x19c>
 80065a8:	4b36      	ldr	r3, [pc, #216]	; (8006684 <__kernel_rem_pio2+0x33c>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	f7fa fa6e 	bl	8000a8c <__aeabi_dcmpge>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d13d      	bne.n	8006630 <__kernel_rem_pio2+0x2e8>
 80065b4:	4683      	mov	fp, r0
 80065b6:	2200      	movs	r2, #0
 80065b8:	2300      	movs	r3, #0
 80065ba:	4630      	mov	r0, r6
 80065bc:	4639      	mov	r1, r7
 80065be:	f7fa fa47 	bl	8000a50 <__aeabi_dcmpeq>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f000 80c0 	beq.w	8006748 <__kernel_rem_pio2+0x400>
 80065c8:	1e65      	subs	r5, r4, #1
 80065ca:	462b      	mov	r3, r5
 80065cc:	2200      	movs	r2, #0
 80065ce:	9902      	ldr	r1, [sp, #8]
 80065d0:	428b      	cmp	r3, r1
 80065d2:	da6c      	bge.n	80066ae <__kernel_rem_pio2+0x366>
 80065d4:	2a00      	cmp	r2, #0
 80065d6:	f000 8089 	beq.w	80066ec <__kernel_rem_pio2+0x3a4>
 80065da:	ab0e      	add	r3, sp, #56	; 0x38
 80065dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80065e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 80ad 	beq.w	8006744 <__kernel_rem_pio2+0x3fc>
 80065ea:	4650      	mov	r0, sl
 80065ec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006668 <__kernel_rem_pio2+0x320>
 80065f0:	f000 fb42 	bl	8006c78 <scalbn>
 80065f4:	ab9a      	add	r3, sp, #616	; 0x268
 80065f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80065fa:	ec57 6b10 	vmov	r6, r7, d0
 80065fe:	00ec      	lsls	r4, r5, #3
 8006600:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006604:	46aa      	mov	sl, r5
 8006606:	f1ba 0f00 	cmp.w	sl, #0
 800660a:	f280 80d6 	bge.w	80067ba <__kernel_rem_pio2+0x472>
 800660e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006660 <__kernel_rem_pio2+0x318>
 8006612:	462e      	mov	r6, r5
 8006614:	2e00      	cmp	r6, #0
 8006616:	f2c0 8104 	blt.w	8006822 <__kernel_rem_pio2+0x4da>
 800661a:	ab72      	add	r3, sp, #456	; 0x1c8
 800661c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006620:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006688 <__kernel_rem_pio2+0x340>
 8006624:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006628:	f04f 0800 	mov.w	r8, #0
 800662c:	1baf      	subs	r7, r5, r6
 800662e:	e0ea      	b.n	8006806 <__kernel_rem_pio2+0x4be>
 8006630:	f04f 0b02 	mov.w	fp, #2
 8006634:	e759      	b.n	80064ea <__kernel_rem_pio2+0x1a2>
 8006636:	f8d8 3000 	ldr.w	r3, [r8]
 800663a:	b955      	cbnz	r5, 8006652 <__kernel_rem_pio2+0x30a>
 800663c:	b123      	cbz	r3, 8006648 <__kernel_rem_pio2+0x300>
 800663e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006642:	f8c8 3000 	str.w	r3, [r8]
 8006646:	2301      	movs	r3, #1
 8006648:	3201      	adds	r2, #1
 800664a:	f108 0804 	add.w	r8, r8, #4
 800664e:	461d      	mov	r5, r3
 8006650:	e752      	b.n	80064f8 <__kernel_rem_pio2+0x1b0>
 8006652:	1acb      	subs	r3, r1, r3
 8006654:	f8c8 3000 	str.w	r3, [r8]
 8006658:	462b      	mov	r3, r5
 800665a:	e7f5      	b.n	8006648 <__kernel_rem_pio2+0x300>
 800665c:	f3af 8000 	nop.w
	...
 800666c:	3ff00000 	.word	0x3ff00000
 8006670:	08006fd8 	.word	0x08006fd8
 8006674:	40200000 	.word	0x40200000
 8006678:	3ff00000 	.word	0x3ff00000
 800667c:	3e700000 	.word	0x3e700000
 8006680:	41700000 	.word	0x41700000
 8006684:	3fe00000 	.word	0x3fe00000
 8006688:	08006f98 	.word	0x08006f98
 800668c:	1e62      	subs	r2, r4, #1
 800668e:	ab0e      	add	r3, sp, #56	; 0x38
 8006690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006694:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006698:	a90e      	add	r1, sp, #56	; 0x38
 800669a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800669e:	e739      	b.n	8006514 <__kernel_rem_pio2+0x1cc>
 80066a0:	1e62      	subs	r2, r4, #1
 80066a2:	ab0e      	add	r3, sp, #56	; 0x38
 80066a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80066ac:	e7f4      	b.n	8006698 <__kernel_rem_pio2+0x350>
 80066ae:	a90e      	add	r1, sp, #56	; 0x38
 80066b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	430a      	orrs	r2, r1
 80066b8:	e789      	b.n	80065ce <__kernel_rem_pio2+0x286>
 80066ba:	3301      	adds	r3, #1
 80066bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d0fa      	beq.n	80066ba <__kernel_rem_pio2+0x372>
 80066c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80066ca:	446a      	add	r2, sp
 80066cc:	3a98      	subs	r2, #152	; 0x98
 80066ce:	920a      	str	r2, [sp, #40]	; 0x28
 80066d0:	9a08      	ldr	r2, [sp, #32]
 80066d2:	18e3      	adds	r3, r4, r3
 80066d4:	18a5      	adds	r5, r4, r2
 80066d6:	aa22      	add	r2, sp, #136	; 0x88
 80066d8:	f104 0801 	add.w	r8, r4, #1
 80066dc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80066e0:	9304      	str	r3, [sp, #16]
 80066e2:	9b04      	ldr	r3, [sp, #16]
 80066e4:	4543      	cmp	r3, r8
 80066e6:	da04      	bge.n	80066f2 <__kernel_rem_pio2+0x3aa>
 80066e8:	461c      	mov	r4, r3
 80066ea:	e6a3      	b.n	8006434 <__kernel_rem_pio2+0xec>
 80066ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066ee:	2301      	movs	r3, #1
 80066f0:	e7e4      	b.n	80066bc <__kernel_rem_pio2+0x374>
 80066f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066f4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80066f8:	f7f9 fed8 	bl	80004ac <__aeabi_i2d>
 80066fc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006702:	46ab      	mov	fp, r5
 8006704:	461c      	mov	r4, r3
 8006706:	f04f 0900 	mov.w	r9, #0
 800670a:	2600      	movs	r6, #0
 800670c:	2700      	movs	r7, #0
 800670e:	9b06      	ldr	r3, [sp, #24]
 8006710:	4599      	cmp	r9, r3
 8006712:	dd06      	ble.n	8006722 <__kernel_rem_pio2+0x3da>
 8006714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006716:	e8e3 6702 	strd	r6, r7, [r3], #8
 800671a:	f108 0801 	add.w	r8, r8, #1
 800671e:	930a      	str	r3, [sp, #40]	; 0x28
 8006720:	e7df      	b.n	80066e2 <__kernel_rem_pio2+0x39a>
 8006722:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006726:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800672a:	f7f9 ff29 	bl	8000580 <__aeabi_dmul>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4630      	mov	r0, r6
 8006734:	4639      	mov	r1, r7
 8006736:	f7f9 fd6d 	bl	8000214 <__adddf3>
 800673a:	f109 0901 	add.w	r9, r9, #1
 800673e:	4606      	mov	r6, r0
 8006740:	460f      	mov	r7, r1
 8006742:	e7e4      	b.n	800670e <__kernel_rem_pio2+0x3c6>
 8006744:	3d01      	subs	r5, #1
 8006746:	e748      	b.n	80065da <__kernel_rem_pio2+0x292>
 8006748:	ec47 6b10 	vmov	d0, r6, r7
 800674c:	f1ca 0000 	rsb	r0, sl, #0
 8006750:	f000 fa92 	bl	8006c78 <scalbn>
 8006754:	ec57 6b10 	vmov	r6, r7, d0
 8006758:	4ba0      	ldr	r3, [pc, #640]	; (80069dc <__kernel_rem_pio2+0x694>)
 800675a:	ee10 0a10 	vmov	r0, s0
 800675e:	2200      	movs	r2, #0
 8006760:	4639      	mov	r1, r7
 8006762:	f7fa f993 	bl	8000a8c <__aeabi_dcmpge>
 8006766:	b1f8      	cbz	r0, 80067a8 <__kernel_rem_pio2+0x460>
 8006768:	4b9d      	ldr	r3, [pc, #628]	; (80069e0 <__kernel_rem_pio2+0x698>)
 800676a:	2200      	movs	r2, #0
 800676c:	4630      	mov	r0, r6
 800676e:	4639      	mov	r1, r7
 8006770:	f7f9 ff06 	bl	8000580 <__aeabi_dmul>
 8006774:	f7fa f99e 	bl	8000ab4 <__aeabi_d2iz>
 8006778:	4680      	mov	r8, r0
 800677a:	f7f9 fe97 	bl	80004ac <__aeabi_i2d>
 800677e:	4b97      	ldr	r3, [pc, #604]	; (80069dc <__kernel_rem_pio2+0x694>)
 8006780:	2200      	movs	r2, #0
 8006782:	f7f9 fefd 	bl	8000580 <__aeabi_dmul>
 8006786:	460b      	mov	r3, r1
 8006788:	4602      	mov	r2, r0
 800678a:	4639      	mov	r1, r7
 800678c:	4630      	mov	r0, r6
 800678e:	f7f9 fd3f 	bl	8000210 <__aeabi_dsub>
 8006792:	f7fa f98f 	bl	8000ab4 <__aeabi_d2iz>
 8006796:	1c65      	adds	r5, r4, #1
 8006798:	ab0e      	add	r3, sp, #56	; 0x38
 800679a:	f10a 0a18 	add.w	sl, sl, #24
 800679e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80067a2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80067a6:	e720      	b.n	80065ea <__kernel_rem_pio2+0x2a2>
 80067a8:	4630      	mov	r0, r6
 80067aa:	4639      	mov	r1, r7
 80067ac:	f7fa f982 	bl	8000ab4 <__aeabi_d2iz>
 80067b0:	ab0e      	add	r3, sp, #56	; 0x38
 80067b2:	4625      	mov	r5, r4
 80067b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80067b8:	e717      	b.n	80065ea <__kernel_rem_pio2+0x2a2>
 80067ba:	ab0e      	add	r3, sp, #56	; 0x38
 80067bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80067c0:	f7f9 fe74 	bl	80004ac <__aeabi_i2d>
 80067c4:	4632      	mov	r2, r6
 80067c6:	463b      	mov	r3, r7
 80067c8:	f7f9 feda 	bl	8000580 <__aeabi_dmul>
 80067cc:	4b84      	ldr	r3, [pc, #528]	; (80069e0 <__kernel_rem_pio2+0x698>)
 80067ce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80067d2:	2200      	movs	r2, #0
 80067d4:	4630      	mov	r0, r6
 80067d6:	4639      	mov	r1, r7
 80067d8:	f7f9 fed2 	bl	8000580 <__aeabi_dmul>
 80067dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067e0:	4606      	mov	r6, r0
 80067e2:	460f      	mov	r7, r1
 80067e4:	e70f      	b.n	8006606 <__kernel_rem_pio2+0x2be>
 80067e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80067ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80067ee:	f7f9 fec7 	bl	8000580 <__aeabi_dmul>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067fa:	f7f9 fd0b 	bl	8000214 <__adddf3>
 80067fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006802:	f108 0801 	add.w	r8, r8, #1
 8006806:	9b02      	ldr	r3, [sp, #8]
 8006808:	4598      	cmp	r8, r3
 800680a:	dc01      	bgt.n	8006810 <__kernel_rem_pio2+0x4c8>
 800680c:	45b8      	cmp	r8, r7
 800680e:	ddea      	ble.n	80067e6 <__kernel_rem_pio2+0x49e>
 8006810:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006814:	ab4a      	add	r3, sp, #296	; 0x128
 8006816:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800681a:	ed87 7b00 	vstr	d7, [r7]
 800681e:	3e01      	subs	r6, #1
 8006820:	e6f8      	b.n	8006614 <__kernel_rem_pio2+0x2cc>
 8006822:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006824:	2b02      	cmp	r3, #2
 8006826:	dc0b      	bgt.n	8006840 <__kernel_rem_pio2+0x4f8>
 8006828:	2b00      	cmp	r3, #0
 800682a:	dc35      	bgt.n	8006898 <__kernel_rem_pio2+0x550>
 800682c:	d059      	beq.n	80068e2 <__kernel_rem_pio2+0x59a>
 800682e:	9b04      	ldr	r3, [sp, #16]
 8006830:	f003 0007 	and.w	r0, r3, #7
 8006834:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006838:	ecbd 8b02 	vpop	{d8}
 800683c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006840:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006842:	2b03      	cmp	r3, #3
 8006844:	d1f3      	bne.n	800682e <__kernel_rem_pio2+0x4e6>
 8006846:	ab4a      	add	r3, sp, #296	; 0x128
 8006848:	4423      	add	r3, r4
 800684a:	9306      	str	r3, [sp, #24]
 800684c:	461c      	mov	r4, r3
 800684e:	469a      	mov	sl, r3
 8006850:	9502      	str	r5, [sp, #8]
 8006852:	9b02      	ldr	r3, [sp, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f1aa 0a08 	sub.w	sl, sl, #8
 800685a:	dc6b      	bgt.n	8006934 <__kernel_rem_pio2+0x5ec>
 800685c:	46aa      	mov	sl, r5
 800685e:	f1ba 0f01 	cmp.w	sl, #1
 8006862:	f1a4 0408 	sub.w	r4, r4, #8
 8006866:	f300 8085 	bgt.w	8006974 <__kernel_rem_pio2+0x62c>
 800686a:	9c06      	ldr	r4, [sp, #24]
 800686c:	2000      	movs	r0, #0
 800686e:	3408      	adds	r4, #8
 8006870:	2100      	movs	r1, #0
 8006872:	2d01      	cmp	r5, #1
 8006874:	f300 809d 	bgt.w	80069b2 <__kernel_rem_pio2+0x66a>
 8006878:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800687c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006880:	f1bb 0f00 	cmp.w	fp, #0
 8006884:	f040 809b 	bne.w	80069be <__kernel_rem_pio2+0x676>
 8006888:	9b01      	ldr	r3, [sp, #4]
 800688a:	e9c3 5600 	strd	r5, r6, [r3]
 800688e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006892:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006896:	e7ca      	b.n	800682e <__kernel_rem_pio2+0x4e6>
 8006898:	3408      	adds	r4, #8
 800689a:	ab4a      	add	r3, sp, #296	; 0x128
 800689c:	441c      	add	r4, r3
 800689e:	462e      	mov	r6, r5
 80068a0:	2000      	movs	r0, #0
 80068a2:	2100      	movs	r1, #0
 80068a4:	2e00      	cmp	r6, #0
 80068a6:	da36      	bge.n	8006916 <__kernel_rem_pio2+0x5ce>
 80068a8:	f1bb 0f00 	cmp.w	fp, #0
 80068ac:	d039      	beq.n	8006922 <__kernel_rem_pio2+0x5da>
 80068ae:	4602      	mov	r2, r0
 80068b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068b4:	9c01      	ldr	r4, [sp, #4]
 80068b6:	e9c4 2300 	strd	r2, r3, [r4]
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80068c2:	f7f9 fca5 	bl	8000210 <__aeabi_dsub>
 80068c6:	ae4c      	add	r6, sp, #304	; 0x130
 80068c8:	2401      	movs	r4, #1
 80068ca:	42a5      	cmp	r5, r4
 80068cc:	da2c      	bge.n	8006928 <__kernel_rem_pio2+0x5e0>
 80068ce:	f1bb 0f00 	cmp.w	fp, #0
 80068d2:	d002      	beq.n	80068da <__kernel_rem_pio2+0x592>
 80068d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068d8:	4619      	mov	r1, r3
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80068e0:	e7a5      	b.n	800682e <__kernel_rem_pio2+0x4e6>
 80068e2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80068e6:	eb0d 0403 	add.w	r4, sp, r3
 80068ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80068ee:	2000      	movs	r0, #0
 80068f0:	2100      	movs	r1, #0
 80068f2:	2d00      	cmp	r5, #0
 80068f4:	da09      	bge.n	800690a <__kernel_rem_pio2+0x5c2>
 80068f6:	f1bb 0f00 	cmp.w	fp, #0
 80068fa:	d002      	beq.n	8006902 <__kernel_rem_pio2+0x5ba>
 80068fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006900:	4619      	mov	r1, r3
 8006902:	9b01      	ldr	r3, [sp, #4]
 8006904:	e9c3 0100 	strd	r0, r1, [r3]
 8006908:	e791      	b.n	800682e <__kernel_rem_pio2+0x4e6>
 800690a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800690e:	f7f9 fc81 	bl	8000214 <__adddf3>
 8006912:	3d01      	subs	r5, #1
 8006914:	e7ed      	b.n	80068f2 <__kernel_rem_pio2+0x5aa>
 8006916:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800691a:	f7f9 fc7b 	bl	8000214 <__adddf3>
 800691e:	3e01      	subs	r6, #1
 8006920:	e7c0      	b.n	80068a4 <__kernel_rem_pio2+0x55c>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	e7c5      	b.n	80068b4 <__kernel_rem_pio2+0x56c>
 8006928:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800692c:	f7f9 fc72 	bl	8000214 <__adddf3>
 8006930:	3401      	adds	r4, #1
 8006932:	e7ca      	b.n	80068ca <__kernel_rem_pio2+0x582>
 8006934:	e9da 8900 	ldrd	r8, r9, [sl]
 8006938:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800693c:	9b02      	ldr	r3, [sp, #8]
 800693e:	3b01      	subs	r3, #1
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	4632      	mov	r2, r6
 8006944:	463b      	mov	r3, r7
 8006946:	4640      	mov	r0, r8
 8006948:	4649      	mov	r1, r9
 800694a:	f7f9 fc63 	bl	8000214 <__adddf3>
 800694e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	4640      	mov	r0, r8
 8006958:	4649      	mov	r1, r9
 800695a:	f7f9 fc59 	bl	8000210 <__aeabi_dsub>
 800695e:	4632      	mov	r2, r6
 8006960:	463b      	mov	r3, r7
 8006962:	f7f9 fc57 	bl	8000214 <__adddf3>
 8006966:	ed9d 7b08 	vldr	d7, [sp, #32]
 800696a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800696e:	ed8a 7b00 	vstr	d7, [sl]
 8006972:	e76e      	b.n	8006852 <__kernel_rem_pio2+0x50a>
 8006974:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006978:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800697c:	4640      	mov	r0, r8
 800697e:	4632      	mov	r2, r6
 8006980:	463b      	mov	r3, r7
 8006982:	4649      	mov	r1, r9
 8006984:	f7f9 fc46 	bl	8000214 <__adddf3>
 8006988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4640      	mov	r0, r8
 8006992:	4649      	mov	r1, r9
 8006994:	f7f9 fc3c 	bl	8000210 <__aeabi_dsub>
 8006998:	4632      	mov	r2, r6
 800699a:	463b      	mov	r3, r7
 800699c:	f7f9 fc3a 	bl	8000214 <__adddf3>
 80069a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80069a8:	ed84 7b00 	vstr	d7, [r4]
 80069ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069b0:	e755      	b.n	800685e <__kernel_rem_pio2+0x516>
 80069b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80069b6:	f7f9 fc2d 	bl	8000214 <__adddf3>
 80069ba:	3d01      	subs	r5, #1
 80069bc:	e759      	b.n	8006872 <__kernel_rem_pio2+0x52a>
 80069be:	9b01      	ldr	r3, [sp, #4]
 80069c0:	9a01      	ldr	r2, [sp, #4]
 80069c2:	601d      	str	r5, [r3, #0]
 80069c4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80069c8:	605c      	str	r4, [r3, #4]
 80069ca:	609f      	str	r7, [r3, #8]
 80069cc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80069d0:	60d3      	str	r3, [r2, #12]
 80069d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069d6:	6110      	str	r0, [r2, #16]
 80069d8:	6153      	str	r3, [r2, #20]
 80069da:	e728      	b.n	800682e <__kernel_rem_pio2+0x4e6>
 80069dc:	41700000 	.word	0x41700000
 80069e0:	3e700000 	.word	0x3e700000
 80069e4:	00000000 	.word	0x00000000

080069e8 <__kernel_sin>:
 80069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	ed2d 8b04 	vpush	{d8-d9}
 80069f0:	eeb0 8a41 	vmov.f32	s16, s2
 80069f4:	eef0 8a61 	vmov.f32	s17, s3
 80069f8:	ec55 4b10 	vmov	r4, r5, d0
 80069fc:	b083      	sub	sp, #12
 80069fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006a06:	9001      	str	r0, [sp, #4]
 8006a08:	da06      	bge.n	8006a18 <__kernel_sin+0x30>
 8006a0a:	ee10 0a10 	vmov	r0, s0
 8006a0e:	4629      	mov	r1, r5
 8006a10:	f7fa f850 	bl	8000ab4 <__aeabi_d2iz>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d051      	beq.n	8006abc <__kernel_sin+0xd4>
 8006a18:	4622      	mov	r2, r4
 8006a1a:	462b      	mov	r3, r5
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	4629      	mov	r1, r5
 8006a20:	f7f9 fdae 	bl	8000580 <__aeabi_dmul>
 8006a24:	4682      	mov	sl, r0
 8006a26:	468b      	mov	fp, r1
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	4629      	mov	r1, r5
 8006a30:	f7f9 fda6 	bl	8000580 <__aeabi_dmul>
 8006a34:	a341      	add	r3, pc, #260	; (adr r3, 8006b3c <__kernel_sin+0x154>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	4689      	mov	r9, r1
 8006a3e:	4650      	mov	r0, sl
 8006a40:	4659      	mov	r1, fp
 8006a42:	f7f9 fd9d 	bl	8000580 <__aeabi_dmul>
 8006a46:	a33f      	add	r3, pc, #252	; (adr r3, 8006b44 <__kernel_sin+0x15c>)
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f7f9 fbe0 	bl	8000210 <__aeabi_dsub>
 8006a50:	4652      	mov	r2, sl
 8006a52:	465b      	mov	r3, fp
 8006a54:	f7f9 fd94 	bl	8000580 <__aeabi_dmul>
 8006a58:	a33c      	add	r3, pc, #240	; (adr r3, 8006b4c <__kernel_sin+0x164>)
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f7f9 fbd9 	bl	8000214 <__adddf3>
 8006a62:	4652      	mov	r2, sl
 8006a64:	465b      	mov	r3, fp
 8006a66:	f7f9 fd8b 	bl	8000580 <__aeabi_dmul>
 8006a6a:	a33a      	add	r3, pc, #232	; (adr r3, 8006b54 <__kernel_sin+0x16c>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7f9 fbce 	bl	8000210 <__aeabi_dsub>
 8006a74:	4652      	mov	r2, sl
 8006a76:	465b      	mov	r3, fp
 8006a78:	f7f9 fd82 	bl	8000580 <__aeabi_dmul>
 8006a7c:	a337      	add	r3, pc, #220	; (adr r3, 8006b5c <__kernel_sin+0x174>)
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f7f9 fbc7 	bl	8000214 <__adddf3>
 8006a86:	9b01      	ldr	r3, [sp, #4]
 8006a88:	4606      	mov	r6, r0
 8006a8a:	460f      	mov	r7, r1
 8006a8c:	b9eb      	cbnz	r3, 8006aca <__kernel_sin+0xe2>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4650      	mov	r0, sl
 8006a94:	4659      	mov	r1, fp
 8006a96:	f7f9 fd73 	bl	8000580 <__aeabi_dmul>
 8006a9a:	a325      	add	r3, pc, #148	; (adr r3, 8006b30 <__kernel_sin+0x148>)
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f7f9 fbb6 	bl	8000210 <__aeabi_dsub>
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	f7f9 fd6a 	bl	8000580 <__aeabi_dmul>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	f7f9 fbae 	bl	8000214 <__adddf3>
 8006ab8:	4604      	mov	r4, r0
 8006aba:	460d      	mov	r5, r1
 8006abc:	ec45 4b10 	vmov	d0, r4, r5
 8006ac0:	b003      	add	sp, #12
 8006ac2:	ecbd 8b04 	vpop	{d8-d9}
 8006ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <__kernel_sin+0x150>)
 8006acc:	ec51 0b18 	vmov	r0, r1, d8
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f7f9 fd55 	bl	8000580 <__aeabi_dmul>
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	ec41 0b19 	vmov	d9, r0, r1
 8006adc:	463b      	mov	r3, r7
 8006ade:	4640      	mov	r0, r8
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	f7f9 fd4d 	bl	8000580 <__aeabi_dmul>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	ec51 0b19 	vmov	r0, r1, d9
 8006aee:	f7f9 fb8f 	bl	8000210 <__aeabi_dsub>
 8006af2:	4652      	mov	r2, sl
 8006af4:	465b      	mov	r3, fp
 8006af6:	f7f9 fd43 	bl	8000580 <__aeabi_dmul>
 8006afa:	ec53 2b18 	vmov	r2, r3, d8
 8006afe:	f7f9 fb87 	bl	8000210 <__aeabi_dsub>
 8006b02:	a30b      	add	r3, pc, #44	; (adr r3, 8006b30 <__kernel_sin+0x148>)
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	4606      	mov	r6, r0
 8006b0a:	460f      	mov	r7, r1
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4649      	mov	r1, r9
 8006b10:	f7f9 fd36 	bl	8000580 <__aeabi_dmul>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	f7f9 fb7a 	bl	8000214 <__adddf3>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4620      	mov	r0, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7f9 fb72 	bl	8000210 <__aeabi_dsub>
 8006b2c:	e7c4      	b.n	8006ab8 <__kernel_sin+0xd0>
 8006b2e:	bf00      	nop
 8006b30:	55555549 	.word	0x55555549
 8006b34:	3fc55555 	.word	0x3fc55555
 8006b38:	3fe00000 	.word	0x3fe00000
 8006b3c:	5acfd57c 	.word	0x5acfd57c
 8006b40:	3de5d93a 	.word	0x3de5d93a
 8006b44:	8a2b9ceb 	.word	0x8a2b9ceb
 8006b48:	3e5ae5e6 	.word	0x3e5ae5e6
 8006b4c:	57b1fe7d 	.word	0x57b1fe7d
 8006b50:	3ec71de3 	.word	0x3ec71de3
 8006b54:	19c161d5 	.word	0x19c161d5
 8006b58:	3f2a01a0 	.word	0x3f2a01a0
 8006b5c:	1110f8a6 	.word	0x1110f8a6
 8006b60:	3f811111 	.word	0x3f811111

08006b64 <fabs>:
 8006b64:	ec51 0b10 	vmov	r0, r1, d0
 8006b68:	ee10 2a10 	vmov	r2, s0
 8006b6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b70:	ec43 2b10 	vmov	d0, r2, r3
 8006b74:	4770      	bx	lr
	...

08006b78 <floor>:
 8006b78:	ec51 0b10 	vmov	r0, r1, d0
 8006b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006b84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006b88:	2e13      	cmp	r6, #19
 8006b8a:	ee10 5a10 	vmov	r5, s0
 8006b8e:	ee10 8a10 	vmov	r8, s0
 8006b92:	460c      	mov	r4, r1
 8006b94:	dc32      	bgt.n	8006bfc <floor+0x84>
 8006b96:	2e00      	cmp	r6, #0
 8006b98:	da14      	bge.n	8006bc4 <floor+0x4c>
 8006b9a:	a333      	add	r3, pc, #204	; (adr r3, 8006c68 <floor+0xf0>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f7f9 fb38 	bl	8000214 <__adddf3>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f7f9 ff7a 	bl	8000aa0 <__aeabi_dcmpgt>
 8006bac:	b138      	cbz	r0, 8006bbe <floor+0x46>
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	da57      	bge.n	8006c62 <floor+0xea>
 8006bb2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006bb6:	431d      	orrs	r5, r3
 8006bb8:	d001      	beq.n	8006bbe <floor+0x46>
 8006bba:	4c2d      	ldr	r4, [pc, #180]	; (8006c70 <floor+0xf8>)
 8006bbc:	2500      	movs	r5, #0
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	e025      	b.n	8006c10 <floor+0x98>
 8006bc4:	4f2b      	ldr	r7, [pc, #172]	; (8006c74 <floor+0xfc>)
 8006bc6:	4137      	asrs	r7, r6
 8006bc8:	ea01 0307 	and.w	r3, r1, r7
 8006bcc:	4303      	orrs	r3, r0
 8006bce:	d01f      	beq.n	8006c10 <floor+0x98>
 8006bd0:	a325      	add	r3, pc, #148	; (adr r3, 8006c68 <floor+0xf0>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f7f9 fb1d 	bl	8000214 <__adddf3>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f7f9 ff5f 	bl	8000aa0 <__aeabi_dcmpgt>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d0eb      	beq.n	8006bbe <floor+0x46>
 8006be6:	2c00      	cmp	r4, #0
 8006be8:	bfbe      	ittt	lt
 8006bea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006bee:	fa43 f606 	asrlt.w	r6, r3, r6
 8006bf2:	19a4      	addlt	r4, r4, r6
 8006bf4:	ea24 0407 	bic.w	r4, r4, r7
 8006bf8:	2500      	movs	r5, #0
 8006bfa:	e7e0      	b.n	8006bbe <floor+0x46>
 8006bfc:	2e33      	cmp	r6, #51	; 0x33
 8006bfe:	dd0b      	ble.n	8006c18 <floor+0xa0>
 8006c00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006c04:	d104      	bne.n	8006c10 <floor+0x98>
 8006c06:	ee10 2a10 	vmov	r2, s0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	f7f9 fb02 	bl	8000214 <__adddf3>
 8006c10:	ec41 0b10 	vmov	d0, r0, r1
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c18:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	fa23 f707 	lsr.w	r7, r3, r7
 8006c24:	4207      	tst	r7, r0
 8006c26:	d0f3      	beq.n	8006c10 <floor+0x98>
 8006c28:	a30f      	add	r3, pc, #60	; (adr r3, 8006c68 <floor+0xf0>)
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f7f9 faf1 	bl	8000214 <__adddf3>
 8006c32:	2200      	movs	r2, #0
 8006c34:	2300      	movs	r3, #0
 8006c36:	f7f9 ff33 	bl	8000aa0 <__aeabi_dcmpgt>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d0bf      	beq.n	8006bbe <floor+0x46>
 8006c3e:	2c00      	cmp	r4, #0
 8006c40:	da02      	bge.n	8006c48 <floor+0xd0>
 8006c42:	2e14      	cmp	r6, #20
 8006c44:	d103      	bne.n	8006c4e <floor+0xd6>
 8006c46:	3401      	adds	r4, #1
 8006c48:	ea25 0507 	bic.w	r5, r5, r7
 8006c4c:	e7b7      	b.n	8006bbe <floor+0x46>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006c54:	fa03 f606 	lsl.w	r6, r3, r6
 8006c58:	4435      	add	r5, r6
 8006c5a:	4545      	cmp	r5, r8
 8006c5c:	bf38      	it	cc
 8006c5e:	18e4      	addcc	r4, r4, r3
 8006c60:	e7f2      	b.n	8006c48 <floor+0xd0>
 8006c62:	2500      	movs	r5, #0
 8006c64:	462c      	mov	r4, r5
 8006c66:	e7aa      	b.n	8006bbe <floor+0x46>
 8006c68:	8800759c 	.word	0x8800759c
 8006c6c:	7e37e43c 	.word	0x7e37e43c
 8006c70:	bff00000 	.word	0xbff00000
 8006c74:	000fffff 	.word	0x000fffff

08006c78 <scalbn>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	ec55 4b10 	vmov	r4, r5, d0
 8006c7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006c82:	4606      	mov	r6, r0
 8006c84:	462b      	mov	r3, r5
 8006c86:	b99a      	cbnz	r2, 8006cb0 <scalbn+0x38>
 8006c88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006c8c:	4323      	orrs	r3, r4
 8006c8e:	d036      	beq.n	8006cfe <scalbn+0x86>
 8006c90:	4b39      	ldr	r3, [pc, #228]	; (8006d78 <scalbn+0x100>)
 8006c92:	4629      	mov	r1, r5
 8006c94:	ee10 0a10 	vmov	r0, s0
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f7f9 fc71 	bl	8000580 <__aeabi_dmul>
 8006c9e:	4b37      	ldr	r3, [pc, #220]	; (8006d7c <scalbn+0x104>)
 8006ca0:	429e      	cmp	r6, r3
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	460d      	mov	r5, r1
 8006ca6:	da10      	bge.n	8006cca <scalbn+0x52>
 8006ca8:	a32b      	add	r3, pc, #172	; (adr r3, 8006d58 <scalbn+0xe0>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	e03a      	b.n	8006d26 <scalbn+0xae>
 8006cb0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006cb4:	428a      	cmp	r2, r1
 8006cb6:	d10c      	bne.n	8006cd2 <scalbn+0x5a>
 8006cb8:	ee10 2a10 	vmov	r2, s0
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	f7f9 faa8 	bl	8000214 <__adddf3>
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	460d      	mov	r5, r1
 8006cc8:	e019      	b.n	8006cfe <scalbn+0x86>
 8006cca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006cce:	460b      	mov	r3, r1
 8006cd0:	3a36      	subs	r2, #54	; 0x36
 8006cd2:	4432      	add	r2, r6
 8006cd4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006cd8:	428a      	cmp	r2, r1
 8006cda:	dd08      	ble.n	8006cee <scalbn+0x76>
 8006cdc:	2d00      	cmp	r5, #0
 8006cde:	a120      	add	r1, pc, #128	; (adr r1, 8006d60 <scalbn+0xe8>)
 8006ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ce4:	da1c      	bge.n	8006d20 <scalbn+0xa8>
 8006ce6:	a120      	add	r1, pc, #128	; (adr r1, 8006d68 <scalbn+0xf0>)
 8006ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cec:	e018      	b.n	8006d20 <scalbn+0xa8>
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	dd08      	ble.n	8006d04 <scalbn+0x8c>
 8006cf2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cf6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cfa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cfe:	ec45 4b10 	vmov	d0, r4, r5
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
 8006d04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006d08:	da19      	bge.n	8006d3e <scalbn+0xc6>
 8006d0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006d0e:	429e      	cmp	r6, r3
 8006d10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006d14:	dd0a      	ble.n	8006d2c <scalbn+0xb4>
 8006d16:	a112      	add	r1, pc, #72	; (adr r1, 8006d60 <scalbn+0xe8>)
 8006d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e2      	bne.n	8006ce6 <scalbn+0x6e>
 8006d20:	a30f      	add	r3, pc, #60	; (adr r3, 8006d60 <scalbn+0xe8>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f7f9 fc2b 	bl	8000580 <__aeabi_dmul>
 8006d2a:	e7cb      	b.n	8006cc4 <scalbn+0x4c>
 8006d2c:	a10a      	add	r1, pc, #40	; (adr r1, 8006d58 <scalbn+0xe0>)
 8006d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0b8      	beq.n	8006ca8 <scalbn+0x30>
 8006d36:	a10e      	add	r1, pc, #56	; (adr r1, 8006d70 <scalbn+0xf8>)
 8006d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d3c:	e7b4      	b.n	8006ca8 <scalbn+0x30>
 8006d3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d42:	3236      	adds	r2, #54	; 0x36
 8006d44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <scalbn+0x108>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	e7e8      	b.n	8006d26 <scalbn+0xae>
 8006d54:	f3af 8000 	nop.w
 8006d58:	c2f8f359 	.word	0xc2f8f359
 8006d5c:	01a56e1f 	.word	0x01a56e1f
 8006d60:	8800759c 	.word	0x8800759c
 8006d64:	7e37e43c 	.word	0x7e37e43c
 8006d68:	8800759c 	.word	0x8800759c
 8006d6c:	fe37e43c 	.word	0xfe37e43c
 8006d70:	c2f8f359 	.word	0xc2f8f359
 8006d74:	81a56e1f 	.word	0x81a56e1f
 8006d78:	43500000 	.word	0x43500000
 8006d7c:	ffff3cb0 	.word	0xffff3cb0
 8006d80:	3c900000 	.word	0x3c900000

08006d84 <__libc_init_array>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	4d0d      	ldr	r5, [pc, #52]	; (8006dbc <__libc_init_array+0x38>)
 8006d88:	4c0d      	ldr	r4, [pc, #52]	; (8006dc0 <__libc_init_array+0x3c>)
 8006d8a:	1b64      	subs	r4, r4, r5
 8006d8c:	10a4      	asrs	r4, r4, #2
 8006d8e:	2600      	movs	r6, #0
 8006d90:	42a6      	cmp	r6, r4
 8006d92:	d109      	bne.n	8006da8 <__libc_init_array+0x24>
 8006d94:	4d0b      	ldr	r5, [pc, #44]	; (8006dc4 <__libc_init_array+0x40>)
 8006d96:	4c0c      	ldr	r4, [pc, #48]	; (8006dc8 <__libc_init_array+0x44>)
 8006d98:	f000 f820 	bl	8006ddc <_init>
 8006d9c:	1b64      	subs	r4, r4, r5
 8006d9e:	10a4      	asrs	r4, r4, #2
 8006da0:	2600      	movs	r6, #0
 8006da2:	42a6      	cmp	r6, r4
 8006da4:	d105      	bne.n	8006db2 <__libc_init_array+0x2e>
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dac:	4798      	blx	r3
 8006dae:	3601      	adds	r6, #1
 8006db0:	e7ee      	b.n	8006d90 <__libc_init_array+0xc>
 8006db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db6:	4798      	blx	r3
 8006db8:	3601      	adds	r6, #1
 8006dba:	e7f2      	b.n	8006da2 <__libc_init_array+0x1e>
 8006dbc:	08006ff0 	.word	0x08006ff0
 8006dc0:	08006ff0 	.word	0x08006ff0
 8006dc4:	08006ff0 	.word	0x08006ff0
 8006dc8:	08006ff4 	.word	0x08006ff4

08006dcc <memset>:
 8006dcc:	4402      	add	r2, r0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d100      	bne.n	8006dd6 <memset+0xa>
 8006dd4:	4770      	bx	lr
 8006dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dda:	e7f9      	b.n	8006dd0 <memset+0x4>

08006ddc <_init>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr

08006de8 <_fini>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr
