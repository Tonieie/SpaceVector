
SpaceVector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008684  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08008850  08008850  00018850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a48  08008a48  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a50  08008a50  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a54  08008a54  00018a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000010  08008a68  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08008a68  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012874  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ce  00000000  00000000  000328b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00034d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00035e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bb9  00000000  00000000  00036db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143f8  00000000  00000000  0005a969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dffb1  00000000  00000000  0006ed61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ed12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a70  00000000  00000000  0014ed64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008834 	.word	0x08008834

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08008834 	.word	0x08008834

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b974 	b.w	8000ee4 <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9d08      	ldr	r5, [sp, #32]
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	468e      	mov	lr, r1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d14d      	bne.n	8000cbe <__udivmoddi4+0xaa>
 8000c22:	428a      	cmp	r2, r1
 8000c24:	4694      	mov	ip, r2
 8000c26:	d969      	bls.n	8000cfc <__udivmoddi4+0xe8>
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	b152      	cbz	r2, 8000c44 <__udivmoddi4+0x30>
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	f1c2 0120 	rsb	r1, r2, #32
 8000c36:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c42:	4094      	lsls	r4, r2
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	0c21      	lsrs	r1, r4, #16
 8000c4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4e:	fa1f f78c 	uxth.w	r7, ip
 8000c52:	fb08 e316 	mls	r3, r8, r6, lr
 8000c56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5a:	fb06 f107 	mul.w	r1, r6, r7
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x64>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 811f 	bcs.w	8000eac <__udivmoddi4+0x298>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 811c 	bls.w	8000eac <__udivmoddi4+0x298>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 f707 	mul.w	r7, r0, r7
 8000c8c:	42a7      	cmp	r7, r4
 8000c8e:	d90a      	bls.n	8000ca6 <__udivmoddi4+0x92>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c98:	f080 810a 	bcs.w	8000eb0 <__udivmoddi4+0x29c>
 8000c9c:	42a7      	cmp	r7, r4
 8000c9e:	f240 8107 	bls.w	8000eb0 <__udivmoddi4+0x29c>
 8000ca2:	4464      	add	r4, ip
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	1be4      	subs	r4, r4, r7
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa4>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xc2>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	f000 80ef 	beq.w	8000ea6 <__udivmoddi4+0x292>
 8000cc8:	2600      	movs	r6, #0
 8000cca:	e9c5 0100 	strd	r0, r1, [r5]
 8000cce:	4630      	mov	r0, r6
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f683 	clz	r6, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d14a      	bne.n	8000d74 <__udivmoddi4+0x160>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd4>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80f9 	bhi.w	8000eda <__udivmoddi4+0x2c6>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	469e      	mov	lr, r3
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa4>
 8000cf6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa4>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xec>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 8092 	bne.w	8000e2e <__udivmoddi4+0x21a>
 8000d0a:	eba1 010c 	sub.w	r1, r1, ip
 8000d0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d12:	fa1f fe8c 	uxth.w	lr, ip
 8000d16:	2601      	movs	r6, #1
 8000d18:	0c20      	lsrs	r0, r4, #16
 8000d1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000d22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d26:	fb0e f003 	mul.w	r0, lr, r3
 8000d2a:	4288      	cmp	r0, r1
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x12c>
 8000d2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x12a>
 8000d38:	4288      	cmp	r0, r1
 8000d3a:	f200 80cb 	bhi.w	8000ed4 <__udivmoddi4+0x2c0>
 8000d3e:	4643      	mov	r3, r8
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d48:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d50:	fb0e fe00 	mul.w	lr, lr, r0
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x156>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d60:	d202      	bcs.n	8000d68 <__udivmoddi4+0x154>
 8000d62:	45a6      	cmp	lr, r4
 8000d64:	f200 80bb 	bhi.w	8000ede <__udivmoddi4+0x2ca>
 8000d68:	4608      	mov	r0, r1
 8000d6a:	eba4 040e 	sub.w	r4, r4, lr
 8000d6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x9a>
 8000d74:	f1c6 0720 	rsb	r7, r6, #32
 8000d78:	40b3      	lsls	r3, r6
 8000d7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d82:	fa20 f407 	lsr.w	r4, r0, r7
 8000d86:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8a:	431c      	orrs	r4, r3
 8000d8c:	40f9      	lsrs	r1, r7
 8000d8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d92:	fa00 f306 	lsl.w	r3, r0, r6
 8000d96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9a:	0c20      	lsrs	r0, r4, #16
 8000d9c:	fa1f fe8c 	uxth.w	lr, ip
 8000da0:	fb09 1118 	mls	r1, r9, r8, r1
 8000da4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da8:	fb08 f00e 	mul.w	r0, r8, lr
 8000dac:	4288      	cmp	r0, r1
 8000dae:	fa02 f206 	lsl.w	r2, r2, r6
 8000db2:	d90b      	bls.n	8000dcc <__udivmoddi4+0x1b8>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dbc:	f080 8088 	bcs.w	8000ed0 <__udivmoddi4+0x2bc>
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	f240 8085 	bls.w	8000ed0 <__udivmoddi4+0x2bc>
 8000dc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dca:	4461      	add	r1, ip
 8000dcc:	1a09      	subs	r1, r1, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ddc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de0:	458e      	cmp	lr, r1
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1e2>
 8000de4:	eb1c 0101 	adds.w	r1, ip, r1
 8000de8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dec:	d26c      	bcs.n	8000ec8 <__udivmoddi4+0x2b4>
 8000dee:	458e      	cmp	lr, r1
 8000df0:	d96a      	bls.n	8000ec8 <__udivmoddi4+0x2b4>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4461      	add	r1, ip
 8000df6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfe:	eba1 010e 	sub.w	r1, r1, lr
 8000e02:	42a1      	cmp	r1, r4
 8000e04:	46c8      	mov	r8, r9
 8000e06:	46a6      	mov	lr, r4
 8000e08:	d356      	bcc.n	8000eb8 <__udivmoddi4+0x2a4>
 8000e0a:	d053      	beq.n	8000eb4 <__udivmoddi4+0x2a0>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x212>
 8000e0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e12:	eb61 010e 	sbc.w	r1, r1, lr
 8000e16:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1e:	40f1      	lsrs	r1, r6
 8000e20:	431f      	orrs	r7, r3
 8000e22:	e9c5 7100 	strd	r7, r1, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1c2 0320 	rsb	r3, r2, #32
 8000e32:	40d8      	lsrs	r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	4301      	orrs	r1, r0
 8000e40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e44:	fa1f fe8c 	uxth.w	lr, ip
 8000e48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e50:	0c0b      	lsrs	r3, r1, #16
 8000e52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e56:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5a:	429e      	cmp	r6, r3
 8000e5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x260>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6a:	d22f      	bcs.n	8000ecc <__udivmoddi4+0x2b8>
 8000e6c:	429e      	cmp	r6, r3
 8000e6e:	d92d      	bls.n	8000ecc <__udivmoddi4+0x2b8>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1b9b      	subs	r3, r3, r6
 8000e76:	b289      	uxth	r1, r1
 8000e78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb06 f30e 	mul.w	r3, r6, lr
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x28a>
 8000e8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e94:	d216      	bcs.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d914      	bls.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e9a:	3e02      	subs	r6, #2
 8000e9c:	4461      	add	r1, ip
 8000e9e:	1ac9      	subs	r1, r1, r3
 8000ea0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea4:	e738      	b.n	8000d18 <__udivmoddi4+0x104>
 8000ea6:	462e      	mov	r6, r5
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	e705      	b.n	8000cb8 <__udivmoddi4+0xa4>
 8000eac:	4606      	mov	r6, r0
 8000eae:	e6e3      	b.n	8000c78 <__udivmoddi4+0x64>
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	e6f8      	b.n	8000ca6 <__udivmoddi4+0x92>
 8000eb4:	454b      	cmp	r3, r9
 8000eb6:	d2a9      	bcs.n	8000e0c <__udivmoddi4+0x1f8>
 8000eb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ebc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7a3      	b.n	8000e0c <__udivmoddi4+0x1f8>
 8000ec4:	4646      	mov	r6, r8
 8000ec6:	e7ea      	b.n	8000e9e <__udivmoddi4+0x28a>
 8000ec8:	4620      	mov	r0, r4
 8000eca:	e794      	b.n	8000df6 <__udivmoddi4+0x1e2>
 8000ecc:	4640      	mov	r0, r8
 8000ece:	e7d1      	b.n	8000e74 <__udivmoddi4+0x260>
 8000ed0:	46d0      	mov	r8, sl
 8000ed2:	e77b      	b.n	8000dcc <__udivmoddi4+0x1b8>
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	4461      	add	r1, ip
 8000ed8:	e732      	b.n	8000d40 <__udivmoddi4+0x12c>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e709      	b.n	8000cf2 <__udivmoddi4+0xde>
 8000ede:	4464      	add	r4, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e742      	b.n	8000d6a <__udivmoddi4+0x156>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
void delay_us(uint16_t us);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&i_ph1, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4925      	ldr	r1, [pc, #148]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ef4:	4825      	ldr	r0, [pc, #148]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ef6:	f001 fc95 	bl	8002824 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&i_ph2, 1);
 8000efa:	2201      	movs	r2, #1
 8000efc:	4924      	ldr	r1, [pc, #144]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000efe:	4825      	ldr	r0, [pc, #148]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f00:	f001 fc90 	bl	8002824 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&i_ph3, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	4924      	ldr	r1, [pc, #144]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f08:	4824      	ldr	r0, [pc, #144]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f0a:	f001 fc8b 	bl	8002824 <HAL_ADC_Start_DMA>
	TIM1->CCR1 = Va*2598;
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f14:	a31a      	add	r3, pc, #104	; (adr r3, 8000f80 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	f7ff fb31 	bl	8000580 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4c20      	ldr	r4, [pc, #128]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f7ff fdec 	bl	8000b04 <__aeabi_d2uiz>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = Vb*2598;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f36:	a312      	add	r3, pc, #72	; (adr r3, 8000f80 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb20 	bl	8000580 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4c17      	ldr	r4, [pc, #92]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fddb 	bl	8000b04 <__aeabi_d2uiz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = Vc*2598;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f58:	a309      	add	r3, pc, #36	; (adr r3, 8000f80 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	f7ff fb0f 	bl	8000580 <__aeabi_dmul>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4c0f      	ldr	r4, [pc, #60]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fdca 	bl	8000b04 <__aeabi_d2uiz>
 8000f70:	4603      	mov	r3, r0
 8000f72:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd90      	pop	{r4, r7, pc}
 8000f7c:	f3af 8000 	nop.w
 8000f80:	00000000 	.word	0x00000000
 8000f84:	40a44c00 	.word	0x40a44c00
 8000f88:	20000420 	.word	0x20000420
 8000f8c:	2000002c 	.word	0x2000002c
 8000f90:	20000422 	.word	0x20000422
 8000f94:	20000074 	.word	0x20000074
 8000f98:	20000424 	.word	0x20000424
 8000f9c:	200000bc 	.word	0x200000bc
 8000fa0:	20000408 	.word	0x20000408
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	20000410 	.word	0x20000410
 8000fac:	20000418 	.word	0x20000418

08000fb0 <HAL_SPI_RxCpltCallback>:
//		adc_done = 0;
//	}
//}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
//	tmp_angle = ((enc_data[0] & 0b00111111) << 8) | enc_data[1];
//	tmp_angle += 1;
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_SPI_TxRxCpltCallback>:
//		HAL_SPI_TransmitReceive_IT(&hspi1, READ_ENC_BUFF, enc_data, 2);
//	}
//}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10e      	bne.n	8000ff4 <HAL_SPI_TxRxCpltCallback+0x30>
	{
		tmp_angle = ((enc_data[0] & 0b00111111) << 8) | enc_data[1];
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_SPI_TxRxCpltCallback+0x40>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <HAL_SPI_TxRxCpltCallback+0x40>)
 8000fe6:	785b      	ldrb	r3, [r3, #1]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_SPI_TxRxCpltCallback+0x44>)
 8000ff2:	801a      	strh	r2, [r3, #0]
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40013000 	.word	0x40013000
 8001004:	20000428 	.word	0x20000428
 8001008:	20000430 	.word	0x20000430

0800100c <delay_us>:
	i_dqs->ds = (2*i_ph->a - i_ph->b - i_ph->c)/3;
	i_dqs->qs = (i_ph->b - i_ph->c)/sqrt(3);
}

void delay_us(uint16_t us)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
	htim10.Instance->CNT = 0;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <delay_us+0x30>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim10.Instance->CNT < us);
 800101e:	bf00      	nop
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <delay_us+0x30>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3f9      	bcc.n	8001020 <delay_us+0x14>
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000037c 	.word	0x2000037c

08001040 <startEncRead>:

void startEncRead()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENC_CS_GPIO_Port, ENC_CS_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <startEncRead+0x40>)
 800104c:	f002 fe70 	bl	8003d30 <HAL_GPIO_WritePin>
	delay_us(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff ffdb 	bl	800100c <delay_us>
	HAL_GPIO_WritePin(ENC_CS_GPIO_Port, ENC_CS_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 7100 	mov.w	r1, #512	; 0x200
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <startEncRead+0x40>)
 800105e:	f002 fe67 	bl	8003d30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, READ_ENC_BUFF, 2, 10);
 8001062:	230a      	movs	r3, #10
 8001064:	2202      	movs	r2, #2
 8001066:	4907      	ldr	r1, [pc, #28]	; (8001084 <startEncRead+0x44>)
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <startEncRead+0x48>)
 800106a:	f003 fd3c 	bl	8004ae6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ENC_CS_GPIO_Port, ENC_CS_Pin, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <startEncRead+0x40>)
 8001076:	f002 fe5b 	bl	8003d30 <HAL_GPIO_WritePin>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40020400 	.word	0x40020400
 8001084:	20000000 	.word	0x20000000
 8001088:	20000224 	.word	0x20000224

0800108c <readEnc>:

void readEnc()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENC_CS_GPIO_Port, ENC_CS_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <readEnc+0x34>)
 8001098:	f002 fe4a 	bl	8003d30 <HAL_GPIO_WritePin>
	delay_us(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff ffb5 	bl	800100c <delay_us>
	HAL_GPIO_WritePin(ENC_CS_GPIO_Port, ENC_CS_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <readEnc+0x34>)
 80010aa:	f002 fe41 	bl	8003d30 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi1, READ_ENC_BUFF, enc_data, 2);
 80010ae:	2302      	movs	r3, #2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <readEnc+0x38>)
 80010b2:	4905      	ldr	r1, [pc, #20]	; (80010c8 <readEnc+0x3c>)
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <readEnc+0x40>)
 80010b6:	f003 fe53 	bl	8004d60 <HAL_SPI_TransmitReceive_IT>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020400 	.word	0x40020400
 80010c4:	20000428 	.word	0x20000428
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000224 	.word	0x20000224

080010d0 <getElecAngle>:

void getElecAngle()
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
	int16_t _tmp = tmp_angle - 2015;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <getElecAngle+0x70>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	f2a3 73df 	subw	r3, r3, #2015	; 0x7df
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	80fb      	strh	r3, [r7, #6]
	while( _tmp < 0)
 80010e4:	e004      	b.n	80010f0 <getElecAngle+0x20>
		_tmp += 1170;
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	f203 4392 	addw	r3, r3, #1170	; 0x492
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	80fb      	strh	r3, [r7, #6]
	while( _tmp < 0)
 80010f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	dbf6      	blt.n	80010e6 <getElecAngle+0x16>

	elec_angle = (_tmp% 1170) * 360.0f/1170.0f;
 80010f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <getElecAngle+0x74>)
 80010fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001102:	441a      	add	r2, r3
 8001104:	1291      	asrs	r1, r2, #10
 8001106:	17da      	asrs	r2, r3, #31
 8001108:	1a8a      	subs	r2, r1, r2
 800110a:	f240 4192 	movw	r1, #1170	; 0x492
 800110e:	fb01 f202 	mul.w	r2, r1, r2
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001148 <getElecAngle+0x78>
 8001122:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001126:	eddf 6a09 	vldr	s13, [pc, #36]	; 800114c <getElecAngle+0x7c>
 800112a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <getElecAngle+0x80>)
 8001130:	edc3 7a00 	vstr	s15, [r3]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20000430 	.word	0x20000430
 8001144:	e00e00e1 	.word	0xe00e00e1
 8001148:	43b40000 	.word	0x43b40000
 800114c:	44924000 	.word	0x44924000
 8001150:	2000042c 	.word	0x2000042c
 8001154:	00000000 	.word	0x00000000

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f001 fa87 	bl	8002670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001162:	f000 f86f 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001166:	f000 fba3 	bl	80018b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800116a:	f000 fa3f 	bl	80015ec <MX_TIM1_Init>
  MX_SPI2_Init();
 800116e:	f000 fa07 	bl	8001580 <MX_SPI2_Init>
  MX_DMA_Init();
 8001172:	f000 fb65 	bl	8001840 <MX_DMA_Init>
  MX_ADC3_Init();
 8001176:	f000 f97b 	bl	8001470 <MX_ADC3_Init>
  MX_ADC2_Init();
 800117a:	f000 f927 	bl	80013cc <MX_ADC2_Init>
  MX_ADC1_Init();
 800117e:	f000 f8d3 	bl	8001328 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001182:	f000 fb33 	bl	80017ec <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001186:	f000 f9c5 	bl	8001514 <MX_SPI1_Init>
  MX_TIM10_Init();
 800118a:	f000 fae5 	bl	8001758 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800118e:	4828      	ldr	r0, [pc, #160]	; (8001230 <main+0xd8>)
 8001190:	f004 fa50 	bl	8005634 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim10);
 8001194:	4827      	ldr	r0, [pc, #156]	; (8001234 <main+0xdc>)
 8001196:	f004 f9e5 	bl	8005564 <HAL_TIM_Base_Start>
  TIM1->RCR = 1;
 800119a:	4b27      	ldr	r3, [pc, #156]	; (8001238 <main+0xe0>)
 800119c:	2201      	movs	r2, #1
 800119e:	631a      	str	r2, [r3, #48]	; 0x30

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011a0:	2100      	movs	r1, #0
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <main+0xd8>)
 80011a4:	f004 fb68 	bl	8005878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011a8:	2104      	movs	r1, #4
 80011aa:	4821      	ldr	r0, [pc, #132]	; (8001230 <main+0xd8>)
 80011ac:	f004 fb64 	bl	8005878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011b0:	2108      	movs	r1, #8
 80011b2:	481f      	ldr	r0, [pc, #124]	; (8001230 <main+0xd8>)
 80011b4:	f004 fb60 	bl	8005878 <HAL_TIM_PWM_Start>

  setMosfet();
 80011b8:	f000 fc40 	bl	8001a3c <setMosfet>
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	481e      	ldr	r0, [pc, #120]	; (800123c <main+0xe4>)
 80011c2:	f002 fdb5 	bl	8003d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(N_BRAKE_GPIO_Port, N_BRAKE_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011cc:	481b      	ldr	r0, [pc, #108]	; (800123c <main+0xe4>)
 80011ce:	f002 fdaf 	bl	8003d30 <HAL_GPIO_WritePin>


  HAL_Delay(500);
 80011d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d6:	f001 fabd 	bl	8002754 <HAL_Delay>
//  SpaceVector(2.5, 0);
//  readEnc();
  startEncRead();
 80011da:	f7ff ff31 	bl	8001040 <startEncRead>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(float angle = 0.0f; angle < 360; angle +=1.0f){
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	e014      	b.n	8001210 <main+0xb8>
		  readEnc();
 80011e6:	f7ff ff51 	bl	800108c <readEnc>
		  getElecAngle();
 80011ea:	f7ff ff71 	bl	80010d0 <getElecAngle>
		  SpaceVector(2.5f, angle);
 80011ee:	ed97 1a01 	vldr	s2, [r7, #4]
 80011f2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8001228 <main+0xd0>
 80011f6:	f000 fccb 	bl	8001b90 <SpaceVector>
		  delay_us(10);
 80011fa:	200a      	movs	r0, #10
 80011fc:	f7ff ff06 	bl	800100c <delay_us>
	  for(float angle = 0.0f; angle < 360; angle +=1.0f){
 8001200:	edd7 7a01 	vldr	s15, [r7, #4]
 8001204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800120c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001210:	edd7 7a01 	vldr	s15, [r7, #4]
 8001214:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001240 <main+0xe8>
 8001218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	d4e1      	bmi.n	80011e6 <main+0x8e>
 8001222:	e7dc      	b.n	80011de <main+0x86>
 8001224:	f3af 8000 	nop.w
 8001228:	00000000 	.word	0x00000000
 800122c:	40040000 	.word	0x40040000
 8001230:	20000334 	.word	0x20000334
 8001234:	2000037c 	.word	0x2000037c
 8001238:	40010000 	.word	0x40010000
 800123c:	40020800 	.word	0x40020800
 8001240:	43b40000 	.word	0x43b40000

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	2234      	movs	r2, #52	; 0x34
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fae6 	bl	8008824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <SystemClock_Config+0xdc>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a2b      	ldr	r2, [pc, #172]	; (8001320 <SystemClock_Config+0xdc>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <SystemClock_Config+0xdc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	4b26      	ldr	r3, [pc, #152]	; (8001324 <SystemClock_Config+0xe0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a25      	ldr	r2, [pc, #148]	; (8001324 <SystemClock_Config+0xe0>)
 800128e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <SystemClock_Config+0xe0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a8:	2310      	movs	r3, #16
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ac:	2302      	movs	r3, #2
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012b4:	2308      	movs	r3, #8
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012b8:	23b4      	movs	r3, #180	; 0xb4
 80012ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012bc:	2302      	movs	r3, #2
 80012be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 f8e3 	bl	8004498 <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012d8:	f000 fe24 	bl	8001f24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012dc:	f002 fd42 	bl	8003d64 <HAL_PWREx_EnableOverDrive>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012e6:	f000 fe1d 	bl	8001f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ea:	230f      	movs	r3, #15
 80012ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ee:	2302      	movs	r3, #2
 80012f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001300:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	2105      	movs	r1, #5
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fd7b 	bl	8003e04 <HAL_RCC_ClockConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001314:	f000 fe06 	bl	8001f24 <Error_Handler>
  }
}
 8001318:	bf00      	nop
 800131a:	3750      	adds	r7, #80	; 0x50
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40007000 	.word	0x40007000

08001328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <MX_ADC1_Init+0x98>)
 800133c:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <MX_ADC1_Init+0x9c>)
 800133e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <MX_ADC1_Init+0x98>)
 8001342:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001346:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_ADC1_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <MX_ADC1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_ADC1_Init+0x98>)
 8001356:	2200      	movs	r2, #0
 8001358:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <MX_ADC1_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <MX_ADC1_Init+0x98>)
 8001364:	2200      	movs	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <MX_ADC1_Init+0x98>)
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <MX_ADC1_Init+0xa0>)
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_ADC1_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_ADC1_Init+0x98>)
 8001376:	2201      	movs	r2, #1
 8001378:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_ADC1_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_ADC1_Init+0x98>)
 8001384:	2201      	movs	r2, #1
 8001386:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <MX_ADC1_Init+0x98>)
 800138a:	f001 fa07 	bl	800279c <HAL_ADC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001394:	f000 fdc6 	bl	8001f24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001398:	230b      	movs	r3, #11
 800139a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800139c:	2301      	movs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_ADC1_Init+0x98>)
 80013aa:	f001 fb69 	bl	8002a80 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013b4:	f000 fdb6 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2000002c 	.word	0x2000002c
 80013c4:	40012000 	.word	0x40012000
 80013c8:	0f000001 	.word	0x0f000001

080013cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_ADC2_Init+0x98>)
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <MX_ADC2_Init+0x9c>)
 80013e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_ADC2_Init+0x98>)
 80013e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_ADC2_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_ADC2_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_ADC2_Init+0x98>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_ADC2_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_ADC2_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_ADC2_Init+0x98>)
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <MX_ADC2_Init+0xa0>)
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_ADC2_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_ADC2_Init+0x98>)
 800141a:	2201      	movs	r2, #1
 800141c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_ADC2_Init+0x98>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_ADC2_Init+0x98>)
 8001428:	2201      	movs	r2, #1
 800142a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_ADC2_Init+0x98>)
 800142e:	f001 f9b5 	bl	800279c <HAL_ADC_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001438:	f000 fd74 	bl	8001f24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800143c:	230c      	movs	r3, #12
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001440:	2301      	movs	r3, #1
 8001442:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_ADC2_Init+0x98>)
 800144e:	f001 fb17 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001458:	f000 fd64 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000074 	.word	0x20000074
 8001468:	40012100 	.word	0x40012100
 800146c:	0f000001 	.word	0x0f000001

08001470 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_ADC3_Init+0x98>)
 8001484:	4a21      	ldr	r2, [pc, #132]	; (800150c <MX_ADC3_Init+0x9c>)
 8001486:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_ADC3_Init+0x98>)
 800148a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800148e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <MX_ADC3_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_ADC3_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_ADC3_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_ADC3_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_ADC3_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <MX_ADC3_Init+0x98>)
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <MX_ADC3_Init+0xa0>)
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_ADC3_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_ADC3_Init+0x98>)
 80014be:	2201      	movs	r2, #1
 80014c0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_ADC3_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_ADC3_Init+0x98>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_ADC3_Init+0x98>)
 80014d2:	f001 f963 	bl	800279c <HAL_ADC_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80014dc:	f000 fd22 	bl	8001f24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80014e0:	230d      	movs	r3, #13
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_ADC3_Init+0x98>)
 80014f2:	f001 fac5 	bl	8002a80 <HAL_ADC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80014fc:	f000 fd12 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200000bc 	.word	0x200000bc
 800150c:	40012200 	.word	0x40012200
 8001510:	0f000001 	.word	0x0f000001

08001514 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_SPI1_Init+0x64>)
 800151a:	4a18      	ldr	r2, [pc, #96]	; (800157c <MX_SPI1_Init+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_SPI1_Init+0x64>)
 8001520:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001524:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_SPI1_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_SPI1_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_SPI1_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_SPI1_Init+0x64>)
 800153a:	2201      	movs	r2, #1
 800153c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_SPI1_Init+0x64>)
 8001540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001544:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_SPI1_Init+0x64>)
 8001548:	2228      	movs	r2, #40	; 0x28
 800154a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MX_SPI1_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_SPI1_Init+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <MX_SPI1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_SPI1_Init+0x64>)
 8001560:	220a      	movs	r2, #10
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_SPI1_Init+0x64>)
 8001566:	f003 fa35 	bl	80049d4 <HAL_SPI_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001570:	f000 fcd8 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000224 	.word	0x20000224
 800157c:	40013000 	.word	0x40013000

08001580 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_SPI2_Init+0x64>)
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <MX_SPI2_Init+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_SPI2_Init+0x64>)
 800158c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001590:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_SPI2_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_SPI2_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_SPI2_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_SPI2_Init+0x64>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_SPI2_Init+0x64>)
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_SPI2_Init+0x64>)
 80015b4:	2220      	movs	r2, #32
 80015b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <MX_SPI2_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_SPI2_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <MX_SPI2_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_SPI2_Init+0x64>)
 80015cc:	220a      	movs	r2, #10
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_SPI2_Init+0x64>)
 80015d2:	f003 f9ff 	bl	80049d4 <HAL_SPI_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015dc:	f000 fca2 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000027c 	.word	0x2000027c
 80015e8:	40003800 	.word	0x40003800

080015ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b096      	sub	sp, #88	; 0x58
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2220      	movs	r2, #32
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f007 f8fd 	bl	8008824 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800162a:	4b49      	ldr	r3, [pc, #292]	; (8001750 <MX_TIM1_Init+0x164>)
 800162c:	4a49      	ldr	r2, [pc, #292]	; (8001754 <MX_TIM1_Init+0x168>)
 800162e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001630:	4b47      	ldr	r3, [pc, #284]	; (8001750 <MX_TIM1_Init+0x164>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001636:	4b46      	ldr	r3, [pc, #280]	; (8001750 <MX_TIM1_Init+0x164>)
 8001638:	2220      	movs	r2, #32
 800163a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4499;
 800163c:	4b44      	ldr	r3, [pc, #272]	; (8001750 <MX_TIM1_Init+0x164>)
 800163e:	f241 1293 	movw	r2, #4499	; 0x1193
 8001642:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b42      	ldr	r3, [pc, #264]	; (8001750 <MX_TIM1_Init+0x164>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <MX_TIM1_Init+0x164>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001650:	483f      	ldr	r0, [pc, #252]	; (8001750 <MX_TIM1_Init+0x164>)
 8001652:	f003 ff37 	bl	80054c4 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800165c:	f000 fc62 	bl	8001f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800166a:	4619      	mov	r1, r3
 800166c:	4838      	ldr	r0, [pc, #224]	; (8001750 <MX_TIM1_Init+0x164>)
 800166e:	f004 fbf1 	bl	8005e54 <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001678:	f000 fc54 	bl	8001f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800167c:	4834      	ldr	r0, [pc, #208]	; (8001750 <MX_TIM1_Init+0x164>)
 800167e:	f004 f8a2 	bl	80057c6 <HAL_TIM_PWM_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001688:	f000 fc4c 	bl	8001f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001694:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001698:	4619      	mov	r1, r3
 800169a:	482d      	ldr	r0, [pc, #180]	; (8001750 <MX_TIM1_Init+0x164>)
 800169c:	f004 ffda 	bl	8006654 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80016a6:	f000 fc3d 	bl	8001f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b6:	2300      	movs	r3, #0
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	2200      	movs	r2, #0
 80016cc:	4619      	mov	r1, r3
 80016ce:	4820      	ldr	r0, [pc, #128]	; (8001750 <MX_TIM1_Init+0x164>)
 80016d0:	f004 fafe 	bl	8005cd0 <HAL_TIM_PWM_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80016da:	f000 fc23 	bl	8001f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	2204      	movs	r2, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	481a      	ldr	r0, [pc, #104]	; (8001750 <MX_TIM1_Init+0x164>)
 80016e8:	f004 faf2 	bl	8005cd0 <HAL_TIM_PWM_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80016f2:	f000 fc17 	bl	8001f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	2208      	movs	r2, #8
 80016fc:	4619      	mov	r1, r3
 80016fe:	4814      	ldr	r0, [pc, #80]	; (8001750 <MX_TIM1_Init+0x164>)
 8001700:	f004 fae6 	bl	8005cd0 <HAL_TIM_PWM_ConfigChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 800170a:	f000 fc0b 	bl	8001f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001726:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <MX_TIM1_Init+0x164>)
 8001732:	f005 f80b 	bl	800674c <HAL_TIMEx_ConfigBreakDeadTime>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 800173c:	f000 fbf2 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <MX_TIM1_Init+0x164>)
 8001742:	f000 fe5b 	bl	80023fc <HAL_TIM_MspPostInit>

}
 8001746:	bf00      	nop
 8001748:	3758      	adds	r7, #88	; 0x58
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000334 	.word	0x20000334
 8001754:	40010000 	.word	0x40010000

08001758 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	615a      	str	r2, [r3, #20]
 800176e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <MX_TIM10_Init+0x8c>)
 8001772:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <MX_TIM10_Init+0x90>)
 8001774:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 180-1;
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_TIM10_Init+0x8c>)
 8001778:	22b3      	movs	r2, #179	; 0xb3
 800177a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <MX_TIM10_Init+0x8c>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_TIM10_Init+0x8c>)
 8001784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001788:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_TIM10_Init+0x8c>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_TIM10_Init+0x8c>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001796:	4813      	ldr	r0, [pc, #76]	; (80017e4 <MX_TIM10_Init+0x8c>)
 8001798:	f003 fe94 	bl	80054c4 <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80017a2:	f000 fbbf 	bl	8001f24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80017a6:	480f      	ldr	r0, [pc, #60]	; (80017e4 <MX_TIM10_Init+0x8c>)
 80017a8:	f003 ffb4 	bl	8005714 <HAL_TIM_OC_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80017b2:	f000 fbb7 	bl	8001f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_TIM10_Init+0x8c>)
 80017ce:	f004 fa23 	bl	8005c18 <HAL_TIM_OC_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80017d8:	f000 fba4 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000037c 	.word	0x2000037c
 80017e8:	40014400 	.word	0x40014400

080017ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_USART2_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001824:	f004 fff8 	bl	8006818 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f000 fb79 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200003c4 	.word	0x200003c4
 800183c:	40004400 	.word	0x40004400

08001840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_DMA_Init+0x6c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <MX_DMA_Init+0x6c>)
 8001850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_DMA_Init+0x6c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2038      	movs	r0, #56	; 0x38
 8001868:	f001 fc95 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800186c:	2038      	movs	r0, #56	; 0x38
 800186e:	f001 fcae 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2039      	movs	r0, #57	; 0x39
 8001878:	f001 fc8d 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800187c:	2039      	movs	r0, #57	; 0x39
 800187e:	f001 fca6 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	203a      	movs	r0, #58	; 0x3a
 8001888:	f001 fc85 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800188c:	203a      	movs	r0, #58	; 0x3a
 800188e:	f001 fc9e 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	203c      	movs	r0, #60	; 0x3c
 8001898:	f001 fc7d 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800189c:	203c      	movs	r0, #60	; 0x3c
 800189e:	f001 fc96 	bl	80031ce <HAL_NVIC_EnableIRQ>

}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b40      	ldr	r3, [pc, #256]	; (80019cc <MX_GPIO_Init+0x11c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a3f      	ldr	r2, [pc, #252]	; (80019cc <MX_GPIO_Init+0x11c>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <MX_GPIO_Init+0x11c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <MX_GPIO_Init+0x11c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a38      	ldr	r2, [pc, #224]	; (80019cc <MX_GPIO_Init+0x11c>)
 80018ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b36      	ldr	r3, [pc, #216]	; (80019cc <MX_GPIO_Init+0x11c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	4b32      	ldr	r3, [pc, #200]	; (80019cc <MX_GPIO_Init+0x11c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a31      	ldr	r2, [pc, #196]	; (80019cc <MX_GPIO_Init+0x11c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <MX_GPIO_Init+0x11c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <MX_GPIO_Init+0x11c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a2a      	ldr	r2, [pc, #168]	; (80019cc <MX_GPIO_Init+0x11c>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <MX_GPIO_Init+0x11c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|GPIO_PIN_8|ENC_CS_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800193c:	4824      	ldr	r0, [pc, #144]	; (80019d0 <MX_GPIO_Init+0x120>)
 800193e:	f002 f9f7 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVE_EN_Pin|N_BRAKE_Pin|IN_LX_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001948:	4822      	ldr	r0, [pc, #136]	; (80019d4 <MX_GPIO_Init+0x124>)
 800194a:	f002 f9f1 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001954:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	481b      	ldr	r0, [pc, #108]	; (80019d4 <MX_GPIO_Init+0x124>)
 8001966:	f002 f84f 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin ENC_CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin|ENC_CS_Pin;
 800196a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800196e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4813      	ldr	r0, [pc, #76]	; (80019d0 <MX_GPIO_Init+0x120>)
 8001984:	f002 f840 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRIVE_EN_Pin N_BRAKE_Pin IN_LX_Pin */
  GPIO_InitStruct.Pin = DRIVE_EN_Pin|N_BRAKE_Pin|IN_LX_Pin;
 8001988:	f44f 7360 	mov.w	r3, #896	; 0x380
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_GPIO_Init+0x124>)
 80019a2:	f002 f831 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_GPIO_Init+0x120>)
 80019c0:	f002 f822 	bl	8003a08 <HAL_GPIO_Init>

}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	; 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40020800 	.word	0x40020800

080019d8 <SPISend>:

/* USER CODE BEGIN 4 */
void SPISend(uint8_t addr,uint8_t val1,uint8_t val2)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	460b      	mov	r3, r1
 80019e4:	71bb      	strb	r3, [r7, #6]
 80019e6:	4613      	mov	r3, r2
 80019e8:	717b      	strb	r3, [r7, #5]
  HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <SPISend+0x5c>)
 80019f2:	f002 f99d 	bl	8003d30 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80019f6:	1df9      	adds	r1, r7, #7
 80019f8:	2364      	movs	r3, #100	; 0x64
 80019fa:	2201      	movs	r2, #1
 80019fc:	480e      	ldr	r0, [pc, #56]	; (8001a38 <SPISend+0x60>)
 80019fe:	f003 f872 	bl	8004ae6 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val1, 1, 100);
 8001a02:	1db9      	adds	r1, r7, #6
 8001a04:	2364      	movs	r3, #100	; 0x64
 8001a06:	2201      	movs	r2, #1
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <SPISend+0x60>)
 8001a0a:	f003 f86c 	bl	8004ae6 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val2, 1, 100);
 8001a0e:	1d79      	adds	r1, r7, #5
 8001a10:	2364      	movs	r3, #100	; 0x64
 8001a12:	2201      	movs	r2, #1
 8001a14:	4808      	ldr	r0, [pc, #32]	; (8001a38 <SPISend+0x60>)
 8001a16:	f003 f866 	bl	8004ae6 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <SPISend+0x5c>)
 8001a22:	f002 f985 	bl	8003d30 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f000 fe94 	bl	8002754 <HAL_Delay>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40020400 	.word	0x40020400
 8001a38:	2000027c 	.word	0x2000027c

08001a3c <setMosfet>:
//  delayMicroseconds(100);
//  return data;
//}

void setMosfet()
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  SPISend(FAULT_CLR_AddWrite,FAULT_CLR_HValue,FAULT_CLR_LValue);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2090      	movs	r0, #144	; 0x90
 8001a46:	f7ff ffc7 	bl	80019d8 <SPISend>
  SPISend(SUPPLY_CFG_AddWrite,SUPPLY_CFG_HValue,SUPPLY_CFG_LValue);
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	2168      	movs	r1, #104	; 0x68
 8001a4e:	2091      	movs	r0, #145	; 0x91
 8001a50:	f7ff ffc2 	bl	80019d8 <SPISend>
  SPISend(PWM_CFG_AddWrite,PWM_CFG_HValue,PWM_CFG_LValue);
 8001a54:	2201      	movs	r2, #1
 8001a56:	2100      	movs	r1, #0
 8001a58:	2093      	movs	r0, #147	; 0x93
 8001a5a:	f7ff ffbd 	bl	80019d8 <SPISend>
  SPISend(SENSOR_CFG_AddWrite,SENSOR_CFG_HValue,SENSOR_CFG_LValue);
 8001a5e:	2221      	movs	r2, #33	; 0x21
 8001a60:	2100      	movs	r1, #0
 8001a62:	2094      	movs	r0, #148	; 0x94
 8001a64:	f7ff ffb8 	bl	80019d8 <SPISend>
  SPISend(IDRIVE_CFG_AddWrite,IDRIVE_CFG_HValue,IDRIVE_CFG_LValue);
 8001a68:	22bb      	movs	r2, #187	; 0xbb
 8001a6a:	21bb      	movs	r1, #187	; 0xbb
 8001a6c:	2097      	movs	r0, #151	; 0x97
 8001a6e:	f7ff ffb3 	bl	80019d8 <SPISend>
  SPISend(IDRIVE_PRE_CFG_AddWrite,IDRIVE_PRE_CFG_HValue,IDRIVE_PRE_CFG_LValue);
 8001a72:	22bb      	movs	r2, #187	; 0xbb
 8001a74:	2100      	movs	r1, #0
 8001a76:	2098      	movs	r0, #152	; 0x98
 8001a78:	f7ff ffae 	bl	80019d8 <SPISend>
  SPISend(TDRIVE_SRC_CFG_AddWrite,TDRIVE_SRC_CFG_HValue,TDRIVE_SRC_CFG_LValue);
 8001a7c:	2205      	movs	r2, #5
 8001a7e:	2109      	movs	r1, #9
 8001a80:	2099      	movs	r0, #153	; 0x99
 8001a82:	f7ff ffa9 	bl	80019d8 <SPISend>
  SPISend(TDRIVE_SINK_CFG_AddWrite,TDRIVE_SINK_CFG_HValue,TDRIVE_SINK_CFG_LValue);
 8001a86:	220d      	movs	r2, #13
 8001a88:	210d      	movs	r1, #13
 8001a8a:	209a      	movs	r0, #154	; 0x9a
 8001a8c:	f7ff ffa4 	bl	80019d8 <SPISend>
  SPISend(DT_CFG_AddWrite,DT_CFG_HValue,DT_CFG_LValue);
 8001a90:	220a      	movs	r2, #10
 8001a92:	210c      	movs	r1, #12
 8001a94:	209b      	movs	r0, #155	; 0x9b
 8001a96:	f7ff ff9f 	bl	80019d8 <SPISend>
  SPISend(CSAMP_CFG_AddWrite,CSAMP_CFG_HValue,CSAMP_CFG_LValue);
 8001a9a:	2270      	movs	r2, #112	; 0x70
 8001a9c:	21c0      	movs	r1, #192	; 0xc0
 8001a9e:	209d      	movs	r0, #157	; 0x9d
 8001aa0:	f7ff ff9a 	bl	80019d8 <SPISend>
  SPISend(CSAMP2_CFG_AddWrite,CSAMP2_CFG_HValue,CSAMP2_CFG_LValue);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2128      	movs	r1, #40	; 0x28
 8001aa8:	209e      	movs	r0, #158	; 0x9e
 8001aaa:	f7ff ff95 	bl	80019d8 <SPISend>
  HAL_Delay(10);
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f000 fe50 	bl	8002754 <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <Sector>:

int Sector(double ceta){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	ed87 0b00 	vstr	d0, [r7]
	uint8_t _sector = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]
	if(ceta >= 0 && ceta < 360)
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ad2:	f7fe ffdb 	bl	8000a8c <__aeabi_dcmpge>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d023      	beq.n	8001b24 <Sector+0x6c>
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <Sector+0x7c>)
 8001ae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ae6:	f7fe ffbd 	bl	8000a64 <__aeabi_dcmplt>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d019      	beq.n	8001b24 <Sector+0x6c>
		_sector = ceil(ceta/60);
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <Sector+0x80>)
 8001af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001afa:	f7fe fe6b 	bl	80007d4 <__aeabi_ddiv>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	ec43 2b17 	vmov	d7, r2, r3
 8001b06:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0a:	eef0 0a67 	vmov.f32	s1, s15
 8001b0e:	f005 fd97 	bl	8007640 <ceil>
 8001b12:	ec53 2b10 	vmov	r2, r3, d0
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7fe fff3 	bl	8000b04 <__aeabi_d2uiz>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	e001      	b.n	8001b28 <Sector+0x70>
	else
		_sector = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
	return _sector;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40768000 	.word	0x40768000
 8001b38:	404e0000 	.word	0x404e0000
 8001b3c:	00000000 	.word	0x00000000

08001b40 <Convert>:
double Convert(double degree)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	ed87 0b00 	vstr	d0, [r7]
    return (M_PI/180*degree)-M_PI;
 8001b4a:	a30d      	add	r3, pc, #52	; (adr r3, 8001b80 <Convert+0x40>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b54:	f7fe fd14 	bl	8000580 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	a309      	add	r3, pc, #36	; (adr r3, 8001b88 <Convert+0x48>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe fb53 	bl	8000210 <__aeabi_dsub>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b72:	eeb0 0a47 	vmov.f32	s0, s14
 8001b76:	eef0 0a67 	vmov.f32	s1, s15
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	a2529d39 	.word	0xa2529d39
 8001b84:	3f91df46 	.word	0x3f91df46
 8001b88:	54442d18 	.word	0x54442d18
 8001b8c:	400921fb 	.word	0x400921fb

08001b90 <SpaceVector>:
void SpaceVector(double V_ref,float Ceta){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b090      	sub	sp, #64	; 0x40
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b9a:	ed87 1a01 	vstr	s2, [r7, #4]

	double rad=Convert(Ceta);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe fc96 	bl	80004d0 <__aeabi_f2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ec43 2b10 	vmov	d0, r2, r3
 8001bac:	f7ff ffc8 	bl	8001b40 <Convert>
 8001bb0:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	double ts= (V_ref/Vdc)*sqrt(3);//mi*sqrt(3)
 8001bb4:	4bc2      	ldr	r3, [pc, #776]	; (8001ec0 <SpaceVector+0x330>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fc8a 	bl	80004d0 <__aeabi_f2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bc4:	f7fe fe06 	bl	80007d4 <__aeabi_ddiv>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	a3b5      	add	r3, pc, #724	; (adr r3, 8001ea8 <SpaceVector+0x318>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fcd3 	bl	8000580 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int n=Sector(Ceta);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fc74 	bl	80004d0 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	ec43 2b10 	vmov	d0, r2, r3
 8001bf0:	f7ff ff62 	bl	8001ab8 <Sector>
 8001bf4:	62f8      	str	r0, [r7, #44]	; 0x2c
	float t1 = ts*(sin(((float)n*(M_PI/3.0f))-rad));
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c00:	ee17 0a90 	vmov	r0, s15
 8001c04:	f7fe fc64 	bl	80004d0 <__aeabi_f2d>
 8001c08:	a3a9      	add	r3, pc, #676	; (adr r3, 8001eb0 <SpaceVector+0x320>)
 8001c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0e:	f7fe fcb7 	bl	8000580 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c1e:	f7fe faf7 	bl	8000210 <__aeabi_dsub>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	ec43 2b17 	vmov	d7, r2, r3
 8001c2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c2e:	eef0 0a67 	vmov.f32	s1, s15
 8001c32:	f005 fd89 	bl	8007748 <sin>
 8001c36:	ec51 0b10 	vmov	r0, r1, d0
 8001c3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c3e:	f7fe fc9f 	bl	8000580 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe ff7b 	bl	8000b44 <__aeabi_d2f>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
	float t2 = ts*(sin(rad-((float)n-1.0f)/3.0f*M_PI));
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c64:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001c68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c6c:	ee16 0a90 	vmov	r0, s13
 8001c70:	f7fe fc2e 	bl	80004d0 <__aeabi_f2d>
 8001c74:	a390      	add	r3, pc, #576	; (adr r3, 8001eb8 <SpaceVector+0x328>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fc81 	bl	8000580 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c86:	f7fe fac3 	bl	8000210 <__aeabi_dsub>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	ec43 2b17 	vmov	d7, r2, r3
 8001c92:	eeb0 0a47 	vmov.f32	s0, s14
 8001c96:	eef0 0a67 	vmov.f32	s1, s15
 8001c9a:	f005 fd55 	bl	8007748 <sin>
 8001c9e:	ec51 0b10 	vmov	r0, r1, d0
 8001ca2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ca6:	f7fe fc6b 	bl	8000580 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff47 	bl	8000b44 <__aeabi_d2f>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24

	float t0 = ts-(t1+t2);
 8001cba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001cbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	ee17 0a90 	vmov	r0, s15
 8001cca:	f7fe fc01 	bl	80004d0 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001cd6:	f7fe fa9b 	bl	8000210 <__aeabi_dsub>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe ff2f 	bl	8000b44 <__aeabi_d2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	623b      	str	r3, [r7, #32]
	float t120 = t1+t2+(t0/2);
 8001cea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001cee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cf6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cfa:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cfe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	edc7 7a07 	vstr	s15, [r7, #28]
	float t10 = t1+(t0/2);
 8001d0a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d0e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d16:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1e:	edc7 7a06 	vstr	s15, [r7, #24]
	float t20 = t2+(t0/2);
 8001d22:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d26:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d2e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	edc7 7a05 	vstr	s15, [r7, #20]
    // phase A
	switch(n){
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	2b05      	cmp	r3, #5
 8001d40:	f200 80e6 	bhi.w	8001f10 <SpaceVector+0x380>
 8001d44:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <SpaceVector+0x1bc>)
 8001d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4a:	bf00      	nop
 8001d4c:	08001d65 	.word	0x08001d65
 8001d50:	08001da5 	.word	0x08001da5
 8001d54:	08001de5 	.word	0x08001de5
 8001d58:	08001e25 	.word	0x08001e25
 8001d5c:	08001e65 	.word	0x08001e65
 8001d60:	08001ed1 	.word	0x08001ed1
	case 1 :Va=t120;
 8001d64:	69f8      	ldr	r0, [r7, #28]
 8001d66:	f7fe fbb3 	bl	80004d0 <__aeabi_f2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4955      	ldr	r1, [pc, #340]	; (8001ec4 <SpaceVector+0x334>)
 8001d70:	e9c1 2300 	strd	r2, r3, [r1]
			Vb=t20;
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f7fe fbab 	bl	80004d0 <__aeabi_f2d>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4952      	ldr	r1, [pc, #328]	; (8001ec8 <SpaceVector+0x338>)
 8001d80:	e9c1 2300 	strd	r2, r3, [r1]
			Vc=t0/2;//
 8001d84:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d88:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001d8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d90:	ee16 0a90 	vmov	r0, s13
 8001d94:	f7fe fb9c 	bl	80004d0 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	494b      	ldr	r1, [pc, #300]	; (8001ecc <SpaceVector+0x33c>)
 8001d9e:	e9c1 2300 	strd	r2, r3, [r1]
	break;
 8001da2:	e0b5      	b.n	8001f10 <SpaceVector+0x380>
 	case 2 :Va=t10;
 8001da4:	69b8      	ldr	r0, [r7, #24]
 8001da6:	f7fe fb93 	bl	80004d0 <__aeabi_f2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4945      	ldr	r1, [pc, #276]	; (8001ec4 <SpaceVector+0x334>)
 8001db0:	e9c1 2300 	strd	r2, r3, [r1]
 			Vb=t120;
 8001db4:	69f8      	ldr	r0, [r7, #28]
 8001db6:	f7fe fb8b 	bl	80004d0 <__aeabi_f2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4942      	ldr	r1, [pc, #264]	; (8001ec8 <SpaceVector+0x338>)
 8001dc0:	e9c1 2300 	strd	r2, r3, [r1]
 			Vc=t0/2;//
 8001dc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dc8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001dcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dd0:	ee16 0a90 	vmov	r0, s13
 8001dd4:	f7fe fb7c 	bl	80004d0 <__aeabi_f2d>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	493b      	ldr	r1, [pc, #236]	; (8001ecc <SpaceVector+0x33c>)
 8001dde:	e9c1 2300 	strd	r2, r3, [r1]
 	break;
 8001de2:	e095      	b.n	8001f10 <SpaceVector+0x380>
 	case 3 :Va=t0/2;
 8001de4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001de8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001dec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001df0:	ee16 0a90 	vmov	r0, s13
 8001df4:	f7fe fb6c 	bl	80004d0 <__aeabi_f2d>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4931      	ldr	r1, [pc, #196]	; (8001ec4 <SpaceVector+0x334>)
 8001dfe:	e9c1 2300 	strd	r2, r3, [r1]
 			Vb=t120;
 8001e02:	69f8      	ldr	r0, [r7, #28]
 8001e04:	f7fe fb64 	bl	80004d0 <__aeabi_f2d>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	492e      	ldr	r1, [pc, #184]	; (8001ec8 <SpaceVector+0x338>)
 8001e0e:	e9c1 2300 	strd	r2, r3, [r1]
 			Vc=t20;//
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7fe fb5c 	bl	80004d0 <__aeabi_f2d>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	492b      	ldr	r1, [pc, #172]	; (8001ecc <SpaceVector+0x33c>)
 8001e1e:	e9c1 2300 	strd	r2, r3, [r1]
 	break;
 8001e22:	e075      	b.n	8001f10 <SpaceVector+0x380>
 	case 4 :Va=t0/2;
 8001e24:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e28:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001e2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e30:	ee16 0a90 	vmov	r0, s13
 8001e34:	f7fe fb4c 	bl	80004d0 <__aeabi_f2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4921      	ldr	r1, [pc, #132]	; (8001ec4 <SpaceVector+0x334>)
 8001e3e:	e9c1 2300 	strd	r2, r3, [r1]
 			Vb=t10;
 8001e42:	69b8      	ldr	r0, [r7, #24]
 8001e44:	f7fe fb44 	bl	80004d0 <__aeabi_f2d>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	491e      	ldr	r1, [pc, #120]	; (8001ec8 <SpaceVector+0x338>)
 8001e4e:	e9c1 2300 	strd	r2, r3, [r1]
 			Vc=t120;//
 8001e52:	69f8      	ldr	r0, [r7, #28]
 8001e54:	f7fe fb3c 	bl	80004d0 <__aeabi_f2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	491b      	ldr	r1, [pc, #108]	; (8001ecc <SpaceVector+0x33c>)
 8001e5e:	e9c1 2300 	strd	r2, r3, [r1]
 	break;
 8001e62:	e055      	b.n	8001f10 <SpaceVector+0x380>
 	case 5 :Va=t20;
 8001e64:	6978      	ldr	r0, [r7, #20]
 8001e66:	f7fe fb33 	bl	80004d0 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4915      	ldr	r1, [pc, #84]	; (8001ec4 <SpaceVector+0x334>)
 8001e70:	e9c1 2300 	strd	r2, r3, [r1]
 			Vb=t0/2;
 8001e74:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001e7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e80:	ee16 0a90 	vmov	r0, s13
 8001e84:	f7fe fb24 	bl	80004d0 <__aeabi_f2d>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <SpaceVector+0x338>)
 8001e8e:	e9c1 2300 	strd	r2, r3, [r1]
 			Vc=t120;//
 8001e92:	69f8      	ldr	r0, [r7, #28]
 8001e94:	f7fe fb1c 	bl	80004d0 <__aeabi_f2d>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	490b      	ldr	r1, [pc, #44]	; (8001ecc <SpaceVector+0x33c>)
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]
 	break;
 8001ea2:	e035      	b.n	8001f10 <SpaceVector+0x380>
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	e8584caa 	.word	0xe8584caa
 8001eac:	3ffbb67a 	.word	0x3ffbb67a
 8001eb0:	382d7365 	.word	0x382d7365
 8001eb4:	3ff0c152 	.word	0x3ff0c152
 8001eb8:	54442d18 	.word	0x54442d18
 8001ebc:	400921fb 	.word	0x400921fb
 8001ec0:	41c00000 	.word	0x41c00000
 8001ec4:	20000408 	.word	0x20000408
 8001ec8:	20000410 	.word	0x20000410
 8001ecc:	20000418 	.word	0x20000418
 	case 6 :Va=t120;
 8001ed0:	69f8      	ldr	r0, [r7, #28]
 8001ed2:	f7fe fafd 	bl	80004d0 <__aeabi_f2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	490f      	ldr	r1, [pc, #60]	; (8001f18 <SpaceVector+0x388>)
 8001edc:	e9c1 2300 	strd	r2, r3, [r1]
 			Vb=t0/2;
 8001ee0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ee4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ee8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001eec:	ee16 0a90 	vmov	r0, s13
 8001ef0:	f7fe faee 	bl	80004d0 <__aeabi_f2d>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4908      	ldr	r1, [pc, #32]	; (8001f1c <SpaceVector+0x38c>)
 8001efa:	e9c1 2300 	strd	r2, r3, [r1]
 			Vc=t10;//
 8001efe:	69b8      	ldr	r0, [r7, #24]
 8001f00:	f7fe fae6 	bl	80004d0 <__aeabi_f2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4905      	ldr	r1, [pc, #20]	; (8001f20 <SpaceVector+0x390>)
 8001f0a:	e9c1 2300 	strd	r2, r3, [r1]
 	break;
 8001f0e:	bf00      	nop
	}
}
 8001f10:	bf00      	nop
 8001f12:	3740      	adds	r7, #64	; 0x40
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000408 	.word	0x20000408
 8001f1c:	20000410 	.word	0x20000410
 8001f20:	20000418 	.word	0x20000418

08001f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f28:	b672      	cpsid	i
}
 8001f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <Error_Handler+0x8>
	...

08001f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f6e:	2007      	movs	r0, #7
 8001f70:	f001 f906 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a8c      	ldr	r2, [pc, #560]	; (80021d0 <HAL_ADC_MspInit+0x250>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d157      	bne.n	8002052 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
 8001fa6:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a8a      	ldr	r2, [pc, #552]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a83      	ldr	r2, [pc, #524]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	4619      	mov	r1, r3
 8001fec:	487a      	ldr	r0, [pc, #488]	; (80021d8 <HAL_ADC_MspInit+0x258>)
 8001fee:	f001 fd0b 	bl	8003a08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001ff2:	4b7a      	ldr	r3, [pc, #488]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 8001ff4:	4a7a      	ldr	r2, [pc, #488]	; (80021e0 <HAL_ADC_MspInit+0x260>)
 8001ff6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ff8:	4b78      	ldr	r3, [pc, #480]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffe:	4b77      	ldr	r3, [pc, #476]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002004:	4b75      	ldr	r3, [pc, #468]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800200a:	4b74      	ldr	r3, [pc, #464]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 800200c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002010:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002012:	4b72      	ldr	r3, [pc, #456]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 8002014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002018:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800201a:	4b70      	ldr	r3, [pc, #448]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 800201c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002020:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002022:	4b6e      	ldr	r3, [pc, #440]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 8002024:	2200      	movs	r2, #0
 8002026:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002028:	4b6c      	ldr	r3, [pc, #432]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 800202a:	2200      	movs	r2, #0
 800202c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800202e:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 8002030:	2200      	movs	r2, #0
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002034:	4869      	ldr	r0, [pc, #420]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 8002036:	f001 f8e5 	bl	8003204 <HAL_DMA_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002040:	f7ff ff70 	bl	8001f24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a65      	ldr	r2, [pc, #404]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 8002048:	639a      	str	r2, [r3, #56]	; 0x38
 800204a:	4a64      	ldr	r2, [pc, #400]	; (80021dc <HAL_ADC_MspInit+0x25c>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002050:	e0ba      	b.n	80021c8 <HAL_ADC_MspInit+0x248>
  else if(hadc->Instance==ADC2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a63      	ldr	r2, [pc, #396]	; (80021e4 <HAL_ADC_MspInit+0x264>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d158      	bne.n	800210e <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	4a5b      	ldr	r2, [pc, #364]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8002066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206a:	6453      	str	r3, [r2, #68]	; 0x44
 800206c:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	4b55      	ldr	r3, [pc, #340]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6313      	str	r3, [r2, #48]	; 0x30
 8002088:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002094:	2304      	movs	r3, #4
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002098:	2303      	movs	r3, #3
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	4619      	mov	r1, r3
 80020a6:	484c      	ldr	r0, [pc, #304]	; (80021d8 <HAL_ADC_MspInit+0x258>)
 80020a8:	f001 fcae 	bl	8003a08 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80020ac:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020ae:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_ADC_MspInit+0x26c>)
 80020b0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80020b2:	4b4d      	ldr	r3, [pc, #308]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ba:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c0:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80020c6:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020cc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020ce:	4b46      	ldr	r3, [pc, #280]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020d6:	4b44      	ldr	r3, [pc, #272]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020dc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80020de:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80020e4:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ea:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80020f0:	483d      	ldr	r0, [pc, #244]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 80020f2:	f001 f887 	bl	8003204 <HAL_DMA_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_ADC_MspInit+0x180>
      Error_Handler();
 80020fc:	f7ff ff12 	bl	8001f24 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a39      	ldr	r2, [pc, #228]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
 8002106:	4a38      	ldr	r2, [pc, #224]	; (80021e8 <HAL_ADC_MspInit+0x268>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800210c:	e05c      	b.n	80021c8 <HAL_ADC_MspInit+0x248>
  else if(hadc->Instance==ADC3)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a37      	ldr	r2, [pc, #220]	; (80021f0 <HAL_ADC_MspInit+0x270>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d157      	bne.n	80021c8 <HAL_ADC_MspInit+0x248>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8002122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002126:	6453      	str	r3, [r2, #68]	; 0x44
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4a25      	ldr	r2, [pc, #148]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_ADC_MspInit+0x254>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002150:	2308      	movs	r3, #8
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002154:	2303      	movs	r3, #3
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	4619      	mov	r1, r3
 8002162:	481d      	ldr	r0, [pc, #116]	; (80021d8 <HAL_ADC_MspInit+0x258>)
 8002164:	f001 fc50 	bl	8003a08 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 800216a:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <HAL_ADC_MspInit+0x278>)
 800216c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 8002170:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002174:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002176:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 8002184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002188:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 800218c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002190:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 8002194:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002198:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 800219c:	2200      	movs	r2, #0
 800219e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80021ac:	4811      	ldr	r0, [pc, #68]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 80021ae:	f001 f829 	bl	8003204 <HAL_DMA_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_ADC_MspInit+0x23c>
      Error_Handler();
 80021b8:	f7ff feb4 	bl	8001f24 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <HAL_ADC_MspInit+0x274>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021c8:	bf00      	nop
 80021ca:	3738      	adds	r7, #56	; 0x38
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40012000 	.word	0x40012000
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020800 	.word	0x40020800
 80021dc:	20000104 	.word	0x20000104
 80021e0:	40026470 	.word	0x40026470
 80021e4:	40012100 	.word	0x40012100
 80021e8:	20000164 	.word	0x20000164
 80021ec:	40026440 	.word	0x40026440
 80021f0:	40012200 	.word	0x40012200
 80021f4:	200001c4 	.word	0x200001c4
 80021f8:	40026428 	.word	0x40026428

080021fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HAL_SPI_MspInit+0x158>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d163      	bne.n	80022e6 <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a4c      	ldr	r2, [pc, #304]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 8002228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a45      	ldr	r2, [pc, #276]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002256:	23e0      	movs	r3, #224	; 0xe0
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002266:	2305      	movs	r3, #5
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	483a      	ldr	r0, [pc, #232]	; (800235c <HAL_SPI_MspInit+0x160>)
 8002272:	f001 fbc9 	bl	8003a08 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_SPI_MspInit+0x164>)
 8002278:	4a3a      	ldr	r2, [pc, #232]	; (8002364 <HAL_SPI_MspInit+0x168>)
 800227a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800227c:	4b38      	ldr	r3, [pc, #224]	; (8002360 <HAL_SPI_MspInit+0x164>)
 800227e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002282:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002284:	4b36      	ldr	r3, [pc, #216]	; (8002360 <HAL_SPI_MspInit+0x164>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800228a:	4b35      	ldr	r3, [pc, #212]	; (8002360 <HAL_SPI_MspInit+0x164>)
 800228c:	2200      	movs	r2, #0
 800228e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002290:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_SPI_MspInit+0x164>)
 8002292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002296:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002298:	4b31      	ldr	r3, [pc, #196]	; (8002360 <HAL_SPI_MspInit+0x164>)
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800229e:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_SPI_MspInit+0x164>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80022a4:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_SPI_MspInit+0x164>)
 80022a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022ac:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_SPI_MspInit+0x164>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_SPI_MspInit+0x164>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80022b8:	4829      	ldr	r0, [pc, #164]	; (8002360 <HAL_SPI_MspInit+0x164>)
 80022ba:	f000 ffa3 	bl	8003204 <HAL_DMA_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80022c4:	f7ff fe2e 	bl	8001f24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_SPI_MspInit+0x164>)
 80022cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80022ce:	4a24      	ldr	r2, [pc, #144]	; (8002360 <HAL_SPI_MspInit+0x164>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	2023      	movs	r0, #35	; 0x23
 80022da:	f000 ff5c 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80022de:	2023      	movs	r0, #35	; 0x23
 80022e0:	f000 ff75 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022e4:	e031      	b.n	800234a <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <HAL_SPI_MspInit+0x16c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d12c      	bne.n	800234a <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 80022fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	4a10      	ldr	r2, [pc, #64]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	6313      	str	r3, [r2, #48]	; 0x30
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002328:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800233a:	2305      	movs	r3, #5
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	4809      	ldr	r0, [pc, #36]	; (800236c <HAL_SPI_MspInit+0x170>)
 8002346:	f001 fb5f 	bl	8003a08 <HAL_GPIO_Init>
}
 800234a:	bf00      	nop
 800234c:	3730      	adds	r7, #48	; 0x30
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40013000 	.word	0x40013000
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000
 8002360:	200002d4 	.word	0x200002d4
 8002364:	40026410 	.word	0x40026410
 8002368:	40003800 	.word	0x40003800
 800236c:	40020400 	.word	0x40020400

08002370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_TIM_Base_MspInit+0x80>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d116      	bne.n	80023b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_TIM_Base_MspInit+0x84>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_TIM_Base_MspInit+0x84>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_TIM_Base_MspInit+0x84>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	2019      	movs	r0, #25
 80023a4:	f000 fef7 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023a8:	2019      	movs	r0, #25
 80023aa:	f000 ff10 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80023ae:	e01a      	b.n	80023e6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <HAL_TIM_Base_MspInit+0x88>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d115      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_TIM_Base_MspInit+0x84>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <HAL_TIM_Base_MspInit+0x84>)
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_TIM_Base_MspInit+0x84>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2019      	movs	r0, #25
 80023dc:	f000 fedb 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023e0:	2019      	movs	r0, #25
 80023e2:	f000 fef4 	bl	80031ce <HAL_NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40010000 	.word	0x40010000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40014400 	.word	0x40014400

080023fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_TIM_MspPostInit+0x68>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d11e      	bne.n	800245c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_TIM_MspPostInit+0x6c>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a10      	ldr	r2, [pc, #64]	; (8002468 <HAL_TIM_MspPostInit+0x6c>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_TIM_MspPostInit+0x6c>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800243a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800243e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800244c:	2301      	movs	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	4619      	mov	r1, r3
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <HAL_TIM_MspPostInit+0x70>)
 8002458:	f001 fad6 	bl	8003a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800245c:	bf00      	nop
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40010000 	.word	0x40010000
 8002468:	40023800 	.word	0x40023800
 800246c:	40020000 	.word	0x40020000

08002470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_UART_MspInit+0x94>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d133      	bne.n	80024fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_UART_MspInit+0x98>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <HAL_UART_MspInit+0x98>)
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_UART_MspInit+0x98>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_UART_MspInit+0x98>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <HAL_UART_MspInit+0x98>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_UART_MspInit+0x98>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024ca:	230c      	movs	r3, #12
 80024cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d6:	2303      	movs	r3, #3
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024da:	2307      	movs	r3, #7
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	4809      	ldr	r0, [pc, #36]	; (800250c <HAL_UART_MspInit+0x9c>)
 80024e6:	f001 fa8f 	bl	8003a08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	2026      	movs	r0, #38	; 0x26
 80024f0:	f000 fe51 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024f4:	2026      	movs	r0, #38	; 0x26
 80024f6:	f000 fe6a 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3728      	adds	r7, #40	; 0x28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40004400 	.word	0x40004400
 8002508:	40023800 	.word	0x40023800
 800250c:	40020000 	.word	0x40020000

08002510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <NMI_Handler+0x4>

08002516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251a:	e7fe      	b.n	800251a <HardFault_Handler+0x4>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <MemManage_Handler+0x4>

08002522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <BusFault_Handler+0x4>

08002528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <UsageFault_Handler+0x4>

0800252e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800255c:	f000 f8da 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002568:	4803      	ldr	r0, [pc, #12]	; (8002578 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800256a:	f003 fa4d 	bl	8005a08 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800256e:	4803      	ldr	r0, [pc, #12]	; (800257c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002570:	f003 fa4a 	bl	8005a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000334 	.word	0x20000334
 800257c:	2000037c 	.word	0x2000037c

08002580 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <SPI1_IRQHandler+0x10>)
 8002586:	f002 fc7f 	bl	8004e88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000224 	.word	0x20000224

08002594 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <USART2_IRQHandler+0x10>)
 800259a:	f004 f98b 	bl	80068b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200003c4 	.word	0x200003c4

080025a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <DMA2_Stream0_IRQHandler+0x10>)
 80025ae:	f000 ffc1 	bl	8003534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200002d4 	.word	0x200002d4

080025bc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <DMA2_Stream1_IRQHandler+0x10>)
 80025c2:	f000 ffb7 	bl	8003534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200001c4 	.word	0x200001c4

080025d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <DMA2_Stream2_IRQHandler+0x10>)
 80025d6:	f000 ffad 	bl	8003534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000164 	.word	0x20000164

080025e4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <DMA2_Stream4_IRQHandler+0x10>)
 80025ea:	f000 ffa3 	bl	8003534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000104 	.word	0x20000104

080025f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <SystemInit+0x20>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <SystemInit+0x20>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800261c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002620:	480d      	ldr	r0, [pc, #52]	; (8002658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002622:	490e      	ldr	r1, [pc, #56]	; (800265c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002628:	e002      	b.n	8002630 <LoopCopyDataInit>

0800262a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800262c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262e:	3304      	adds	r3, #4

08002630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002634:	d3f9      	bcc.n	800262a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002638:	4c0b      	ldr	r4, [pc, #44]	; (8002668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800263c:	e001      	b.n	8002642 <LoopFillZerobss>

0800263e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002640:	3204      	adds	r2, #4

08002642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002644:	d3fb      	bcc.n	800263e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002646:	f7ff ffd7 	bl	80025f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264a:	f006 f8c7 	bl	80087dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800264e:	f7fe fd83 	bl	8001158 <main>
  bx  lr    
 8002652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800265c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002660:	08008a58 	.word	0x08008a58
  ldr r2, =_sbss
 8002664:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002668:	20000438 	.word	0x20000438

0800266c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800266c:	e7fe      	b.n	800266c <ADC_IRQHandler>
	...

08002670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <HAL_Init+0x40>)
 800267a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_Init+0x40>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_Init+0x40>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f000 fd71 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269e:	2000      	movs	r0, #0
 80026a0:	f000 f808 	bl	80026b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a4:	f7ff fc44 	bl	8001f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_InitTick+0x54>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_InitTick+0x58>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fd89 	bl	80031ea <HAL_SYSTICK_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00e      	b.n	8002700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d80a      	bhi.n	80026fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e8:	2200      	movs	r2, #0
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f000 fd51 	bl	8003196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_InitTick+0x5c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000004 	.word	0x20000004
 800270c:	2000000c 	.word	0x2000000c
 8002710:	20000008 	.word	0x20000008

08002714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_IncTick+0x20>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_IncTick+0x24>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_IncTick+0x24>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	2000000c 	.word	0x2000000c
 8002738:	20000434 	.word	0x20000434

0800273c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_GetTick+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000434 	.word	0x20000434

08002754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff ffee 	bl	800273c <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d005      	beq.n	800277a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_Delay+0x44>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800277a:	bf00      	nop
 800277c:	f7ff ffde 	bl	800273c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	429a      	cmp	r2, r3
 800278a:	d8f7      	bhi.n	800277c <HAL_Delay+0x28>
  {
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000000c 	.word	0x2000000c

0800279c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e033      	b.n	800281a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fbe0 	bl	8001f80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d118      	bne.n	800280c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027e2:	f023 0302 	bic.w	r3, r3, #2
 80027e6:	f043 0202 	orr.w	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa78 	bl	8002ce4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f023 0303 	bic.w	r3, r3, #3
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
 800280a:	e001      	b.n	8002810 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_ADC_Start_DMA+0x1e>
 800283e:	2302      	movs	r3, #2
 8002840:	e0e9      	b.n	8002a16 <HAL_ADC_Start_DMA+0x1f2>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d018      	beq.n	800288a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002868:	4b6d      	ldr	r3, [pc, #436]	; (8002a20 <HAL_ADC_Start_DMA+0x1fc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6d      	ldr	r2, [pc, #436]	; (8002a24 <HAL_ADC_Start_DMA+0x200>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0c9a      	lsrs	r2, r3, #18
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800287c:	e002      	b.n	8002884 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	3b01      	subs	r3, #1
 8002882:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f9      	bne.n	800287e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002898:	d107      	bne.n	80028aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	f040 80a1 	bne.w	80029fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f8:	d106      	bne.n	8002908 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f023 0206 	bic.w	r2, r3, #6
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	645a      	str	r2, [r3, #68]	; 0x44
 8002906:	e002      	b.n	800290e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_ADC_Start_DMA+0x204>)
 8002918:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	4a43      	ldr	r2, [pc, #268]	; (8002a2c <HAL_ADC_Start_DMA+0x208>)
 8002920:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	4a42      	ldr	r2, [pc, #264]	; (8002a30 <HAL_ADC_Start_DMA+0x20c>)
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	4a41      	ldr	r2, [pc, #260]	; (8002a34 <HAL_ADC_Start_DMA+0x210>)
 8002930:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800293a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800294a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	334c      	adds	r3, #76	; 0x4c
 8002966:	4619      	mov	r1, r3
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f000 fcf8 	bl	8003360 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2b00      	cmp	r3, #0
 800297a:	d12a      	bne.n	80029d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2d      	ldr	r2, [pc, #180]	; (8002a38 <HAL_ADC_Start_DMA+0x214>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d015      	beq.n	80029b2 <HAL_ADC_Start_DMA+0x18e>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <HAL_ADC_Start_DMA+0x218>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d105      	bne.n	800299c <HAL_ADC_Start_DMA+0x178>
 8002990:	4b25      	ldr	r3, [pc, #148]	; (8002a28 <HAL_ADC_Start_DMA+0x204>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a27      	ldr	r2, [pc, #156]	; (8002a40 <HAL_ADC_Start_DMA+0x21c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d136      	bne.n	8002a14 <HAL_ADC_Start_DMA+0x1f0>
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_ADC_Start_DMA+0x204>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d130      	bne.n	8002a14 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d129      	bne.n	8002a14 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e020      	b.n	8002a14 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_ADC_Start_DMA+0x214>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d11b      	bne.n	8002a14 <HAL_ADC_Start_DMA+0x1f0>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d114      	bne.n	8002a14 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	e00b      	b.n	8002a14 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f043 0210 	orr.w	r2, r3, #16
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000004 	.word	0x20000004
 8002a24:	431bde83 	.word	0x431bde83
 8002a28:	40012300 	.word	0x40012300
 8002a2c:	08002edd 	.word	0x08002edd
 8002a30:	08002f97 	.word	0x08002f97
 8002a34:	08002fb3 	.word	0x08002fb3
 8002a38:	40012000 	.word	0x40012000
 8002a3c:	40012100 	.word	0x40012100
 8002a40:	40012200 	.word	0x40012200

08002a44 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x1c>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e113      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x244>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d925      	bls.n	8002af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68d9      	ldr	r1, [r3, #12]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b1e      	subs	r3, #30
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	400a      	ands	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68d9      	ldr	r1, [r3, #12]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4403      	add	r3, r0
 8002aea:	3b1e      	subs	r3, #30
 8002aec:	409a      	lsls	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e022      	b.n	8002b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6919      	ldr	r1, [r3, #16]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	400a      	ands	r2, r1
 8002b1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6919      	ldr	r1, [r3, #16]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4403      	add	r3, r0
 8002b34:	409a      	lsls	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d824      	bhi.n	8002b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	3b05      	subs	r3, #5
 8002b58:	221f      	movs	r2, #31
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	400a      	ands	r2, r1
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b05      	subs	r3, #5
 8002b82:	fa00 f203 	lsl.w	r2, r0, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8e:	e04c      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d824      	bhi.n	8002be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b23      	subs	r3, #35	; 0x23
 8002baa:	221f      	movs	r2, #31
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b23      	subs	r3, #35	; 0x23
 8002bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
 8002be0:	e023      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b41      	subs	r3, #65	; 0x41
 8002bf4:	221f      	movs	r2, #31
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	400a      	ands	r2, r1
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b41      	subs	r3, #65	; 0x41
 8002c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <HAL_ADC_ConfigChannel+0x250>)
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a28      	ldr	r2, [pc, #160]	; (8002cd4 <HAL_ADC_ConfigChannel+0x254>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10f      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d8>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d10b      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_ADC_ConfigChannel+0x254>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d12b      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x23a>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_ADC_ConfigChannel+0x258>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x1f4>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b11      	cmp	r3, #17
 8002c72:	d122      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a11      	ldr	r2, [pc, #68]	; (8002cd8 <HAL_ADC_ConfigChannel+0x258>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d111      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_ADC_ConfigChannel+0x25c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <HAL_ADC_ConfigChannel+0x260>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	0c9a      	lsrs	r2, r3, #18
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cac:	e002      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f9      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	40012300 	.word	0x40012300
 8002cd4:	40012000 	.word	0x40012000
 8002cd8:	10000012 	.word	0x10000012
 8002cdc:	20000004 	.word	0x20000004
 8002ce0:	431bde83 	.word	0x431bde83

08002ce4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cec:	4b79      	ldr	r3, [pc, #484]	; (8002ed4 <ADC_Init+0x1f0>)
 8002cee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	4a58      	ldr	r2, [pc, #352]	; (8002ed8 <ADC_Init+0x1f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d022      	beq.n	8002dc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6899      	ldr	r1, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	e00f      	b.n	8002de2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002de0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0202 	bic.w	r2, r2, #2
 8002df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6899      	ldr	r1, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e1b      	ldrb	r3, [r3, #24]
 8002dfc:	005a      	lsls	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01b      	beq.n	8002e48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	035a      	lsls	r2, r3, #13
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	e007      	b.n	8002e58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	051a      	lsls	r2, r3, #20
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e9a:	025a      	lsls	r2, r3, #9
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	029a      	lsls	r2, r3, #10
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40012300 	.word	0x40012300
 8002ed8:	0f000001 	.word	0x0f000001

08002edc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d13c      	bne.n	8002f70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d127      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d119      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0220 	bic.w	r2, r2, #32
 8002f42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff fd6b 	bl	8002a44 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f6e:	e00e      	b.n	8002f8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff fd75 	bl	8002a6c <HAL_ADC_ErrorCallback>
}
 8002f82:	e004      	b.n	8002f8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff fd57 	bl	8002a58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2240      	movs	r2, #64	; 0x40
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	f043 0204 	orr.w	r2, r3, #4
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff fd4a 	bl	8002a6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <__NVIC_GetPriorityGrouping+0x18>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0307 	and.w	r3, r3, #7
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	db0b      	blt.n	800306e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	4907      	ldr	r1, [pc, #28]	; (800307c <__NVIC_EnableIRQ+0x38>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2001      	movs	r0, #1
 8003066:	fa00 f202 	lsl.w	r2, r0, r2
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000e100 	.word	0xe000e100

08003080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	; (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	bf28      	it	cs
 80030f2:	2304      	movcs	r3, #4
 80030f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <NVIC_EncodePriority+0x30>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3b03      	subs	r3, #3
 8003102:	e000      	b.n	8003106 <NVIC_EncodePriority+0x32>
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43d9      	mvns	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	4313      	orrs	r3, r2
         );
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800314c:	d301      	bcc.n	8003152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314e:	2301      	movs	r3, #1
 8003150:	e00f      	b.n	8003172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003152:	4a0a      	ldr	r2, [pc, #40]	; (800317c <SysTick_Config+0x40>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315a:	210f      	movs	r1, #15
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f7ff ff8e 	bl	8003080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <SysTick_Config+0x40>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <SysTick_Config+0x40>)
 800316c:	2207      	movs	r2, #7
 800316e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	e000e010 	.word	0xe000e010

08003180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff29 	bl	8002fe0 <__NVIC_SetPriorityGrouping>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff3e 	bl	8003028 <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ff8e 	bl	80030d4 <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff5d 	bl	8003080 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff31 	bl	8003044 <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffa2 	bl	800313c <SysTick_Config>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003210:	f7ff fa94 	bl	800273c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e099      	b.n	8003354 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003240:	e00f      	b.n	8003262 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003242:	f7ff fa7b 	bl	800273c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b05      	cmp	r3, #5
 800324e:	d908      	bls.n	8003262 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2203      	movs	r2, #3
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e078      	b.n	8003354 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e8      	bne.n	8003242 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4b38      	ldr	r3, [pc, #224]	; (800335c <HAL_DMA_Init+0x158>)
 800327c:	4013      	ands	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800328e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d107      	bne.n	80032cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4313      	orrs	r3, r2
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0307 	bic.w	r3, r3, #7
 80032e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d117      	bne.n	8003326 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fb01 	bl	8003910 <DMA_CheckFifoParam>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2240      	movs	r2, #64	; 0x40
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003322:	2301      	movs	r3, #1
 8003324:	e016      	b.n	8003354 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fab8 	bl	80038a4 <DMA_CalcBaseAndBitshift>
 8003334:	4603      	mov	r3, r0
 8003336:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	223f      	movs	r2, #63	; 0x3f
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	f010803f 	.word	0xf010803f

08003360 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_DMA_Start_IT+0x26>
 8003382:	2302      	movs	r3, #2
 8003384:	e040      	b.n	8003408 <HAL_DMA_Start_IT+0xa8>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d12f      	bne.n	80033fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2202      	movs	r2, #2
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa4a 	bl	8003848 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	223f      	movs	r2, #63	; 0x3f
 80033ba:	409a      	lsls	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0216 	orr.w	r2, r2, #22
 80033ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0208 	orr.w	r2, r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e005      	b.n	8003406 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003402:	2302      	movs	r3, #2
 8003404:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800341e:	f7ff f98d 	bl	800273c <HAL_GetTick>
 8003422:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d008      	beq.n	8003442 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e052      	b.n	80034e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0216 	bic.w	r2, r2, #22
 8003450:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003460:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <HAL_DMA_Abort+0x62>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0208 	bic.w	r2, r2, #8
 8003480:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003492:	e013      	b.n	80034bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003494:	f7ff f952 	bl	800273c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d90c      	bls.n	80034bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2203      	movs	r2, #3
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e015      	b.n	80034e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e4      	bne.n	8003494 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	223f      	movs	r2, #63	; 0x3f
 80034d0:	409a      	lsls	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d004      	beq.n	800350e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e00c      	b.n	8003528 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2205      	movs	r2, #5
 8003512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0201 	bic.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003540:	4b8e      	ldr	r3, [pc, #568]	; (800377c <HAL_DMA_IRQHandler+0x248>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a8e      	ldr	r2, [pc, #568]	; (8003780 <HAL_DMA_IRQHandler+0x24c>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	0a9b      	lsrs	r3, r3, #10
 800354c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	2208      	movs	r2, #8
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01a      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0204 	bic.w	r2, r2, #4
 8003586:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	2208      	movs	r2, #8
 800358e:	409a      	lsls	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	2201      	movs	r2, #1
 80035a6:	409a      	lsls	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d012      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2201      	movs	r2, #1
 80035c4:	409a      	lsls	r2, r3
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f043 0202 	orr.w	r2, r3, #2
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035da:	2204      	movs	r2, #4
 80035dc:	409a      	lsls	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d012      	beq.n	800360c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00b      	beq.n	800360c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	2204      	movs	r2, #4
 80035fa:	409a      	lsls	r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f043 0204 	orr.w	r2, r3, #4
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	2210      	movs	r2, #16
 8003612:	409a      	lsls	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d043      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d03c      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	2210      	movs	r2, #16
 8003630:	409a      	lsls	r2, r3
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d018      	beq.n	8003676 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d024      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
 8003662:	e01f      	b.n	80036a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01b      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
 8003674:	e016      	b.n	80036a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0208 	bic.w	r2, r2, #8
 8003692:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	2220      	movs	r2, #32
 80036aa:	409a      	lsls	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 808f 	beq.w	80037d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8087 	beq.w	80037d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	2220      	movs	r2, #32
 80036cc:	409a      	lsls	r2, r3
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b05      	cmp	r3, #5
 80036dc:	d136      	bne.n	800374c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0216 	bic.w	r2, r2, #22
 80036ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d103      	bne.n	800370e <HAL_DMA_IRQHandler+0x1da>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0208 	bic.w	r2, r2, #8
 800371c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	223f      	movs	r2, #63	; 0x3f
 8003724:	409a      	lsls	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373e:	2b00      	cmp	r3, #0
 8003740:	d07e      	beq.n	8003840 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
        }
        return;
 800374a:	e079      	b.n	8003840 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01d      	beq.n	8003796 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10d      	bne.n	8003784 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	2b00      	cmp	r3, #0
 800376e:	d031      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
 8003778:	e02c      	b.n	80037d4 <HAL_DMA_IRQHandler+0x2a0>
 800377a:	bf00      	nop
 800377c:	20000004 	.word	0x20000004
 8003780:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d023      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
 8003794:	e01e      	b.n	80037d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10f      	bne.n	80037c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0210 	bic.w	r2, r2, #16
 80037b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d032      	beq.n	8003842 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d022      	beq.n	800382e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2205      	movs	r2, #5
 80037ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	3301      	adds	r3, #1
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	429a      	cmp	r2, r3
 800380a:	d307      	bcc.n	800381c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f2      	bne.n	8003800 <HAL_DMA_IRQHandler+0x2cc>
 800381a:	e000      	b.n	800381e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800381c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
 800383e:	e000      	b.n	8003842 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003840:	bf00      	nop
    }
  }
}
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003864:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d108      	bne.n	8003888 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003886:	e007      	b.n	8003898 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	60da      	str	r2, [r3, #12]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	3b10      	subs	r3, #16
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <DMA_CalcBaseAndBitshift+0x64>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038be:	4a13      	ldr	r2, [pc, #76]	; (800390c <DMA_CalcBaseAndBitshift+0x68>)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d909      	bls.n	80038e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038da:	f023 0303 	bic.w	r3, r3, #3
 80038de:	1d1a      	adds	r2, r3, #4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	659a      	str	r2, [r3, #88]	; 0x58
 80038e4:	e007      	b.n	80038f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	aaaaaaab 	.word	0xaaaaaaab
 800390c:	08008868 	.word	0x08008868

08003910 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11f      	bne.n	800396a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d856      	bhi.n	80039de <DMA_CheckFifoParam+0xce>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <DMA_CheckFifoParam+0x28>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003949 	.word	0x08003949
 800393c:	0800395b 	.word	0x0800395b
 8003940:	08003949 	.word	0x08003949
 8003944:	080039df 	.word	0x080039df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d046      	beq.n	80039e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003958:	e043      	b.n	80039e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003962:	d140      	bne.n	80039e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003968:	e03d      	b.n	80039e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003972:	d121      	bne.n	80039b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d837      	bhi.n	80039ea <DMA_CheckFifoParam+0xda>
 800397a:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <DMA_CheckFifoParam+0x70>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	08003991 	.word	0x08003991
 8003984:	08003997 	.word	0x08003997
 8003988:	08003991 	.word	0x08003991
 800398c:	080039a9 	.word	0x080039a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      break;
 8003994:	e030      	b.n	80039f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d025      	beq.n	80039ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a6:	e022      	b.n	80039ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039b0:	d11f      	bne.n	80039f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039b6:	e01c      	b.n	80039f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d903      	bls.n	80039c6 <DMA_CheckFifoParam+0xb6>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d003      	beq.n	80039cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039c4:	e018      	b.n	80039f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
      break;
 80039ca:	e015      	b.n	80039f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      break;
 80039dc:	e00b      	b.n	80039f6 <DMA_CheckFifoParam+0xe6>
      break;
 80039de:	bf00      	nop
 80039e0:	e00a      	b.n	80039f8 <DMA_CheckFifoParam+0xe8>
      break;
 80039e2:	bf00      	nop
 80039e4:	e008      	b.n	80039f8 <DMA_CheckFifoParam+0xe8>
      break;
 80039e6:	bf00      	nop
 80039e8:	e006      	b.n	80039f8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ea:	bf00      	nop
 80039ec:	e004      	b.n	80039f8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ee:	bf00      	nop
 80039f0:	e002      	b.n	80039f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039f2:	bf00      	nop
 80039f4:	e000      	b.n	80039f8 <DMA_CheckFifoParam+0xe8>
      break;
 80039f6:	bf00      	nop
    }
  } 
  
  return status; 
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop

08003a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b089      	sub	sp, #36	; 0x24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	e165      	b.n	8003cf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a24:	2201      	movs	r2, #1
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	f040 8154 	bne.w	8003cea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d005      	beq.n	8003a5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d130      	bne.n	8003abc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	2203      	movs	r2, #3
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a90:	2201      	movs	r2, #1
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 0201 	and.w	r2, r3, #1
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d017      	beq.n	8003af8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d123      	bne.n	8003b4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	08da      	lsrs	r2, r3, #3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3208      	adds	r2, #8
 8003b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	08da      	lsrs	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3208      	adds	r2, #8
 8003b46:	69b9      	ldr	r1, [r7, #24]
 8003b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	2203      	movs	r2, #3
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0203 	and.w	r2, r3, #3
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80ae 	beq.w	8003cea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	4b5d      	ldr	r3, [pc, #372]	; (8003d08 <HAL_GPIO_Init+0x300>)
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	4a5c      	ldr	r2, [pc, #368]	; (8003d08 <HAL_GPIO_Init+0x300>)
 8003b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9e:	4b5a      	ldr	r3, [pc, #360]	; (8003d08 <HAL_GPIO_Init+0x300>)
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003baa:	4a58      	ldr	r2, [pc, #352]	; (8003d0c <HAL_GPIO_Init+0x304>)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a4f      	ldr	r2, [pc, #316]	; (8003d10 <HAL_GPIO_Init+0x308>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d025      	beq.n	8003c22 <HAL_GPIO_Init+0x21a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a4e      	ldr	r2, [pc, #312]	; (8003d14 <HAL_GPIO_Init+0x30c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01f      	beq.n	8003c1e <HAL_GPIO_Init+0x216>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4d      	ldr	r2, [pc, #308]	; (8003d18 <HAL_GPIO_Init+0x310>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d019      	beq.n	8003c1a <HAL_GPIO_Init+0x212>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4c      	ldr	r2, [pc, #304]	; (8003d1c <HAL_GPIO_Init+0x314>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <HAL_GPIO_Init+0x20e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4b      	ldr	r2, [pc, #300]	; (8003d20 <HAL_GPIO_Init+0x318>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00d      	beq.n	8003c12 <HAL_GPIO_Init+0x20a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <HAL_GPIO_Init+0x31c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d007      	beq.n	8003c0e <HAL_GPIO_Init+0x206>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a49      	ldr	r2, [pc, #292]	; (8003d28 <HAL_GPIO_Init+0x320>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <HAL_GPIO_Init+0x202>
 8003c06:	2306      	movs	r3, #6
 8003c08:	e00c      	b.n	8003c24 <HAL_GPIO_Init+0x21c>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e00a      	b.n	8003c24 <HAL_GPIO_Init+0x21c>
 8003c0e:	2305      	movs	r3, #5
 8003c10:	e008      	b.n	8003c24 <HAL_GPIO_Init+0x21c>
 8003c12:	2304      	movs	r3, #4
 8003c14:	e006      	b.n	8003c24 <HAL_GPIO_Init+0x21c>
 8003c16:	2303      	movs	r3, #3
 8003c18:	e004      	b.n	8003c24 <HAL_GPIO_Init+0x21c>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e002      	b.n	8003c24 <HAL_GPIO_Init+0x21c>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_GPIO_Init+0x21c>
 8003c22:	2300      	movs	r3, #0
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	f002 0203 	and.w	r2, r2, #3
 8003c2a:	0092      	lsls	r2, r2, #2
 8003c2c:	4093      	lsls	r3, r2
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c34:	4935      	ldr	r1, [pc, #212]	; (8003d0c <HAL_GPIO_Init+0x304>)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c42:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_GPIO_Init+0x324>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c66:	4a31      	ldr	r2, [pc, #196]	; (8003d2c <HAL_GPIO_Init+0x324>)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <HAL_GPIO_Init+0x324>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c90:	4a26      	ldr	r2, [pc, #152]	; (8003d2c <HAL_GPIO_Init+0x324>)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c96:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <HAL_GPIO_Init+0x324>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cba:	4a1c      	ldr	r2, [pc, #112]	; (8003d2c <HAL_GPIO_Init+0x324>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_GPIO_Init+0x324>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce4:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <HAL_GPIO_Init+0x324>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3301      	adds	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b0f      	cmp	r3, #15
 8003cf4:	f67f ae96 	bls.w	8003a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	3724      	adds	r7, #36	; 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40013800 	.word	0x40013800
 8003d10:	40020000 	.word	0x40020000
 8003d14:	40020400 	.word	0x40020400
 8003d18:	40020800 	.word	0x40020800
 8003d1c:	40020c00 	.word	0x40020c00
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40021400 	.word	0x40021400
 8003d28:	40021800 	.word	0x40021800
 8003d2c:	40013c00 	.word	0x40013c00

08003d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d4c:	e003      	b.n	8003d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	041a      	lsls	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	619a      	str	r2, [r3, #24]
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x94>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d90:	f7fe fcd4 	bl	800273c <HAL_GetTick>
 8003d94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d96:	e009      	b.n	8003dac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d98:	f7fe fcd0 	bl	800273c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003da6:	d901      	bls.n	8003dac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e01f      	b.n	8003dec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dac:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db8:	d1ee      	bne.n	8003d98 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dc0:	f7fe fcbc 	bl	800273c <HAL_GetTick>
 8003dc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dc6:	e009      	b.n	8003ddc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dc8:	f7fe fcb8 	bl	800273c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd6:	d901      	bls.n	8003ddc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e007      	b.n	8003dec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de8:	d1ee      	bne.n	8003dc8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	420e0040 	.word	0x420e0040
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	420e0044 	.word	0x420e0044

08003e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0cc      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b68      	ldr	r3, [pc, #416]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d90c      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b65      	ldr	r3, [pc, #404]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b63      	ldr	r3, [pc, #396]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0b8      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e58:	4b59      	ldr	r3, [pc, #356]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4a58      	ldr	r2, [pc, #352]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e70:	4b53      	ldr	r3, [pc, #332]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a52      	ldr	r2, [pc, #328]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e7c:	4b50      	ldr	r3, [pc, #320]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	494d      	ldr	r1, [pc, #308]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d044      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d119      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e06f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	4b3b      	ldr	r3, [pc, #236]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e067      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f023 0203 	bic.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4934      	ldr	r1, [pc, #208]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef4:	f7fe fc22 	bl	800273c <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fe fc1e 	bl	800273c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e04f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 020c 	and.w	r2, r3, #12
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d1eb      	bne.n	8003efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d20c      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b20      	ldr	r3, [pc, #128]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e032      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4916      	ldr	r1, [pc, #88]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	490e      	ldr	r1, [pc, #56]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f8a:	f000 f855 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	490a      	ldr	r1, [pc, #40]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9c:	5ccb      	ldrb	r3, [r1, r3]
 8003f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe fb82 	bl	80026b4 <HAL_InitTick>

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023c00 	.word	0x40023c00
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	08008850 	.word	0x08008850
 8003fc8:	20000004 	.word	0x20000004
 8003fcc:	20000008 	.word	0x20000008

08003fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20000004 	.word	0x20000004

08003fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fec:	f7ff fff0 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0a9b      	lsrs	r3, r3, #10
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	08008860 	.word	0x08008860

08004010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004014:	f7ff ffdc 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	0b5b      	lsrs	r3, r3, #13
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4903      	ldr	r1, [pc, #12]	; (8004034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40023800 	.word	0x40023800
 8004034:	08008860 	.word	0x08008860

08004038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800403c:	b0ae      	sub	sp, #184	; 0xb8
 800403e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800405e:	4bcb      	ldr	r3, [pc, #812]	; (800438c <HAL_RCC_GetSysClockFreq+0x354>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b0c      	cmp	r3, #12
 8004068:	f200 8206 	bhi.w	8004478 <HAL_RCC_GetSysClockFreq+0x440>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <HAL_RCC_GetSysClockFreq+0x3c>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	080040a9 	.word	0x080040a9
 8004078:	08004479 	.word	0x08004479
 800407c:	08004479 	.word	0x08004479
 8004080:	08004479 	.word	0x08004479
 8004084:	080040b1 	.word	0x080040b1
 8004088:	08004479 	.word	0x08004479
 800408c:	08004479 	.word	0x08004479
 8004090:	08004479 	.word	0x08004479
 8004094:	080040b9 	.word	0x080040b9
 8004098:	08004479 	.word	0x08004479
 800409c:	08004479 	.word	0x08004479
 80040a0:	08004479 	.word	0x08004479
 80040a4:	080042a9 	.word	0x080042a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4bb9      	ldr	r3, [pc, #740]	; (8004390 <HAL_RCC_GetSysClockFreq+0x358>)
 80040aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80040ae:	e1e7      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040b0:	4bb8      	ldr	r3, [pc, #736]	; (8004394 <HAL_RCC_GetSysClockFreq+0x35c>)
 80040b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040b6:	e1e3      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b8:	4bb4      	ldr	r3, [pc, #720]	; (800438c <HAL_RCC_GetSysClockFreq+0x354>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040c4:	4bb1      	ldr	r3, [pc, #708]	; (800438c <HAL_RCC_GetSysClockFreq+0x354>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d071      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d0:	4bae      	ldr	r3, [pc, #696]	; (800438c <HAL_RCC_GetSysClockFreq+0x354>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	099b      	lsrs	r3, r3, #6
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80040e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040f6:	4622      	mov	r2, r4
 80040f8:	462b      	mov	r3, r5
 80040fa:	f04f 0000 	mov.w	r0, #0
 80040fe:	f04f 0100 	mov.w	r1, #0
 8004102:	0159      	lsls	r1, r3, #5
 8004104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004108:	0150      	lsls	r0, r2, #5
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4621      	mov	r1, r4
 8004110:	1a51      	subs	r1, r2, r1
 8004112:	6439      	str	r1, [r7, #64]	; 0x40
 8004114:	4629      	mov	r1, r5
 8004116:	eb63 0301 	sbc.w	r3, r3, r1
 800411a:	647b      	str	r3, [r7, #68]	; 0x44
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004128:	4649      	mov	r1, r9
 800412a:	018b      	lsls	r3, r1, #6
 800412c:	4641      	mov	r1, r8
 800412e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004132:	4641      	mov	r1, r8
 8004134:	018a      	lsls	r2, r1, #6
 8004136:	4641      	mov	r1, r8
 8004138:	1a51      	subs	r1, r2, r1
 800413a:	63b9      	str	r1, [r7, #56]	; 0x38
 800413c:	4649      	mov	r1, r9
 800413e:	eb63 0301 	sbc.w	r3, r3, r1
 8004142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004150:	4649      	mov	r1, r9
 8004152:	00cb      	lsls	r3, r1, #3
 8004154:	4641      	mov	r1, r8
 8004156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415a:	4641      	mov	r1, r8
 800415c:	00ca      	lsls	r2, r1, #3
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	4603      	mov	r3, r0
 8004164:	4622      	mov	r2, r4
 8004166:	189b      	adds	r3, r3, r2
 8004168:	633b      	str	r3, [r7, #48]	; 0x30
 800416a:	462b      	mov	r3, r5
 800416c:	460a      	mov	r2, r1
 800416e:	eb42 0303 	adc.w	r3, r2, r3
 8004172:	637b      	str	r3, [r7, #52]	; 0x34
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004180:	4629      	mov	r1, r5
 8004182:	024b      	lsls	r3, r1, #9
 8004184:	4621      	mov	r1, r4
 8004186:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800418a:	4621      	mov	r1, r4
 800418c:	024a      	lsls	r2, r1, #9
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004196:	2200      	movs	r2, #0
 8004198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800419c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80041a4:	f7fc fd1e 	bl	8000be4 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4613      	mov	r3, r2
 80041ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b2:	e067      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b4:	4b75      	ldr	r3, [pc, #468]	; (800438c <HAL_RCC_GetSysClockFreq+0x354>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041c0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80041c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ce:	2300      	movs	r3, #0
 80041d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80041d6:	4622      	mov	r2, r4
 80041d8:	462b      	mov	r3, r5
 80041da:	f04f 0000 	mov.w	r0, #0
 80041de:	f04f 0100 	mov.w	r1, #0
 80041e2:	0159      	lsls	r1, r3, #5
 80041e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041e8:	0150      	lsls	r0, r2, #5
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4621      	mov	r1, r4
 80041f0:	1a51      	subs	r1, r2, r1
 80041f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80041f4:	4629      	mov	r1, r5
 80041f6:	eb63 0301 	sbc.w	r3, r3, r1
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004208:	4649      	mov	r1, r9
 800420a:	018b      	lsls	r3, r1, #6
 800420c:	4641      	mov	r1, r8
 800420e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004212:	4641      	mov	r1, r8
 8004214:	018a      	lsls	r2, r1, #6
 8004216:	4641      	mov	r1, r8
 8004218:	ebb2 0a01 	subs.w	sl, r2, r1
 800421c:	4649      	mov	r1, r9
 800421e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800422e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004236:	4692      	mov	sl, r2
 8004238:	469b      	mov	fp, r3
 800423a:	4623      	mov	r3, r4
 800423c:	eb1a 0303 	adds.w	r3, sl, r3
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	462b      	mov	r3, r5
 8004244:	eb4b 0303 	adc.w	r3, fp, r3
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004256:	4629      	mov	r1, r5
 8004258:	028b      	lsls	r3, r1, #10
 800425a:	4621      	mov	r1, r4
 800425c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004260:	4621      	mov	r1, r4
 8004262:	028a      	lsls	r2, r1, #10
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800426c:	2200      	movs	r2, #0
 800426e:	673b      	str	r3, [r7, #112]	; 0x70
 8004270:	677a      	str	r2, [r7, #116]	; 0x74
 8004272:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004276:	f7fc fcb5 	bl	8000be4 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4613      	mov	r3, r2
 8004280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004284:	4b41      	ldr	r3, [pc, #260]	; (800438c <HAL_RCC_GetSysClockFreq+0x354>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	3301      	adds	r3, #1
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800429a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042a6:	e0eb      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042a8:	4b38      	ldr	r3, [pc, #224]	; (800438c <HAL_RCC_GetSysClockFreq+0x354>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042b4:	4b35      	ldr	r3, [pc, #212]	; (800438c <HAL_RCC_GetSysClockFreq+0x354>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d06b      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <HAL_RCC_GetSysClockFreq+0x354>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	2200      	movs	r2, #0
 80042c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d2:	663b      	str	r3, [r7, #96]	; 0x60
 80042d4:	2300      	movs	r3, #0
 80042d6:	667b      	str	r3, [r7, #100]	; 0x64
 80042d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80042dc:	4622      	mov	r2, r4
 80042de:	462b      	mov	r3, r5
 80042e0:	f04f 0000 	mov.w	r0, #0
 80042e4:	f04f 0100 	mov.w	r1, #0
 80042e8:	0159      	lsls	r1, r3, #5
 80042ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ee:	0150      	lsls	r0, r2, #5
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4621      	mov	r1, r4
 80042f6:	1a51      	subs	r1, r2, r1
 80042f8:	61b9      	str	r1, [r7, #24]
 80042fa:	4629      	mov	r1, r5
 80042fc:	eb63 0301 	sbc.w	r3, r3, r1
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800430e:	4659      	mov	r1, fp
 8004310:	018b      	lsls	r3, r1, #6
 8004312:	4651      	mov	r1, sl
 8004314:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004318:	4651      	mov	r1, sl
 800431a:	018a      	lsls	r2, r1, #6
 800431c:	4651      	mov	r1, sl
 800431e:	ebb2 0801 	subs.w	r8, r2, r1
 8004322:	4659      	mov	r1, fp
 8004324:	eb63 0901 	sbc.w	r9, r3, r1
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800433c:	4690      	mov	r8, r2
 800433e:	4699      	mov	r9, r3
 8004340:	4623      	mov	r3, r4
 8004342:	eb18 0303 	adds.w	r3, r8, r3
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	462b      	mov	r3, r5
 800434a:	eb49 0303 	adc.w	r3, r9, r3
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800435c:	4629      	mov	r1, r5
 800435e:	024b      	lsls	r3, r1, #9
 8004360:	4621      	mov	r1, r4
 8004362:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004366:	4621      	mov	r1, r4
 8004368:	024a      	lsls	r2, r1, #9
 800436a:	4610      	mov	r0, r2
 800436c:	4619      	mov	r1, r3
 800436e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004372:	2200      	movs	r2, #0
 8004374:	65bb      	str	r3, [r7, #88]	; 0x58
 8004376:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004378:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800437c:	f7fc fc32 	bl	8000be4 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800438a:	e065      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x420>
 800438c:	40023800 	.word	0x40023800
 8004390:	00f42400 	.word	0x00f42400
 8004394:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004398:	4b3d      	ldr	r3, [pc, #244]	; (8004490 <HAL_RCC_GetSysClockFreq+0x458>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	099b      	lsrs	r3, r3, #6
 800439e:	2200      	movs	r2, #0
 80043a0:	4618      	mov	r0, r3
 80043a2:	4611      	mov	r1, r2
 80043a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043a8:	653b      	str	r3, [r7, #80]	; 0x50
 80043aa:	2300      	movs	r3, #0
 80043ac:	657b      	str	r3, [r7, #84]	; 0x54
 80043ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80043b2:	4642      	mov	r2, r8
 80043b4:	464b      	mov	r3, r9
 80043b6:	f04f 0000 	mov.w	r0, #0
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	0159      	lsls	r1, r3, #5
 80043c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c4:	0150      	lsls	r0, r2, #5
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4641      	mov	r1, r8
 80043cc:	1a51      	subs	r1, r2, r1
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	4649      	mov	r1, r9
 80043d2:	eb63 0301 	sbc.w	r3, r3, r1
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80043e4:	4659      	mov	r1, fp
 80043e6:	018b      	lsls	r3, r1, #6
 80043e8:	4651      	mov	r1, sl
 80043ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ee:	4651      	mov	r1, sl
 80043f0:	018a      	lsls	r2, r1, #6
 80043f2:	4651      	mov	r1, sl
 80043f4:	1a54      	subs	r4, r2, r1
 80043f6:	4659      	mov	r1, fp
 80043f8:	eb63 0501 	sbc.w	r5, r3, r1
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	00eb      	lsls	r3, r5, #3
 8004406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440a:	00e2      	lsls	r2, r4, #3
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
 8004410:	4643      	mov	r3, r8
 8004412:	18e3      	adds	r3, r4, r3
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	464b      	mov	r3, r9
 8004418:	eb45 0303 	adc.w	r3, r5, r3
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800442a:	4629      	mov	r1, r5
 800442c:	028b      	lsls	r3, r1, #10
 800442e:	4621      	mov	r1, r4
 8004430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004434:	4621      	mov	r1, r4
 8004436:	028a      	lsls	r2, r1, #10
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004440:	2200      	movs	r2, #0
 8004442:	64bb      	str	r3, [r7, #72]	; 0x48
 8004444:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004446:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800444a:	f7fc fbcb 	bl	8000be4 <__aeabi_uldivmod>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4613      	mov	r3, r2
 8004454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004458:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <HAL_RCC_GetSysClockFreq+0x458>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	0f1b      	lsrs	r3, r3, #28
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800446a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800446e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004476:	e003      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_RCC_GetSysClockFreq+0x45c>)
 800447a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800447e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004484:	4618      	mov	r0, r3
 8004486:	37b8      	adds	r7, #184	; 0xb8
 8004488:	46bd      	mov	sp, r7
 800448a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800
 8004494:	00f42400 	.word	0x00f42400

08004498 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e28d      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8083 	beq.w	80045be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044b8:	4b94      	ldr	r3, [pc, #592]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d019      	beq.n	80044f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044c4:	4b91      	ldr	r3, [pc, #580]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d106      	bne.n	80044de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044d0:	4b8e      	ldr	r3, [pc, #568]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044dc:	d00c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044de:	4b8b      	ldr	r3, [pc, #556]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044e6:	2b0c      	cmp	r3, #12
 80044e8:	d112      	bne.n	8004510 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ea:	4b88      	ldr	r3, [pc, #544]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f6:	d10b      	bne.n	8004510 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	4b84      	ldr	r3, [pc, #528]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d05b      	beq.n	80045bc <HAL_RCC_OscConfig+0x124>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d157      	bne.n	80045bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e25a      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004518:	d106      	bne.n	8004528 <HAL_RCC_OscConfig+0x90>
 800451a:	4b7c      	ldr	r3, [pc, #496]	; (800470c <HAL_RCC_OscConfig+0x274>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a7b      	ldr	r2, [pc, #492]	; (800470c <HAL_RCC_OscConfig+0x274>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e01d      	b.n	8004564 <HAL_RCC_OscConfig+0xcc>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004530:	d10c      	bne.n	800454c <HAL_RCC_OscConfig+0xb4>
 8004532:	4b76      	ldr	r3, [pc, #472]	; (800470c <HAL_RCC_OscConfig+0x274>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a75      	ldr	r2, [pc, #468]	; (800470c <HAL_RCC_OscConfig+0x274>)
 8004538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b73      	ldr	r3, [pc, #460]	; (800470c <HAL_RCC_OscConfig+0x274>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a72      	ldr	r2, [pc, #456]	; (800470c <HAL_RCC_OscConfig+0x274>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e00b      	b.n	8004564 <HAL_RCC_OscConfig+0xcc>
 800454c:	4b6f      	ldr	r3, [pc, #444]	; (800470c <HAL_RCC_OscConfig+0x274>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a6e      	ldr	r2, [pc, #440]	; (800470c <HAL_RCC_OscConfig+0x274>)
 8004552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b6c      	ldr	r3, [pc, #432]	; (800470c <HAL_RCC_OscConfig+0x274>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a6b      	ldr	r2, [pc, #428]	; (800470c <HAL_RCC_OscConfig+0x274>)
 800455e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fe f8e6 	bl	800273c <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe f8e2 	bl	800273c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e21f      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b61      	ldr	r3, [pc, #388]	; (800470c <HAL_RCC_OscConfig+0x274>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0xdc>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fe f8d2 	bl	800273c <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800459c:	f7fe f8ce 	bl	800273c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e20b      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ae:	4b57      	ldr	r3, [pc, #348]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x104>
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d06f      	beq.n	80046aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045ca:	4b50      	ldr	r3, [pc, #320]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d017      	beq.n	8004606 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045d6:	4b4d      	ldr	r3, [pc, #308]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d105      	bne.n	80045ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045e2:	4b4a      	ldr	r3, [pc, #296]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b47      	ldr	r3, [pc, #284]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045f6:	2b0c      	cmp	r3, #12
 80045f8:	d11c      	bne.n	8004634 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fa:	4b44      	ldr	r3, [pc, #272]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d116      	bne.n	8004634 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	4b41      	ldr	r3, [pc, #260]	; (800470c <HAL_RCC_OscConfig+0x274>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_RCC_OscConfig+0x186>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e1d3      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461e:	4b3b      	ldr	r3, [pc, #236]	; (800470c <HAL_RCC_OscConfig+0x274>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4937      	ldr	r1, [pc, #220]	; (800470c <HAL_RCC_OscConfig+0x274>)
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	e03a      	b.n	80046aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d020      	beq.n	800467e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463c:	4b34      	ldr	r3, [pc, #208]	; (8004710 <HAL_RCC_OscConfig+0x278>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fe f87b 	bl	800273c <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800464a:	f7fe f877 	bl	800273c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e1b4      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465c:	4b2b      	ldr	r3, [pc, #172]	; (800470c <HAL_RCC_OscConfig+0x274>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b28      	ldr	r3, [pc, #160]	; (800470c <HAL_RCC_OscConfig+0x274>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4925      	ldr	r1, [pc, #148]	; (800470c <HAL_RCC_OscConfig+0x274>)
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]
 800467c:	e015      	b.n	80046aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467e:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCC_OscConfig+0x278>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fe f85a 	bl	800273c <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800468c:	f7fe f856 	bl	800273c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e193      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469e:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d036      	beq.n	8004724 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d016      	beq.n	80046ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <HAL_RCC_OscConfig+0x27c>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fe f83a 	bl	800273c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046cc:	f7fe f836 	bl	800273c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e173      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCC_OscConfig+0x274>)
 80046e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x234>
 80046ea:	e01b      	b.n	8004724 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_OscConfig+0x27c>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f2:	f7fe f823 	bl	800273c <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f8:	e00e      	b.n	8004718 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046fa:	f7fe f81f 	bl	800273c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d907      	bls.n	8004718 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e15c      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
 800470c:	40023800 	.word	0x40023800
 8004710:	42470000 	.word	0x42470000
 8004714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004718:	4b8a      	ldr	r3, [pc, #552]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 800471a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ea      	bne.n	80046fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8097 	beq.w	8004860 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004732:	2300      	movs	r3, #0
 8004734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004736:	4b83      	ldr	r3, [pc, #524]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	4b7f      	ldr	r3, [pc, #508]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	4a7e      	ldr	r2, [pc, #504]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6413      	str	r3, [r2, #64]	; 0x40
 8004752:	4b7c      	ldr	r3, [pc, #496]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475e:	2301      	movs	r3, #1
 8004760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004762:	4b79      	ldr	r3, [pc, #484]	; (8004948 <HAL_RCC_OscConfig+0x4b0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d118      	bne.n	80047a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476e:	4b76      	ldr	r3, [pc, #472]	; (8004948 <HAL_RCC_OscConfig+0x4b0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a75      	ldr	r2, [pc, #468]	; (8004948 <HAL_RCC_OscConfig+0x4b0>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477a:	f7fd ffdf 	bl	800273c <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004782:	f7fd ffdb 	bl	800273c <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e118      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	4b6c      	ldr	r3, [pc, #432]	; (8004948 <HAL_RCC_OscConfig+0x4b0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d106      	bne.n	80047b6 <HAL_RCC_OscConfig+0x31e>
 80047a8:	4b66      	ldr	r3, [pc, #408]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	4a65      	ldr	r2, [pc, #404]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6713      	str	r3, [r2, #112]	; 0x70
 80047b4:	e01c      	b.n	80047f0 <HAL_RCC_OscConfig+0x358>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b05      	cmp	r3, #5
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x340>
 80047be:	4b61      	ldr	r3, [pc, #388]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a60      	ldr	r2, [pc, #384]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80047c4:	f043 0304 	orr.w	r3, r3, #4
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	4b5e      	ldr	r3, [pc, #376]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a5d      	ldr	r2, [pc, #372]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
 80047d6:	e00b      	b.n	80047f0 <HAL_RCC_OscConfig+0x358>
 80047d8:	4b5a      	ldr	r3, [pc, #360]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a59      	ldr	r2, [pc, #356]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
 80047e4:	4b57      	ldr	r3, [pc, #348]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e8:	4a56      	ldr	r2, [pc, #344]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80047ea:	f023 0304 	bic.w	r3, r3, #4
 80047ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d015      	beq.n	8004824 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fd ffa0 	bl	800273c <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004800:	f7fd ff9c 	bl	800273c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	; 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0d7      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004816:	4b4b      	ldr	r3, [pc, #300]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0ee      	beq.n	8004800 <HAL_RCC_OscConfig+0x368>
 8004822:	e014      	b.n	800484e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fd ff8a 	bl	800273c <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482a:	e00a      	b.n	8004842 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fd ff86 	bl	800273c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e0c1      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004842:	4b40      	ldr	r3, [pc, #256]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1ee      	bne.n	800482c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004854:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	4a3a      	ldr	r2, [pc, #232]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 800485a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80ad 	beq.w	80049c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800486a:	4b36      	ldr	r3, [pc, #216]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b08      	cmp	r3, #8
 8004874:	d060      	beq.n	8004938 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d145      	bne.n	800490a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487e:	4b33      	ldr	r3, [pc, #204]	; (800494c <HAL_RCC_OscConfig+0x4b4>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fd ff5a 	bl	800273c <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488c:	f7fd ff56 	bl	800273c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e093      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489e:	4b29      	ldr	r3, [pc, #164]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69da      	ldr	r2, [r3, #28]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	019b      	lsls	r3, r3, #6
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	3b01      	subs	r3, #1
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	061b      	lsls	r3, r3, #24
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	071b      	lsls	r3, r3, #28
 80048d6:	491b      	ldr	r1, [pc, #108]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <HAL_RCC_OscConfig+0x4b4>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e2:	f7fd ff2b 	bl	800273c <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fd ff27 	bl	800273c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e064      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x452>
 8004908:	e05c      	b.n	80049c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <HAL_RCC_OscConfig+0x4b4>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fd ff14 	bl	800273c <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004918:	f7fd ff10 	bl	800273c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e04d      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_RCC_OscConfig+0x4ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x480>
 8004936:	e045      	b.n	80049c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e040      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
 8004944:	40023800 	.word	0x40023800
 8004948:	40007000 	.word	0x40007000
 800494c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004950:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <HAL_RCC_OscConfig+0x538>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d030      	beq.n	80049c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d129      	bne.n	80049c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d122      	bne.n	80049c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004988:	4293      	cmp	r3, r2
 800498a:	d119      	bne.n	80049c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	3b01      	subs	r3, #1
 800499a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d10f      	bne.n	80049c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800

080049d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e07b      	b.n	8004ade <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d108      	bne.n	8004a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f6:	d009      	beq.n	8004a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]
 80049fe:	e005      	b.n	8004a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fd fbe8 	bl	80021fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	ea42 0103 	orr.w	r1, r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0104 	and.w	r1, r3, #4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f003 0210 	and.w	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004acc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b088      	sub	sp, #32
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_SPI_Transmit+0x22>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e126      	b.n	8004d56 <HAL_SPI_Transmit+0x270>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b10:	f7fd fe14 	bl	800273c <HAL_GetTick>
 8004b14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
 8004b28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b2a:	e10b      	b.n	8004d44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_SPI_Transmit+0x52>
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b3c:	e102      	b.n	8004d44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2203      	movs	r2, #3
 8004b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	88fa      	ldrh	r2, [r7, #6]
 8004b56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b84:	d10f      	bne.n	8004ba6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d007      	beq.n	8004bc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bcc:	d14b      	bne.n	8004c66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_SPI_Transmit+0xf6>
 8004bd6:	8afb      	ldrh	r3, [r7, #22]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d13e      	bne.n	8004c5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	881a      	ldrh	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	1c9a      	adds	r2, r3, #2
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c00:	e02b      	b.n	8004c5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d112      	bne.n	8004c36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	881a      	ldrh	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	1c9a      	adds	r2, r3, #2
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c34:	e011      	b.n	8004c5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c36:	f7fd fd81 	bl	800273c <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d803      	bhi.n	8004c4e <HAL_SPI_Transmit+0x168>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d102      	bne.n	8004c54 <HAL_SPI_Transmit+0x16e>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c58:	e074      	b.n	8004d44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ce      	bne.n	8004c02 <HAL_SPI_Transmit+0x11c>
 8004c64:	e04c      	b.n	8004d00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_SPI_Transmit+0x18e>
 8004c6e:	8afb      	ldrh	r3, [r7, #22]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d140      	bne.n	8004cf6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c9a:	e02c      	b.n	8004cf6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d113      	bne.n	8004cd2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cd0:	e011      	b.n	8004cf6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cd2:	f7fd fd33 	bl	800273c <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d803      	bhi.n	8004cea <HAL_SPI_Transmit+0x204>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d102      	bne.n	8004cf0 <HAL_SPI_Transmit+0x20a>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cf4:	e026      	b.n	8004d44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1cd      	bne.n	8004c9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fb27 	bl	8005358 <SPI_EndRxTxTransaction>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e000      	b.n	8004d44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d54:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_SPI_TransmitReceive_IT+0x20>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e075      	b.n	8004e6c <HAL_SPI_TransmitReceive_IT+0x10c>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d8e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d96:	7dbb      	ldrb	r3, [r7, #22]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d00d      	beq.n	8004db8 <HAL_SPI_TransmitReceive_IT+0x58>
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da2:	d106      	bne.n	8004db2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <HAL_SPI_TransmitReceive_IT+0x52>
 8004dac:	7dbb      	ldrb	r3, [r7, #22]
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
 8004db4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004db6:	e054      	b.n	8004e62 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_SPI_TransmitReceive_IT+0x6a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_SPI_TransmitReceive_IT+0x6a>
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dce:	e048      	b.n	8004e62 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d003      	beq.n	8004de4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2205      	movs	r2, #5
 8004de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	887a      	ldrh	r2, [r7, #2]
 8004df4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	887a      	ldrh	r2, [r7, #2]
 8004dfa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	887a      	ldrh	r2, [r7, #2]
 8004e06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	887a      	ldrh	r2, [r7, #2]
 8004e0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d006      	beq.n	8004e24 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44
 8004e22:	e005      	b.n	8004e30 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <HAL_SPI_TransmitReceive_IT+0x120>)
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <HAL_SPI_TransmitReceive_IT+0x124>)
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004e3e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d008      	beq.n	8004e60 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	e000      	b.n	8004e62 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8004e60:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	08005189 	.word	0x08005189
 8004e7c:	080051e9 	.word	0x080051e9
 8004e80:	080050c5 	.word	0x080050c5
 8004e84:	08005129 	.word	0x08005129

08004e88 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	099b      	lsrs	r3, r3, #6
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10f      	bne.n	8004ecc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d004      	beq.n	8004ecc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
    return;
 8004eca:	e0d7      	b.n	800507c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_SPI_IRQHandler+0x66>
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	09db      	lsrs	r3, r3, #7
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
    return;
 8004eec:	e0c6      	b.n	800507c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10c      	bne.n	8004f14 <HAL_SPI_IRQHandler+0x8c>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	099b      	lsrs	r3, r3, #6
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 80b4 	beq.w	800507c <HAL_SPI_IRQHandler+0x1f4>
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80ad 	beq.w	800507c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	099b      	lsrs	r3, r3, #6
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d023      	beq.n	8004f76 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d011      	beq.n	8004f5e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f043 0204 	orr.w	r2, r3, #4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	e00b      	b.n	8004f76 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	613b      	str	r3, [r7, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	693b      	ldr	r3, [r7, #16]
        return;
 8004f74:	e082      	b.n	800507c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d014      	beq.n	8004fac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	f043 0201 	orr.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00c      	beq.n	8004fd2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbc:	f043 0208 	orr.w	r2, r3, #8
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d04f      	beq.n	800507a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fe8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d104      	bne.n	8005006 <HAL_SPI_IRQHandler+0x17e>
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d034      	beq.n	8005070 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0203 	bic.w	r2, r2, #3
 8005014:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d011      	beq.n	8005042 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005022:	4a18      	ldr	r2, [pc, #96]	; (8005084 <HAL_SPI_IRQHandler+0x1fc>)
 8005024:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe fa60 	bl	80034f0 <HAL_DMA_Abort_IT>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005046:	2b00      	cmp	r3, #0
 8005048:	d016      	beq.n	8005078 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504e:	4a0d      	ldr	r2, [pc, #52]	; (8005084 <HAL_SPI_IRQHandler+0x1fc>)
 8005050:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fa4a 	bl	80034f0 <HAL_DMA_Abort_IT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800506e:	e003      	b.n	8005078 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f809 	bl	8005088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005076:	e000      	b.n	800507a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005078:	bf00      	nop
    return;
 800507a:	bf00      	nop
  }
}
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	0800509d 	.word	0x0800509d

08005088 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff ffe6 	bl	8005088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f103 020c 	add.w	r2, r3, #12
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10f      	bne.n	8005120 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800510e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f95e 	bl	80053dc <SPI_CloseRxTx_ISR>
    }
  }
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	7812      	ldrb	r2, [r2, #0]
 800513c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515a:	b29b      	uxth	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10f      	bne.n	8005180 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800516e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f92e 	bl	80053dc <SPI_CloseRxTx_ISR>
    }
  }
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	b292      	uxth	r2, r2
 800519c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	1c9a      	adds	r2, r3, #2
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10f      	bne.n	80051e0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f8fe 	bl	80053dc <SPI_CloseRxTx_ISR>
    }
  }
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	881a      	ldrh	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	1c9a      	adds	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10f      	bne.n	800523e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800522c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8cf 	bl	80053dc <SPI_CloseRxTx_ISR>
    }
  }
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005258:	f7fd fa70 	bl	800273c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	4413      	add	r3, r2
 8005266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005268:	f7fd fa68 	bl	800273c <HAL_GetTick>
 800526c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800526e:	4b39      	ldr	r3, [pc, #228]	; (8005354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	015b      	lsls	r3, r3, #5
 8005274:	0d1b      	lsrs	r3, r3, #20
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800527e:	e054      	b.n	800532a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d050      	beq.n	800532a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005288:	f7fd fa58 	bl	800273c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	429a      	cmp	r2, r3
 8005296:	d902      	bls.n	800529e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d13d      	bne.n	800531a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b6:	d111      	bne.n	80052dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c0:	d004      	beq.n	80052cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ca:	d107      	bne.n	80052dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e4:	d10f      	bne.n	8005306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e017      	b.n	800534a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3b01      	subs	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4013      	ands	r3, r2
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	429a      	cmp	r2, r3
 8005338:	bf0c      	ite	eq
 800533a:	2301      	moveq	r3, #1
 800533c:	2300      	movne	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	429a      	cmp	r2, r3
 8005346:	d19b      	bne.n	8005280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000004 	.word	0x20000004

08005358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005364:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <SPI_EndRxTxTransaction+0x7c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <SPI_EndRxTxTransaction+0x80>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	0d5b      	lsrs	r3, r3, #21
 8005370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005382:	d112      	bne.n	80053aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	2180      	movs	r1, #128	; 0x80
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff ff5a 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e00f      	b.n	80053ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b80      	cmp	r3, #128	; 0x80
 80053c2:	d0f2      	beq.n	80053aa <SPI_EndRxTxTransaction+0x52>
 80053c4:	e000      	b.n	80053c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80053c6:	bf00      	nop
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000004 	.word	0x20000004
 80053d8:	165e9f81 	.word	0x165e9f81

080053dc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80053e4:	4b35      	ldr	r3, [pc, #212]	; (80054bc <SPI_CloseRxTx_ISR+0xe0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a35      	ldr	r2, [pc, #212]	; (80054c0 <SPI_CloseRxTx_ISR+0xe4>)
 80053ea:	fba2 2303 	umull	r2, r3, r2, r3
 80053ee:	0a5b      	lsrs	r3, r3, #9
 80053f0:	2264      	movs	r2, #100	; 0x64
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
 80053f6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053f8:	f7fd f9a0 	bl	800273c <HAL_GetTick>
 80053fc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0220 	bic.w	r2, r2, #32
 800540c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005418:	f043 0220 	orr.w	r2, r3, #32
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005420:	e009      	b.n	8005436 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	3b01      	subs	r3, #1
 8005426:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0eb      	beq.n	800540e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	2164      	movs	r1, #100	; 0x64
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff ff8c 	bl	8005358 <SPI_EndRxTxTransaction>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005474:	2b00      	cmp	r3, #0
 8005476:	d115      	bne.n	80054a4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b04      	cmp	r3, #4
 8005482:	d107      	bne.n	8005494 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fb fd8f 	bl	8000fb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005492:	e00e      	b.n	80054b2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7fb fd91 	bl	8000fc4 <HAL_SPI_TxRxCpltCallback>
}
 80054a2:	e006      	b.n	80054b2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fdeb 	bl	8005088 <HAL_SPI_ErrorCallback>
}
 80054b2:	bf00      	nop
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000004 	.word	0x20000004
 80054c0:	057619f1 	.word	0x057619f1

080054c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e041      	b.n	800555a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fc ff40 	bl	8002370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3304      	adds	r3, #4
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f000 fd96 	bl	8006034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d001      	beq.n	800557c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e046      	b.n	800560a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a23      	ldr	r2, [pc, #140]	; (8005618 <HAL_TIM_Base_Start+0xb4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d022      	beq.n	80055d4 <HAL_TIM_Base_Start+0x70>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005596:	d01d      	beq.n	80055d4 <HAL_TIM_Base_Start+0x70>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1f      	ldr	r2, [pc, #124]	; (800561c <HAL_TIM_Base_Start+0xb8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d018      	beq.n	80055d4 <HAL_TIM_Base_Start+0x70>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1e      	ldr	r2, [pc, #120]	; (8005620 <HAL_TIM_Base_Start+0xbc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d013      	beq.n	80055d4 <HAL_TIM_Base_Start+0x70>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <HAL_TIM_Base_Start+0xc0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00e      	beq.n	80055d4 <HAL_TIM_Base_Start+0x70>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1b      	ldr	r2, [pc, #108]	; (8005628 <HAL_TIM_Base_Start+0xc4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d009      	beq.n	80055d4 <HAL_TIM_Base_Start+0x70>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a19      	ldr	r2, [pc, #100]	; (800562c <HAL_TIM_Base_Start+0xc8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_TIM_Base_Start+0x70>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a18      	ldr	r2, [pc, #96]	; (8005630 <HAL_TIM_Base_Start+0xcc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d111      	bne.n	80055f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b06      	cmp	r3, #6
 80055e4:	d010      	beq.n	8005608 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f6:	e007      	b.n	8005608 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40010000 	.word	0x40010000
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	40000c00 	.word	0x40000c00
 8005628:	40010400 	.word	0x40010400
 800562c:	40014000 	.word	0x40014000
 8005630:	40001800 	.word	0x40001800

08005634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e04e      	b.n	80056ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a23      	ldr	r2, [pc, #140]	; (80056f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d022      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d01d      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1f      	ldr	r2, [pc, #124]	; (80056fc <HAL_TIM_Base_Start_IT+0xc8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <HAL_TIM_Base_Start_IT+0xcc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1c      	ldr	r2, [pc, #112]	; (8005704 <HAL_TIM_Base_Start_IT+0xd0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1b      	ldr	r2, [pc, #108]	; (8005708 <HAL_TIM_Base_Start_IT+0xd4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a19      	ldr	r2, [pc, #100]	; (800570c <HAL_TIM_Base_Start_IT+0xd8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a18      	ldr	r2, [pc, #96]	; (8005710 <HAL_TIM_Base_Start_IT+0xdc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d111      	bne.n	80056d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b06      	cmp	r3, #6
 80056c4:	d010      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0201 	orr.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d6:	e007      	b.n	80056e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40010400 	.word	0x40010400
 800570c:	40014000 	.word	0x40014000
 8005710:	40001800 	.word	0x40001800

08005714 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e041      	b.n	80057aa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f839 	bl	80057b2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f000 fc6e 	bl	8006034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e041      	b.n	800585c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f839 	bl	8005864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f000 fc15 	bl	8006034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <HAL_TIM_PWM_Start+0x24>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	bf14      	ite	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2300      	moveq	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	e022      	b.n	80058e2 <HAL_TIM_PWM_Start+0x6a>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d109      	bne.n	80058b6 <HAL_TIM_PWM_Start+0x3e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	bf14      	ite	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	2300      	moveq	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	e015      	b.n	80058e2 <HAL_TIM_PWM_Start+0x6a>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d109      	bne.n	80058d0 <HAL_TIM_PWM_Start+0x58>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	bf14      	ite	ne
 80058c8:	2301      	movne	r3, #1
 80058ca:	2300      	moveq	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	e008      	b.n	80058e2 <HAL_TIM_PWM_Start+0x6a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b01      	cmp	r3, #1
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e07c      	b.n	80059e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Start+0x82>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058f8:	e013      	b.n	8005922 <HAL_TIM_PWM_Start+0xaa>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Start+0x92>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005908:	e00b      	b.n	8005922 <HAL_TIM_PWM_Start+0xaa>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Start+0xa2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005918:	e003      	b.n	8005922 <HAL_TIM_PWM_Start+0xaa>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fe6c 	bl	8006608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a2d      	ldr	r2, [pc, #180]	; (80059ec <HAL_TIM_PWM_Start+0x174>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <HAL_TIM_PWM_Start+0xcc>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a2c      	ldr	r2, [pc, #176]	; (80059f0 <HAL_TIM_PWM_Start+0x178>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d101      	bne.n	8005948 <HAL_TIM_PWM_Start+0xd0>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <HAL_TIM_PWM_Start+0xd2>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800595c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a22      	ldr	r2, [pc, #136]	; (80059ec <HAL_TIM_PWM_Start+0x174>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d022      	beq.n	80059ae <HAL_TIM_PWM_Start+0x136>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005970:	d01d      	beq.n	80059ae <HAL_TIM_PWM_Start+0x136>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1f      	ldr	r2, [pc, #124]	; (80059f4 <HAL_TIM_PWM_Start+0x17c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d018      	beq.n	80059ae <HAL_TIM_PWM_Start+0x136>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <HAL_TIM_PWM_Start+0x180>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <HAL_TIM_PWM_Start+0x136>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1c      	ldr	r2, [pc, #112]	; (80059fc <HAL_TIM_PWM_Start+0x184>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00e      	beq.n	80059ae <HAL_TIM_PWM_Start+0x136>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <HAL_TIM_PWM_Start+0x178>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_TIM_PWM_Start+0x136>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a18      	ldr	r2, [pc, #96]	; (8005a00 <HAL_TIM_PWM_Start+0x188>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_TIM_PWM_Start+0x136>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a16      	ldr	r2, [pc, #88]	; (8005a04 <HAL_TIM_PWM_Start+0x18c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d111      	bne.n	80059d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b06      	cmp	r3, #6
 80059be:	d010      	beq.n	80059e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d0:	e007      	b.n	80059e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40010000 	.word	0x40010000
 80059f0:	40010400 	.word	0x40010400
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40000c00 	.word	0x40000c00
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40001800 	.word	0x40001800

08005a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d122      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d11b      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0202 	mvn.w	r2, #2
 8005a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fad3 	bl	8005ff6 <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fac5 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fad6 	bl	800600a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d122      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0204 	mvn.w	r2, #4
 8005a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 faa9 	bl	8005ff6 <HAL_TIM_IC_CaptureCallback>
 8005aa4:	e005      	b.n	8005ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa9b 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 faac 	bl	800600a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d122      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d11b      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0208 	mvn.w	r2, #8
 8005adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fa7f 	bl	8005ff6 <HAL_TIM_IC_CaptureCallback>
 8005af8:	e005      	b.n	8005b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fa71 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fa82 	bl	800600a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d122      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d11b      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0210 	mvn.w	r2, #16
 8005b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2208      	movs	r2, #8
 8005b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa55 	bl	8005ff6 <HAL_TIM_IC_CaptureCallback>
 8005b4c:	e005      	b.n	8005b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fa47 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fa58 	bl	800600a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10e      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d107      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0201 	mvn.w	r2, #1
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fb f9ae 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d10e      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d107      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fe26 	bl	8006804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d10e      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d107      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa1d 	bl	800601e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d10e      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d107      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0220 	mvn.w	r2, #32
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fdf0 	bl	80067f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e048      	b.n	8005cc8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b0c      	cmp	r3, #12
 8005c42:	d839      	bhi.n	8005cb8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c81 	.word	0x08005c81
 8005c50:	08005cb9 	.word	0x08005cb9
 8005c54:	08005cb9 	.word	0x08005cb9
 8005c58:	08005cb9 	.word	0x08005cb9
 8005c5c:	08005c8f 	.word	0x08005c8f
 8005c60:	08005cb9 	.word	0x08005cb9
 8005c64:	08005cb9 	.word	0x08005cb9
 8005c68:	08005cb9 	.word	0x08005cb9
 8005c6c:	08005c9d 	.word	0x08005c9d
 8005c70:	08005cb9 	.word	0x08005cb9
 8005c74:	08005cb9 	.word	0x08005cb9
 8005c78:	08005cb9 	.word	0x08005cb9
 8005c7c:	08005cab 	.word	0x08005cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fa74 	bl	8006174 <TIM_OC1_SetConfig>
      break;
 8005c8c:	e017      	b.n	8005cbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fadd 	bl	8006254 <TIM_OC2_SetConfig>
      break;
 8005c9a:	e010      	b.n	8005cbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fb4c 	bl	8006340 <TIM_OC3_SetConfig>
      break;
 8005ca8:	e009      	b.n	8005cbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fbb9 	bl	8006428 <TIM_OC4_SetConfig>
      break;
 8005cb6:	e002      	b.n	8005cbe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	75fb      	strb	r3, [r7, #23]
      break;
 8005cbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e0ae      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b0c      	cmp	r3, #12
 8005cfa:	f200 809f 	bhi.w	8005e3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cfe:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005e3d 	.word	0x08005e3d
 8005d0c:	08005e3d 	.word	0x08005e3d
 8005d10:	08005e3d 	.word	0x08005e3d
 8005d14:	08005d79 	.word	0x08005d79
 8005d18:	08005e3d 	.word	0x08005e3d
 8005d1c:	08005e3d 	.word	0x08005e3d
 8005d20:	08005e3d 	.word	0x08005e3d
 8005d24:	08005dbb 	.word	0x08005dbb
 8005d28:	08005e3d 	.word	0x08005e3d
 8005d2c:	08005e3d 	.word	0x08005e3d
 8005d30:	08005e3d 	.word	0x08005e3d
 8005d34:	08005dfb 	.word	0x08005dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fa18 	bl	8006174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0208 	orr.w	r2, r2, #8
 8005d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0204 	bic.w	r2, r2, #4
 8005d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6999      	ldr	r1, [r3, #24]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	619a      	str	r2, [r3, #24]
      break;
 8005d76:	e064      	b.n	8005e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fa68 	bl	8006254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6999      	ldr	r1, [r3, #24]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	021a      	lsls	r2, r3, #8
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	619a      	str	r2, [r3, #24]
      break;
 8005db8:	e043      	b.n	8005e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fabd 	bl	8006340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0208 	orr.w	r2, r2, #8
 8005dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0204 	bic.w	r2, r2, #4
 8005de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69d9      	ldr	r1, [r3, #28]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	61da      	str	r2, [r3, #28]
      break;
 8005df8:	e023      	b.n	8005e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fb11 	bl	8006428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69d9      	ldr	r1, [r3, #28]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	021a      	lsls	r2, r3, #8
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	61da      	str	r2, [r3, #28]
      break;
 8005e3a:	e002      	b.n	8005e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_TIM_ConfigClockSource+0x1c>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e0b4      	b.n	8005fda <HAL_TIM_ConfigClockSource+0x186>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea8:	d03e      	beq.n	8005f28 <HAL_TIM_ConfigClockSource+0xd4>
 8005eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eae:	f200 8087 	bhi.w	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb6:	f000 8086 	beq.w	8005fc6 <HAL_TIM_ConfigClockSource+0x172>
 8005eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebe:	d87f      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec0:	2b70      	cmp	r3, #112	; 0x70
 8005ec2:	d01a      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0xa6>
 8005ec4:	2b70      	cmp	r3, #112	; 0x70
 8005ec6:	d87b      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec8:	2b60      	cmp	r3, #96	; 0x60
 8005eca:	d050      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x11a>
 8005ecc:	2b60      	cmp	r3, #96	; 0x60
 8005ece:	d877      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed0:	2b50      	cmp	r3, #80	; 0x50
 8005ed2:	d03c      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0xfa>
 8005ed4:	2b50      	cmp	r3, #80	; 0x50
 8005ed6:	d873      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d058      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x13a>
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d86f      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee0:	2b30      	cmp	r3, #48	; 0x30
 8005ee2:	d064      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x15a>
 8005ee4:	2b30      	cmp	r3, #48	; 0x30
 8005ee6:	d86b      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d060      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x15a>
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d867      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d05c      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x15a>
 8005ef4:	2b10      	cmp	r3, #16
 8005ef6:	d05a      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x15a>
 8005ef8:	e062      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6899      	ldr	r1, [r3, #8]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f000 fb5d 	bl	80065c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	609a      	str	r2, [r3, #8]
      break;
 8005f26:	e04f      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	6899      	ldr	r1, [r3, #8]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f000 fb46 	bl	80065c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f4a:	609a      	str	r2, [r3, #8]
      break;
 8005f4c:	e03c      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	6859      	ldr	r1, [r3, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f000 faba 	bl	80064d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2150      	movs	r1, #80	; 0x50
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fb13 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 8005f6c:	e02c      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6859      	ldr	r1, [r3, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f000 fad9 	bl	8006532 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2160      	movs	r1, #96	; 0x60
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fb03 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 8005f8c:	e01c      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6859      	ldr	r1, [r3, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f000 fa9a 	bl	80064d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2140      	movs	r1, #64	; 0x40
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 faf3 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 8005fac:	e00c      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f000 faea 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 8005fbe:	e003      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc4:	e000      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
	...

08006034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a40      	ldr	r2, [pc, #256]	; (8006148 <TIM_Base_SetConfig+0x114>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d013      	beq.n	8006074 <TIM_Base_SetConfig+0x40>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006052:	d00f      	beq.n	8006074 <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a3d      	ldr	r2, [pc, #244]	; (800614c <TIM_Base_SetConfig+0x118>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00b      	beq.n	8006074 <TIM_Base_SetConfig+0x40>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a3c      	ldr	r2, [pc, #240]	; (8006150 <TIM_Base_SetConfig+0x11c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d007      	beq.n	8006074 <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a3b      	ldr	r2, [pc, #236]	; (8006154 <TIM_Base_SetConfig+0x120>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a3a      	ldr	r2, [pc, #232]	; (8006158 <TIM_Base_SetConfig+0x124>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d108      	bne.n	8006086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2f      	ldr	r2, [pc, #188]	; (8006148 <TIM_Base_SetConfig+0x114>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d02b      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006094:	d027      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a2c      	ldr	r2, [pc, #176]	; (800614c <TIM_Base_SetConfig+0x118>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d023      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2b      	ldr	r2, [pc, #172]	; (8006150 <TIM_Base_SetConfig+0x11c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d01f      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a2a      	ldr	r2, [pc, #168]	; (8006154 <TIM_Base_SetConfig+0x120>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01b      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a29      	ldr	r2, [pc, #164]	; (8006158 <TIM_Base_SetConfig+0x124>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d017      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a28      	ldr	r2, [pc, #160]	; (800615c <TIM_Base_SetConfig+0x128>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a27      	ldr	r2, [pc, #156]	; (8006160 <TIM_Base_SetConfig+0x12c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00f      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a26      	ldr	r2, [pc, #152]	; (8006164 <TIM_Base_SetConfig+0x130>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00b      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a25      	ldr	r2, [pc, #148]	; (8006168 <TIM_Base_SetConfig+0x134>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d007      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a24      	ldr	r2, [pc, #144]	; (800616c <TIM_Base_SetConfig+0x138>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a23      	ldr	r2, [pc, #140]	; (8006170 <TIM_Base_SetConfig+0x13c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d108      	bne.n	80060f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a0a      	ldr	r2, [pc, #40]	; (8006148 <TIM_Base_SetConfig+0x114>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0xf8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a0c      	ldr	r2, [pc, #48]	; (8006158 <TIM_Base_SetConfig+0x124>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d103      	bne.n	8006134 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	615a      	str	r2, [r3, #20]
}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40010000 	.word	0x40010000
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40010400 	.word	0x40010400
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800
 8006168:	40001800 	.word	0x40001800
 800616c:	40001c00 	.word	0x40001c00
 8006170:	40002000 	.word	0x40002000

08006174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	f023 0201 	bic.w	r2, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0303 	bic.w	r3, r3, #3
 80061aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f023 0302 	bic.w	r3, r3, #2
 80061bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a20      	ldr	r2, [pc, #128]	; (800624c <TIM_OC1_SetConfig+0xd8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC1_SetConfig+0x64>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <TIM_OC1_SetConfig+0xdc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d10c      	bne.n	80061f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f023 0308 	bic.w	r3, r3, #8
 80061de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 0304 	bic.w	r3, r3, #4
 80061f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a15      	ldr	r2, [pc, #84]	; (800624c <TIM_OC1_SetConfig+0xd8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_OC1_SetConfig+0x8e>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a14      	ldr	r2, [pc, #80]	; (8006250 <TIM_OC1_SetConfig+0xdc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d111      	bne.n	8006226 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	621a      	str	r2, [r3, #32]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40010000 	.word	0x40010000
 8006250:	40010400 	.word	0x40010400

08006254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f023 0210 	bic.w	r2, r3, #16
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f023 0320 	bic.w	r3, r3, #32
 800629e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a22      	ldr	r2, [pc, #136]	; (8006338 <TIM_OC2_SetConfig+0xe4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_OC2_SetConfig+0x68>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a21      	ldr	r2, [pc, #132]	; (800633c <TIM_OC2_SetConfig+0xe8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d10d      	bne.n	80062d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a17      	ldr	r2, [pc, #92]	; (8006338 <TIM_OC2_SetConfig+0xe4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_OC2_SetConfig+0x94>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a16      	ldr	r2, [pc, #88]	; (800633c <TIM_OC2_SetConfig+0xe8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d113      	bne.n	8006310 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4313      	orrs	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40010000 	.word	0x40010000
 800633c:	40010400 	.word	0x40010400

08006340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a21      	ldr	r2, [pc, #132]	; (8006420 <TIM_OC3_SetConfig+0xe0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d003      	beq.n	80063a6 <TIM_OC3_SetConfig+0x66>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a20      	ldr	r2, [pc, #128]	; (8006424 <TIM_OC3_SetConfig+0xe4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d10d      	bne.n	80063c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a16      	ldr	r2, [pc, #88]	; (8006420 <TIM_OC3_SetConfig+0xe0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_OC3_SetConfig+0x92>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a15      	ldr	r2, [pc, #84]	; (8006424 <TIM_OC3_SetConfig+0xe4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d113      	bne.n	80063fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	621a      	str	r2, [r3, #32]
}
 8006414:	bf00      	nop
 8006416:	371c      	adds	r7, #28
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	40010000 	.word	0x40010000
 8006424:	40010400 	.word	0x40010400

08006428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	031b      	lsls	r3, r3, #12
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a12      	ldr	r2, [pc, #72]	; (80064cc <TIM_OC4_SetConfig+0xa4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_OC4_SetConfig+0x68>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a11      	ldr	r2, [pc, #68]	; (80064d0 <TIM_OC4_SetConfig+0xa8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d109      	bne.n	80064a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	019b      	lsls	r3, r3, #6
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	621a      	str	r2, [r3, #32]
}
 80064be:	bf00      	nop
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40010000 	.word	0x40010000
 80064d0:	40010400 	.word	0x40010400

080064d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f023 0201 	bic.w	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f023 030a 	bic.w	r3, r3, #10
 8006510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006532:	b480      	push	{r7}
 8006534:	b087      	sub	sp, #28
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f023 0210 	bic.w	r2, r3, #16
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800655c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	031b      	lsls	r3, r3, #12
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800656e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f043 0307 	orr.w	r3, r3, #7
 80065b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	609a      	str	r2, [r3, #8]
}
 80065bc:	bf00      	nop
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	021a      	lsls	r2, r3, #8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	609a      	str	r2, [r3, #8]
}
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f003 031f 	and.w	r3, r3, #31
 800661a:	2201      	movs	r2, #1
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a1a      	ldr	r2, [r3, #32]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	43db      	mvns	r3, r3
 800662a:	401a      	ands	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1a      	ldr	r2, [r3, #32]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f003 031f 	and.w	r3, r3, #31
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	fa01 f303 	lsl.w	r3, r1, r3
 8006640:	431a      	orrs	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
	...

08006654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006668:	2302      	movs	r3, #2
 800666a:	e05a      	b.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a21      	ldr	r2, [pc, #132]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d022      	beq.n	80066f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b8:	d01d      	beq.n	80066f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1d      	ldr	r2, [pc, #116]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d018      	beq.n	80066f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1a      	ldr	r2, [pc, #104]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a18      	ldr	r2, [pc, #96]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a17      	ldr	r2, [pc, #92]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a15      	ldr	r2, [pc, #84]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d10c      	bne.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	4313      	orrs	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40010000 	.word	0x40010000
 8006734:	40000400 	.word	0x40000400
 8006738:	40000800 	.word	0x40000800
 800673c:	40000c00 	.word	0x40000c00
 8006740:	40010400 	.word	0x40010400
 8006744:	40014000 	.word	0x40014000
 8006748:	40001800 	.word	0x40001800

0800674c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006764:	2302      	movs	r3, #2
 8006766:	e03d      	b.n	80067e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e03f      	b.n	80068aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fb fe16 	bl	8002470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2224      	movs	r2, #36	; 0x24
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800685a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fc7b 	bl	8007158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695a      	ldr	r2, [r3, #20]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b0ba      	sub	sp, #232	; 0xe8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068da:	2300      	movs	r3, #0
 80068dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10f      	bne.n	800691a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d009      	beq.n	800691a <HAL_UART_IRQHandler+0x66>
 8006906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fb65 	bl	8006fe2 <UART_Receive_IT>
      return;
 8006918:	e256      	b.n	8006dc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800691a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80de 	beq.w	8006ae0 <HAL_UART_IRQHandler+0x22c>
 8006924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d106      	bne.n	800693e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006934:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80d1 	beq.w	8006ae0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00b      	beq.n	8006962 <HAL_UART_IRQHandler+0xae>
 800694a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800694e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	f043 0201 	orr.w	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <HAL_UART_IRQHandler+0xd2>
 800696e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f043 0202 	orr.w	r2, r3, #2
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <HAL_UART_IRQHandler+0xf6>
 8006992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f043 0204 	orr.w	r2, r3, #4
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d011      	beq.n	80069da <HAL_UART_IRQHandler+0x126>
 80069b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d105      	bne.n	80069ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f043 0208 	orr.w	r2, r3, #8
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 81ed 	beq.w	8006dbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d008      	beq.n	8006a02 <HAL_UART_IRQHandler+0x14e>
 80069f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 faf0 	bl	8006fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	bf0c      	ite	eq
 8006a10:	2301      	moveq	r3, #1
 8006a12:	2300      	movne	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d103      	bne.n	8006a2e <HAL_UART_IRQHandler+0x17a>
 8006a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d04f      	beq.n	8006ace <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9f8 	bl	8006e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3e:	2b40      	cmp	r3, #64	; 0x40
 8006a40:	d141      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3314      	adds	r3, #20
 8006a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3314      	adds	r3, #20
 8006a6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1d9      	bne.n	8006a42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d013      	beq.n	8006abe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	4a7d      	ldr	r2, [pc, #500]	; (8006c90 <HAL_UART_IRQHandler+0x3dc>)
 8006a9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fc fd24 	bl	80034f0 <HAL_DMA_Abort_IT>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006abc:	e00e      	b.n	8006adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f99a 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac4:	e00a      	b.n	8006adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f996 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006acc:	e006      	b.n	8006adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f992 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ada:	e170      	b.n	8006dbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006adc:	bf00      	nop
    return;
 8006ade:	e16e      	b.n	8006dbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	f040 814a 	bne.w	8006d7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8143 	beq.w	8006d7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 813c 	beq.w	8006d7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b06:	2300      	movs	r3, #0
 8006b08:	60bb      	str	r3, [r7, #8]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60bb      	str	r3, [r7, #8]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	60bb      	str	r3, [r7, #8]
 8006b1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	f040 80b4 	bne.w	8006c94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8140 	beq.w	8006dc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	f080 8139 	bcs.w	8006dc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b62:	f000 8088 	beq.w	8006c76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	330c      	adds	r3, #12
 8006b8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1d9      	bne.n	8006b66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3314      	adds	r3, #20
 8006bd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e1      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3314      	adds	r3, #20
 8006bf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3314      	adds	r3, #20
 8006c0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e3      	bne.n	8006bee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c46:	f023 0310 	bic.w	r3, r3, #16
 8006c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	330c      	adds	r3, #12
 8006c54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c58:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e3      	bne.n	8006c34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fc fbcd 	bl	8003410 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8c0 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c8c:	e099      	b.n	8006dc2 <HAL_UART_IRQHandler+0x50e>
 8006c8e:	bf00      	nop
 8006c90:	08006eeb 	.word	0x08006eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 808b 	beq.w	8006dc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8086 	beq.w	8006dc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ccc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	330c      	adds	r3, #12
 8006cda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cde:	647a      	str	r2, [r7, #68]	; 0x44
 8006ce0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e3      	bne.n	8006cba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3314      	adds	r3, #20
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	623b      	str	r3, [r7, #32]
   return(result);
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f023 0301 	bic.w	r3, r3, #1
 8006d08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3314      	adds	r3, #20
 8006d12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d16:	633a      	str	r2, [r7, #48]	; 0x30
 8006d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1e3      	bne.n	8006cf2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	330c      	adds	r3, #12
 8006d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0310 	bic.w	r3, r3, #16
 8006d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	330c      	adds	r3, #12
 8006d58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d5c:	61fa      	str	r2, [r7, #28]
 8006d5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	69b9      	ldr	r1, [r7, #24]
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	617b      	str	r3, [r7, #20]
   return(result);
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e3      	bne.n	8006d38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f848 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d7c:	e023      	b.n	8006dc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <HAL_UART_IRQHandler+0x4ea>
 8006d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f8bb 	bl	8006f12 <UART_Transmit_IT>
    return;
 8006d9c:	e014      	b.n	8006dc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00e      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x514>
 8006daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d008      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f8fb 	bl	8006fb2 <UART_EndTransmit_IT>
    return;
 8006dbc:	e004      	b.n	8006dc8 <HAL_UART_IRQHandler+0x514>
    return;
 8006dbe:	bf00      	nop
 8006dc0:	e002      	b.n	8006dc8 <HAL_UART_IRQHandler+0x514>
      return;
 8006dc2:	bf00      	nop
 8006dc4:	e000      	b.n	8006dc8 <HAL_UART_IRQHandler+0x514>
      return;
 8006dc6:	bf00      	nop
  }
}
 8006dc8:	37e8      	adds	r7, #232	; 0xe8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop

08006dd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b095      	sub	sp, #84	; 0x54
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e4c:	643a      	str	r2, [r7, #64]	; 0x40
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e5      	bne.n	8006e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3314      	adds	r3, #20
 8006e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d119      	bne.n	8006ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ebc:	61ba      	str	r2, [r7, #24]
 8006ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6979      	ldr	r1, [r7, #20]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ede:	bf00      	nop
 8006ee0:	3754      	adds	r7, #84	; 0x54
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff ff77 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b21      	cmp	r3, #33	; 0x21
 8006f24:	d13e      	bne.n	8006fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2e:	d114      	bne.n	8006f5a <UART_Transmit_IT+0x48>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d110      	bne.n	8006f5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	1c9a      	adds	r2, r3, #2
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	621a      	str	r2, [r3, #32]
 8006f58:	e008      	b.n	8006f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	1c59      	adds	r1, r3, #1
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6211      	str	r1, [r2, #32]
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10f      	bne.n	8006fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e000      	b.n	8006fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fa4:	2302      	movs	r3, #2
  }
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fefc 	bl	8006dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b08c      	sub	sp, #48	; 0x30
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b22      	cmp	r3, #34	; 0x22
 8006ff4:	f040 80ab 	bne.w	800714e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007000:	d117      	bne.n	8007032 <UART_Receive_IT+0x50>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d113      	bne.n	8007032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007020:	b29a      	uxth	r2, r3
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	1c9a      	adds	r2, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	629a      	str	r2, [r3, #40]	; 0x28
 8007030:	e026      	b.n	8007080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007038:	2300      	movs	r3, #0
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007044:	d007      	beq.n	8007056 <UART_Receive_IT+0x74>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <UART_Receive_IT+0x82>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e008      	b.n	8007076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4619      	mov	r1, r3
 800708e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007090:	2b00      	cmp	r3, #0
 8007092:	d15a      	bne.n	800714a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0220 	bic.w	r2, r2, #32
 80070a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695a      	ldr	r2, [r3, #20]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d135      	bne.n	8007140 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f023 0310 	bic.w	r3, r3, #16
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070fa:	623a      	str	r2, [r7, #32]
 80070fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	69f9      	ldr	r1, [r7, #28]
 8007100:	6a3a      	ldr	r2, [r7, #32]
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	61bb      	str	r3, [r7, #24]
   return(result);
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e5      	bne.n	80070da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	2b10      	cmp	r3, #16
 800711a:	d10a      	bne.n	8007132 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fe67 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
 800713e:	e002      	b.n	8007146 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff fe4f 	bl	8006de4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e002      	b.n	8007150 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	e000      	b.n	8007150 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800714e:	2302      	movs	r3, #2
  }
}
 8007150:	4618      	mov	r0, r3
 8007152:	3730      	adds	r7, #48	; 0x30
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800715c:	b0c0      	sub	sp, #256	; 0x100
 800715e:	af00      	add	r7, sp, #0
 8007160:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007174:	68d9      	ldr	r1, [r3, #12]
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	ea40 0301 	orr.w	r3, r0, r1
 8007180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	431a      	orrs	r2, r3
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	431a      	orrs	r2, r3
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071b0:	f021 010c 	bic.w	r1, r1, #12
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071be:	430b      	orrs	r3, r1
 80071c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d2:	6999      	ldr	r1, [r3, #24]
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	ea40 0301 	orr.w	r3, r0, r1
 80071de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b8f      	ldr	r3, [pc, #572]	; (8007424 <UART_SetConfig+0x2cc>)
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d005      	beq.n	80071f8 <UART_SetConfig+0xa0>
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b8d      	ldr	r3, [pc, #564]	; (8007428 <UART_SetConfig+0x2d0>)
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d104      	bne.n	8007202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071f8:	f7fc ff0a 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 80071fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007200:	e003      	b.n	800720a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007202:	f7fc fef1 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8007206:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007214:	f040 810c 	bne.w	8007430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800721c:	2200      	movs	r2, #0
 800721e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007222:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800722a:	4622      	mov	r2, r4
 800722c:	462b      	mov	r3, r5
 800722e:	1891      	adds	r1, r2, r2
 8007230:	65b9      	str	r1, [r7, #88]	; 0x58
 8007232:	415b      	adcs	r3, r3
 8007234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800723a:	4621      	mov	r1, r4
 800723c:	eb12 0801 	adds.w	r8, r2, r1
 8007240:	4629      	mov	r1, r5
 8007242:	eb43 0901 	adc.w	r9, r3, r1
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800725a:	4690      	mov	r8, r2
 800725c:	4699      	mov	r9, r3
 800725e:	4623      	mov	r3, r4
 8007260:	eb18 0303 	adds.w	r3, r8, r3
 8007264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007268:	462b      	mov	r3, r5
 800726a:	eb49 0303 	adc.w	r3, r9, r3
 800726e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800727e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007286:	460b      	mov	r3, r1
 8007288:	18db      	adds	r3, r3, r3
 800728a:	653b      	str	r3, [r7, #80]	; 0x50
 800728c:	4613      	mov	r3, r2
 800728e:	eb42 0303 	adc.w	r3, r2, r3
 8007292:	657b      	str	r3, [r7, #84]	; 0x54
 8007294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800729c:	f7f9 fca2 	bl	8000be4 <__aeabi_uldivmod>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4b61      	ldr	r3, [pc, #388]	; (800742c <UART_SetConfig+0x2d4>)
 80072a6:	fba3 2302 	umull	r2, r3, r3, r2
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	011c      	lsls	r4, r3, #4
 80072ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072c0:	4642      	mov	r2, r8
 80072c2:	464b      	mov	r3, r9
 80072c4:	1891      	adds	r1, r2, r2
 80072c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80072c8:	415b      	adcs	r3, r3
 80072ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072d0:	4641      	mov	r1, r8
 80072d2:	eb12 0a01 	adds.w	sl, r2, r1
 80072d6:	4649      	mov	r1, r9
 80072d8:	eb43 0b01 	adc.w	fp, r3, r1
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072f0:	4692      	mov	sl, r2
 80072f2:	469b      	mov	fp, r3
 80072f4:	4643      	mov	r3, r8
 80072f6:	eb1a 0303 	adds.w	r3, sl, r3
 80072fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072fe:	464b      	mov	r3, r9
 8007300:	eb4b 0303 	adc.w	r3, fp, r3
 8007304:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007314:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800731c:	460b      	mov	r3, r1
 800731e:	18db      	adds	r3, r3, r3
 8007320:	643b      	str	r3, [r7, #64]	; 0x40
 8007322:	4613      	mov	r3, r2
 8007324:	eb42 0303 	adc.w	r3, r2, r3
 8007328:	647b      	str	r3, [r7, #68]	; 0x44
 800732a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800732e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007332:	f7f9 fc57 	bl	8000be4 <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4611      	mov	r1, r2
 800733c:	4b3b      	ldr	r3, [pc, #236]	; (800742c <UART_SetConfig+0x2d4>)
 800733e:	fba3 2301 	umull	r2, r3, r3, r1
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	2264      	movs	r2, #100	; 0x64
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	1acb      	subs	r3, r1, r3
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007352:	4b36      	ldr	r3, [pc, #216]	; (800742c <UART_SetConfig+0x2d4>)
 8007354:	fba3 2302 	umull	r2, r3, r3, r2
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007360:	441c      	add	r4, r3
 8007362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007366:	2200      	movs	r2, #0
 8007368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800736c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007374:	4642      	mov	r2, r8
 8007376:	464b      	mov	r3, r9
 8007378:	1891      	adds	r1, r2, r2
 800737a:	63b9      	str	r1, [r7, #56]	; 0x38
 800737c:	415b      	adcs	r3, r3
 800737e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007384:	4641      	mov	r1, r8
 8007386:	1851      	adds	r1, r2, r1
 8007388:	6339      	str	r1, [r7, #48]	; 0x30
 800738a:	4649      	mov	r1, r9
 800738c:	414b      	adcs	r3, r1
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 0300 	mov.w	r3, #0
 8007398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800739c:	4659      	mov	r1, fp
 800739e:	00cb      	lsls	r3, r1, #3
 80073a0:	4651      	mov	r1, sl
 80073a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073a6:	4651      	mov	r1, sl
 80073a8:	00ca      	lsls	r2, r1, #3
 80073aa:	4610      	mov	r0, r2
 80073ac:	4619      	mov	r1, r3
 80073ae:	4603      	mov	r3, r0
 80073b0:	4642      	mov	r2, r8
 80073b2:	189b      	adds	r3, r3, r2
 80073b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073b8:	464b      	mov	r3, r9
 80073ba:	460a      	mov	r2, r1
 80073bc:	eb42 0303 	adc.w	r3, r2, r3
 80073c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073d8:	460b      	mov	r3, r1
 80073da:	18db      	adds	r3, r3, r3
 80073dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073de:	4613      	mov	r3, r2
 80073e0:	eb42 0303 	adc.w	r3, r2, r3
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073ee:	f7f9 fbf9 	bl	8000be4 <__aeabi_uldivmod>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4b0d      	ldr	r3, [pc, #52]	; (800742c <UART_SetConfig+0x2d4>)
 80073f8:	fba3 1302 	umull	r1, r3, r3, r2
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	2164      	movs	r1, #100	; 0x64
 8007400:	fb01 f303 	mul.w	r3, r1, r3
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	3332      	adds	r3, #50	; 0x32
 800740a:	4a08      	ldr	r2, [pc, #32]	; (800742c <UART_SetConfig+0x2d4>)
 800740c:	fba2 2303 	umull	r2, r3, r2, r3
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	f003 0207 	and.w	r2, r3, #7
 8007416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4422      	add	r2, r4
 800741e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007420:	e105      	b.n	800762e <UART_SetConfig+0x4d6>
 8007422:	bf00      	nop
 8007424:	40011000 	.word	0x40011000
 8007428:	40011400 	.word	0x40011400
 800742c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007434:	2200      	movs	r2, #0
 8007436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800743a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800743e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007442:	4642      	mov	r2, r8
 8007444:	464b      	mov	r3, r9
 8007446:	1891      	adds	r1, r2, r2
 8007448:	6239      	str	r1, [r7, #32]
 800744a:	415b      	adcs	r3, r3
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
 800744e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007452:	4641      	mov	r1, r8
 8007454:	1854      	adds	r4, r2, r1
 8007456:	4649      	mov	r1, r9
 8007458:	eb43 0501 	adc.w	r5, r3, r1
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	00eb      	lsls	r3, r5, #3
 8007466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800746a:	00e2      	lsls	r2, r4, #3
 800746c:	4614      	mov	r4, r2
 800746e:	461d      	mov	r5, r3
 8007470:	4643      	mov	r3, r8
 8007472:	18e3      	adds	r3, r4, r3
 8007474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007478:	464b      	mov	r3, r9
 800747a:	eb45 0303 	adc.w	r3, r5, r3
 800747e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800748e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800749e:	4629      	mov	r1, r5
 80074a0:	008b      	lsls	r3, r1, #2
 80074a2:	4621      	mov	r1, r4
 80074a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074a8:	4621      	mov	r1, r4
 80074aa:	008a      	lsls	r2, r1, #2
 80074ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074b0:	f7f9 fb98 	bl	8000be4 <__aeabi_uldivmod>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4b60      	ldr	r3, [pc, #384]	; (800763c <UART_SetConfig+0x4e4>)
 80074ba:	fba3 2302 	umull	r2, r3, r3, r2
 80074be:	095b      	lsrs	r3, r3, #5
 80074c0:	011c      	lsls	r4, r3, #4
 80074c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074d4:	4642      	mov	r2, r8
 80074d6:	464b      	mov	r3, r9
 80074d8:	1891      	adds	r1, r2, r2
 80074da:	61b9      	str	r1, [r7, #24]
 80074dc:	415b      	adcs	r3, r3
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e4:	4641      	mov	r1, r8
 80074e6:	1851      	adds	r1, r2, r1
 80074e8:	6139      	str	r1, [r7, #16]
 80074ea:	4649      	mov	r1, r9
 80074ec:	414b      	adcs	r3, r1
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074fc:	4659      	mov	r1, fp
 80074fe:	00cb      	lsls	r3, r1, #3
 8007500:	4651      	mov	r1, sl
 8007502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007506:	4651      	mov	r1, sl
 8007508:	00ca      	lsls	r2, r1, #3
 800750a:	4610      	mov	r0, r2
 800750c:	4619      	mov	r1, r3
 800750e:	4603      	mov	r3, r0
 8007510:	4642      	mov	r2, r8
 8007512:	189b      	adds	r3, r3, r2
 8007514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007518:	464b      	mov	r3, r9
 800751a:	460a      	mov	r2, r1
 800751c:	eb42 0303 	adc.w	r3, r2, r3
 8007520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	67bb      	str	r3, [r7, #120]	; 0x78
 800752e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800753c:	4649      	mov	r1, r9
 800753e:	008b      	lsls	r3, r1, #2
 8007540:	4641      	mov	r1, r8
 8007542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007546:	4641      	mov	r1, r8
 8007548:	008a      	lsls	r2, r1, #2
 800754a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800754e:	f7f9 fb49 	bl	8000be4 <__aeabi_uldivmod>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4b39      	ldr	r3, [pc, #228]	; (800763c <UART_SetConfig+0x4e4>)
 8007558:	fba3 1302 	umull	r1, r3, r3, r2
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	2164      	movs	r1, #100	; 0x64
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	3332      	adds	r3, #50	; 0x32
 800756a:	4a34      	ldr	r2, [pc, #208]	; (800763c <UART_SetConfig+0x4e4>)
 800756c:	fba2 2303 	umull	r2, r3, r2, r3
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007576:	441c      	add	r4, r3
 8007578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800757c:	2200      	movs	r2, #0
 800757e:	673b      	str	r3, [r7, #112]	; 0x70
 8007580:	677a      	str	r2, [r7, #116]	; 0x74
 8007582:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007586:	4642      	mov	r2, r8
 8007588:	464b      	mov	r3, r9
 800758a:	1891      	adds	r1, r2, r2
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	415b      	adcs	r3, r3
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007596:	4641      	mov	r1, r8
 8007598:	1851      	adds	r1, r2, r1
 800759a:	6039      	str	r1, [r7, #0]
 800759c:	4649      	mov	r1, r9
 800759e:	414b      	adcs	r3, r1
 80075a0:	607b      	str	r3, [r7, #4]
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075ae:	4659      	mov	r1, fp
 80075b0:	00cb      	lsls	r3, r1, #3
 80075b2:	4651      	mov	r1, sl
 80075b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075b8:	4651      	mov	r1, sl
 80075ba:	00ca      	lsls	r2, r1, #3
 80075bc:	4610      	mov	r0, r2
 80075be:	4619      	mov	r1, r3
 80075c0:	4603      	mov	r3, r0
 80075c2:	4642      	mov	r2, r8
 80075c4:	189b      	adds	r3, r3, r2
 80075c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075c8:	464b      	mov	r3, r9
 80075ca:	460a      	mov	r2, r1
 80075cc:	eb42 0303 	adc.w	r3, r2, r3
 80075d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	663b      	str	r3, [r7, #96]	; 0x60
 80075dc:	667a      	str	r2, [r7, #100]	; 0x64
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075ea:	4649      	mov	r1, r9
 80075ec:	008b      	lsls	r3, r1, #2
 80075ee:	4641      	mov	r1, r8
 80075f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075f4:	4641      	mov	r1, r8
 80075f6:	008a      	lsls	r2, r1, #2
 80075f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075fc:	f7f9 faf2 	bl	8000be4 <__aeabi_uldivmod>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4b0d      	ldr	r3, [pc, #52]	; (800763c <UART_SetConfig+0x4e4>)
 8007606:	fba3 1302 	umull	r1, r3, r3, r2
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	2164      	movs	r1, #100	; 0x64
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	3332      	adds	r3, #50	; 0x32
 8007618:	4a08      	ldr	r2, [pc, #32]	; (800763c <UART_SetConfig+0x4e4>)
 800761a:	fba2 2303 	umull	r2, r3, r2, r3
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	f003 020f 	and.w	r2, r3, #15
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4422      	add	r2, r4
 800762c:	609a      	str	r2, [r3, #8]
}
 800762e:	bf00      	nop
 8007630:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007634:	46bd      	mov	sp, r7
 8007636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800763a:	bf00      	nop
 800763c:	51eb851f 	.word	0x51eb851f

08007640 <ceil>:
 8007640:	ec51 0b10 	vmov	r0, r1, d0
 8007644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007648:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800764c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007650:	2e13      	cmp	r6, #19
 8007652:	ee10 5a10 	vmov	r5, s0
 8007656:	ee10 8a10 	vmov	r8, s0
 800765a:	460c      	mov	r4, r1
 800765c:	dc30      	bgt.n	80076c0 <ceil+0x80>
 800765e:	2e00      	cmp	r6, #0
 8007660:	da12      	bge.n	8007688 <ceil+0x48>
 8007662:	a335      	add	r3, pc, #212	; (adr r3, 8007738 <ceil+0xf8>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 fdd4 	bl	8000214 <__adddf3>
 800766c:	2200      	movs	r2, #0
 800766e:	2300      	movs	r3, #0
 8007670:	f7f9 fa16 	bl	8000aa0 <__aeabi_dcmpgt>
 8007674:	b128      	cbz	r0, 8007682 <ceil+0x42>
 8007676:	2c00      	cmp	r4, #0
 8007678:	db55      	blt.n	8007726 <ceil+0xe6>
 800767a:	432c      	orrs	r4, r5
 800767c:	d057      	beq.n	800772e <ceil+0xee>
 800767e:	4c30      	ldr	r4, [pc, #192]	; (8007740 <ceil+0x100>)
 8007680:	2500      	movs	r5, #0
 8007682:	4621      	mov	r1, r4
 8007684:	4628      	mov	r0, r5
 8007686:	e025      	b.n	80076d4 <ceil+0x94>
 8007688:	4f2e      	ldr	r7, [pc, #184]	; (8007744 <ceil+0x104>)
 800768a:	4137      	asrs	r7, r6
 800768c:	ea01 0307 	and.w	r3, r1, r7
 8007690:	4303      	orrs	r3, r0
 8007692:	d01f      	beq.n	80076d4 <ceil+0x94>
 8007694:	a328      	add	r3, pc, #160	; (adr r3, 8007738 <ceil+0xf8>)
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f7f8 fdbb 	bl	8000214 <__adddf3>
 800769e:	2200      	movs	r2, #0
 80076a0:	2300      	movs	r3, #0
 80076a2:	f7f9 f9fd 	bl	8000aa0 <__aeabi_dcmpgt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d0eb      	beq.n	8007682 <ceil+0x42>
 80076aa:	2c00      	cmp	r4, #0
 80076ac:	bfc2      	ittt	gt
 80076ae:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80076b2:	fa43 f606 	asrgt.w	r6, r3, r6
 80076b6:	19a4      	addgt	r4, r4, r6
 80076b8:	ea24 0407 	bic.w	r4, r4, r7
 80076bc:	2500      	movs	r5, #0
 80076be:	e7e0      	b.n	8007682 <ceil+0x42>
 80076c0:	2e33      	cmp	r6, #51	; 0x33
 80076c2:	dd0b      	ble.n	80076dc <ceil+0x9c>
 80076c4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80076c8:	d104      	bne.n	80076d4 <ceil+0x94>
 80076ca:	ee10 2a10 	vmov	r2, s0
 80076ce:	460b      	mov	r3, r1
 80076d0:	f7f8 fda0 	bl	8000214 <__adddf3>
 80076d4:	ec41 0b10 	vmov	d0, r0, r1
 80076d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076dc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80076e0:	f04f 33ff 	mov.w	r3, #4294967295
 80076e4:	fa23 f707 	lsr.w	r7, r3, r7
 80076e8:	4207      	tst	r7, r0
 80076ea:	d0f3      	beq.n	80076d4 <ceil+0x94>
 80076ec:	a312      	add	r3, pc, #72	; (adr r3, 8007738 <ceil+0xf8>)
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f7f8 fd8f 	bl	8000214 <__adddf3>
 80076f6:	2200      	movs	r2, #0
 80076f8:	2300      	movs	r3, #0
 80076fa:	f7f9 f9d1 	bl	8000aa0 <__aeabi_dcmpgt>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d0bf      	beq.n	8007682 <ceil+0x42>
 8007702:	2c00      	cmp	r4, #0
 8007704:	dd02      	ble.n	800770c <ceil+0xcc>
 8007706:	2e14      	cmp	r6, #20
 8007708:	d103      	bne.n	8007712 <ceil+0xd2>
 800770a:	3401      	adds	r4, #1
 800770c:	ea25 0507 	bic.w	r5, r5, r7
 8007710:	e7b7      	b.n	8007682 <ceil+0x42>
 8007712:	2301      	movs	r3, #1
 8007714:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007718:	fa03 f606 	lsl.w	r6, r3, r6
 800771c:	4435      	add	r5, r6
 800771e:	4545      	cmp	r5, r8
 8007720:	bf38      	it	cc
 8007722:	18e4      	addcc	r4, r4, r3
 8007724:	e7f2      	b.n	800770c <ceil+0xcc>
 8007726:	2500      	movs	r5, #0
 8007728:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800772c:	e7a9      	b.n	8007682 <ceil+0x42>
 800772e:	4625      	mov	r5, r4
 8007730:	e7a7      	b.n	8007682 <ceil+0x42>
 8007732:	bf00      	nop
 8007734:	f3af 8000 	nop.w
 8007738:	8800759c 	.word	0x8800759c
 800773c:	7e37e43c 	.word	0x7e37e43c
 8007740:	3ff00000 	.word	0x3ff00000
 8007744:	000fffff 	.word	0x000fffff

08007748 <sin>:
 8007748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800774a:	ec53 2b10 	vmov	r2, r3, d0
 800774e:	4828      	ldr	r0, [pc, #160]	; (80077f0 <sin+0xa8>)
 8007750:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007754:	4281      	cmp	r1, r0
 8007756:	dc07      	bgt.n	8007768 <sin+0x20>
 8007758:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80077e8 <sin+0xa0>
 800775c:	2000      	movs	r0, #0
 800775e:	b005      	add	sp, #20
 8007760:	f85d eb04 	ldr.w	lr, [sp], #4
 8007764:	f000 be6c 	b.w	8008440 <__kernel_sin>
 8007768:	4822      	ldr	r0, [pc, #136]	; (80077f4 <sin+0xac>)
 800776a:	4281      	cmp	r1, r0
 800776c:	dd09      	ble.n	8007782 <sin+0x3a>
 800776e:	ee10 0a10 	vmov	r0, s0
 8007772:	4619      	mov	r1, r3
 8007774:	f7f8 fd4c 	bl	8000210 <__aeabi_dsub>
 8007778:	ec41 0b10 	vmov	d0, r0, r1
 800777c:	b005      	add	sp, #20
 800777e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007782:	4668      	mov	r0, sp
 8007784:	f000 f838 	bl	80077f8 <__ieee754_rem_pio2>
 8007788:	f000 0003 	and.w	r0, r0, #3
 800778c:	2801      	cmp	r0, #1
 800778e:	d00c      	beq.n	80077aa <sin+0x62>
 8007790:	2802      	cmp	r0, #2
 8007792:	d011      	beq.n	80077b8 <sin+0x70>
 8007794:	b9f0      	cbnz	r0, 80077d4 <sin+0x8c>
 8007796:	ed9d 1b02 	vldr	d1, [sp, #8]
 800779a:	ed9d 0b00 	vldr	d0, [sp]
 800779e:	2001      	movs	r0, #1
 80077a0:	f000 fe4e 	bl	8008440 <__kernel_sin>
 80077a4:	ec51 0b10 	vmov	r0, r1, d0
 80077a8:	e7e6      	b.n	8007778 <sin+0x30>
 80077aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80077ae:	ed9d 0b00 	vldr	d0, [sp]
 80077b2:	f000 fa2d 	bl	8007c10 <__kernel_cos>
 80077b6:	e7f5      	b.n	80077a4 <sin+0x5c>
 80077b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80077bc:	ed9d 0b00 	vldr	d0, [sp]
 80077c0:	2001      	movs	r0, #1
 80077c2:	f000 fe3d 	bl	8008440 <__kernel_sin>
 80077c6:	ec53 2b10 	vmov	r2, r3, d0
 80077ca:	ee10 0a10 	vmov	r0, s0
 80077ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80077d2:	e7d1      	b.n	8007778 <sin+0x30>
 80077d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80077d8:	ed9d 0b00 	vldr	d0, [sp]
 80077dc:	f000 fa18 	bl	8007c10 <__kernel_cos>
 80077e0:	e7f1      	b.n	80077c6 <sin+0x7e>
 80077e2:	bf00      	nop
 80077e4:	f3af 8000 	nop.w
	...
 80077f0:	3fe921fb 	.word	0x3fe921fb
 80077f4:	7fefffff 	.word	0x7fefffff

080077f8 <__ieee754_rem_pio2>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	ed2d 8b02 	vpush	{d8}
 8007800:	ec55 4b10 	vmov	r4, r5, d0
 8007804:	4bca      	ldr	r3, [pc, #808]	; (8007b30 <__ieee754_rem_pio2+0x338>)
 8007806:	b08b      	sub	sp, #44	; 0x2c
 8007808:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800780c:	4598      	cmp	r8, r3
 800780e:	4682      	mov	sl, r0
 8007810:	9502      	str	r5, [sp, #8]
 8007812:	dc08      	bgt.n	8007826 <__ieee754_rem_pio2+0x2e>
 8007814:	2200      	movs	r2, #0
 8007816:	2300      	movs	r3, #0
 8007818:	ed80 0b00 	vstr	d0, [r0]
 800781c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007820:	f04f 0b00 	mov.w	fp, #0
 8007824:	e028      	b.n	8007878 <__ieee754_rem_pio2+0x80>
 8007826:	4bc3      	ldr	r3, [pc, #780]	; (8007b34 <__ieee754_rem_pio2+0x33c>)
 8007828:	4598      	cmp	r8, r3
 800782a:	dc78      	bgt.n	800791e <__ieee754_rem_pio2+0x126>
 800782c:	9b02      	ldr	r3, [sp, #8]
 800782e:	4ec2      	ldr	r6, [pc, #776]	; (8007b38 <__ieee754_rem_pio2+0x340>)
 8007830:	2b00      	cmp	r3, #0
 8007832:	ee10 0a10 	vmov	r0, s0
 8007836:	a3b0      	add	r3, pc, #704	; (adr r3, 8007af8 <__ieee754_rem_pio2+0x300>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	4629      	mov	r1, r5
 800783e:	dd39      	ble.n	80078b4 <__ieee754_rem_pio2+0xbc>
 8007840:	f7f8 fce6 	bl	8000210 <__aeabi_dsub>
 8007844:	45b0      	cmp	r8, r6
 8007846:	4604      	mov	r4, r0
 8007848:	460d      	mov	r5, r1
 800784a:	d01b      	beq.n	8007884 <__ieee754_rem_pio2+0x8c>
 800784c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007b00 <__ieee754_rem_pio2+0x308>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 fcdd 	bl	8000210 <__aeabi_dsub>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	e9ca 2300 	strd	r2, r3, [sl]
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	f7f8 fcd5 	bl	8000210 <__aeabi_dsub>
 8007866:	a3a6      	add	r3, pc, #664	; (adr r3, 8007b00 <__ieee754_rem_pio2+0x308>)
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f7f8 fcd0 	bl	8000210 <__aeabi_dsub>
 8007870:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007874:	f04f 0b01 	mov.w	fp, #1
 8007878:	4658      	mov	r0, fp
 800787a:	b00b      	add	sp, #44	; 0x2c
 800787c:	ecbd 8b02 	vpop	{d8}
 8007880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007884:	a3a0      	add	r3, pc, #640	; (adr r3, 8007b08 <__ieee754_rem_pio2+0x310>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f7f8 fcc1 	bl	8000210 <__aeabi_dsub>
 800788e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007b10 <__ieee754_rem_pio2+0x318>)
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	4604      	mov	r4, r0
 8007896:	460d      	mov	r5, r1
 8007898:	f7f8 fcba 	bl	8000210 <__aeabi_dsub>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	e9ca 2300 	strd	r2, r3, [sl]
 80078a4:	4620      	mov	r0, r4
 80078a6:	4629      	mov	r1, r5
 80078a8:	f7f8 fcb2 	bl	8000210 <__aeabi_dsub>
 80078ac:	a398      	add	r3, pc, #608	; (adr r3, 8007b10 <__ieee754_rem_pio2+0x318>)
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	e7db      	b.n	800786c <__ieee754_rem_pio2+0x74>
 80078b4:	f7f8 fcae 	bl	8000214 <__adddf3>
 80078b8:	45b0      	cmp	r8, r6
 80078ba:	4604      	mov	r4, r0
 80078bc:	460d      	mov	r5, r1
 80078be:	d016      	beq.n	80078ee <__ieee754_rem_pio2+0xf6>
 80078c0:	a38f      	add	r3, pc, #572	; (adr r3, 8007b00 <__ieee754_rem_pio2+0x308>)
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f7f8 fca5 	bl	8000214 <__adddf3>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	e9ca 2300 	strd	r2, r3, [sl]
 80078d2:	4620      	mov	r0, r4
 80078d4:	4629      	mov	r1, r5
 80078d6:	f7f8 fc9b 	bl	8000210 <__aeabi_dsub>
 80078da:	a389      	add	r3, pc, #548	; (adr r3, 8007b00 <__ieee754_rem_pio2+0x308>)
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f7f8 fc98 	bl	8000214 <__adddf3>
 80078e4:	f04f 3bff 	mov.w	fp, #4294967295
 80078e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80078ec:	e7c4      	b.n	8007878 <__ieee754_rem_pio2+0x80>
 80078ee:	a386      	add	r3, pc, #536	; (adr r3, 8007b08 <__ieee754_rem_pio2+0x310>)
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f7f8 fc8e 	bl	8000214 <__adddf3>
 80078f8:	a385      	add	r3, pc, #532	; (adr r3, 8007b10 <__ieee754_rem_pio2+0x318>)
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	4604      	mov	r4, r0
 8007900:	460d      	mov	r5, r1
 8007902:	f7f8 fc87 	bl	8000214 <__adddf3>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	e9ca 2300 	strd	r2, r3, [sl]
 800790e:	4620      	mov	r0, r4
 8007910:	4629      	mov	r1, r5
 8007912:	f7f8 fc7d 	bl	8000210 <__aeabi_dsub>
 8007916:	a37e      	add	r3, pc, #504	; (adr r3, 8007b10 <__ieee754_rem_pio2+0x318>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	e7e0      	b.n	80078e0 <__ieee754_rem_pio2+0xe8>
 800791e:	4b87      	ldr	r3, [pc, #540]	; (8007b3c <__ieee754_rem_pio2+0x344>)
 8007920:	4598      	cmp	r8, r3
 8007922:	f300 80d9 	bgt.w	8007ad8 <__ieee754_rem_pio2+0x2e0>
 8007926:	f000 fe49 	bl	80085bc <fabs>
 800792a:	ec55 4b10 	vmov	r4, r5, d0
 800792e:	ee10 0a10 	vmov	r0, s0
 8007932:	a379      	add	r3, pc, #484	; (adr r3, 8007b18 <__ieee754_rem_pio2+0x320>)
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	4629      	mov	r1, r5
 800793a:	f7f8 fe21 	bl	8000580 <__aeabi_dmul>
 800793e:	4b80      	ldr	r3, [pc, #512]	; (8007b40 <__ieee754_rem_pio2+0x348>)
 8007940:	2200      	movs	r2, #0
 8007942:	f7f8 fc67 	bl	8000214 <__adddf3>
 8007946:	f7f9 f8b5 	bl	8000ab4 <__aeabi_d2iz>
 800794a:	4683      	mov	fp, r0
 800794c:	f7f8 fdae 	bl	80004ac <__aeabi_i2d>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	ec43 2b18 	vmov	d8, r2, r3
 8007958:	a367      	add	r3, pc, #412	; (adr r3, 8007af8 <__ieee754_rem_pio2+0x300>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 fe0f 	bl	8000580 <__aeabi_dmul>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4620      	mov	r0, r4
 8007968:	4629      	mov	r1, r5
 800796a:	f7f8 fc51 	bl	8000210 <__aeabi_dsub>
 800796e:	a364      	add	r3, pc, #400	; (adr r3, 8007b00 <__ieee754_rem_pio2+0x308>)
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	4606      	mov	r6, r0
 8007976:	460f      	mov	r7, r1
 8007978:	ec51 0b18 	vmov	r0, r1, d8
 800797c:	f7f8 fe00 	bl	8000580 <__aeabi_dmul>
 8007980:	f1bb 0f1f 	cmp.w	fp, #31
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	dc0d      	bgt.n	80079a6 <__ieee754_rem_pio2+0x1ae>
 800798a:	4b6e      	ldr	r3, [pc, #440]	; (8007b44 <__ieee754_rem_pio2+0x34c>)
 800798c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007994:	4543      	cmp	r3, r8
 8007996:	d006      	beq.n	80079a6 <__ieee754_rem_pio2+0x1ae>
 8007998:	4622      	mov	r2, r4
 800799a:	462b      	mov	r3, r5
 800799c:	4630      	mov	r0, r6
 800799e:	4639      	mov	r1, r7
 80079a0:	f7f8 fc36 	bl	8000210 <__aeabi_dsub>
 80079a4:	e00f      	b.n	80079c6 <__ieee754_rem_pio2+0x1ce>
 80079a6:	462b      	mov	r3, r5
 80079a8:	4622      	mov	r2, r4
 80079aa:	4630      	mov	r0, r6
 80079ac:	4639      	mov	r1, r7
 80079ae:	f7f8 fc2f 	bl	8000210 <__aeabi_dsub>
 80079b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80079b6:	9303      	str	r3, [sp, #12]
 80079b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80079c0:	f1b8 0f10 	cmp.w	r8, #16
 80079c4:	dc02      	bgt.n	80079cc <__ieee754_rem_pio2+0x1d4>
 80079c6:	e9ca 0100 	strd	r0, r1, [sl]
 80079ca:	e039      	b.n	8007a40 <__ieee754_rem_pio2+0x248>
 80079cc:	a34e      	add	r3, pc, #312	; (adr r3, 8007b08 <__ieee754_rem_pio2+0x310>)
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	ec51 0b18 	vmov	r0, r1, d8
 80079d6:	f7f8 fdd3 	bl	8000580 <__aeabi_dmul>
 80079da:	4604      	mov	r4, r0
 80079dc:	460d      	mov	r5, r1
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4630      	mov	r0, r6
 80079e4:	4639      	mov	r1, r7
 80079e6:	f7f8 fc13 	bl	8000210 <__aeabi_dsub>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	4680      	mov	r8, r0
 80079f0:	4689      	mov	r9, r1
 80079f2:	4630      	mov	r0, r6
 80079f4:	4639      	mov	r1, r7
 80079f6:	f7f8 fc0b 	bl	8000210 <__aeabi_dsub>
 80079fa:	4622      	mov	r2, r4
 80079fc:	462b      	mov	r3, r5
 80079fe:	f7f8 fc07 	bl	8000210 <__aeabi_dsub>
 8007a02:	a343      	add	r3, pc, #268	; (adr r3, 8007b10 <__ieee754_rem_pio2+0x318>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	4604      	mov	r4, r0
 8007a0a:	460d      	mov	r5, r1
 8007a0c:	ec51 0b18 	vmov	r0, r1, d8
 8007a10:	f7f8 fdb6 	bl	8000580 <__aeabi_dmul>
 8007a14:	4622      	mov	r2, r4
 8007a16:	462b      	mov	r3, r5
 8007a18:	f7f8 fbfa 	bl	8000210 <__aeabi_dsub>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	4640      	mov	r0, r8
 8007a26:	4649      	mov	r1, r9
 8007a28:	f7f8 fbf2 	bl	8000210 <__aeabi_dsub>
 8007a2c:	9a03      	ldr	r2, [sp, #12]
 8007a2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b31      	cmp	r3, #49	; 0x31
 8007a36:	dc24      	bgt.n	8007a82 <__ieee754_rem_pio2+0x28a>
 8007a38:	e9ca 0100 	strd	r0, r1, [sl]
 8007a3c:	4646      	mov	r6, r8
 8007a3e:	464f      	mov	r7, r9
 8007a40:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a44:	4630      	mov	r0, r6
 8007a46:	4642      	mov	r2, r8
 8007a48:	464b      	mov	r3, r9
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	f7f8 fbe0 	bl	8000210 <__aeabi_dsub>
 8007a50:	462b      	mov	r3, r5
 8007a52:	4622      	mov	r2, r4
 8007a54:	f7f8 fbdc 	bl	8000210 <__aeabi_dsub>
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a60:	f6bf af0a 	bge.w	8007878 <__ieee754_rem_pio2+0x80>
 8007a64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a68:	f8ca 3004 	str.w	r3, [sl, #4]
 8007a6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a70:	f8ca 8000 	str.w	r8, [sl]
 8007a74:	f8ca 0008 	str.w	r0, [sl, #8]
 8007a78:	f8ca 300c 	str.w	r3, [sl, #12]
 8007a7c:	f1cb 0b00 	rsb	fp, fp, #0
 8007a80:	e6fa      	b.n	8007878 <__ieee754_rem_pio2+0x80>
 8007a82:	a327      	add	r3, pc, #156	; (adr r3, 8007b20 <__ieee754_rem_pio2+0x328>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	ec51 0b18 	vmov	r0, r1, d8
 8007a8c:	f7f8 fd78 	bl	8000580 <__aeabi_dmul>
 8007a90:	4604      	mov	r4, r0
 8007a92:	460d      	mov	r5, r1
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4640      	mov	r0, r8
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	f7f8 fbb8 	bl	8000210 <__aeabi_dsub>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	460f      	mov	r7, r1
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	4649      	mov	r1, r9
 8007aac:	f7f8 fbb0 	bl	8000210 <__aeabi_dsub>
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	f7f8 fbac 	bl	8000210 <__aeabi_dsub>
 8007ab8:	a31b      	add	r3, pc, #108	; (adr r3, 8007b28 <__ieee754_rem_pio2+0x330>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	4604      	mov	r4, r0
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	ec51 0b18 	vmov	r0, r1, d8
 8007ac6:	f7f8 fd5b 	bl	8000580 <__aeabi_dmul>
 8007aca:	4622      	mov	r2, r4
 8007acc:	462b      	mov	r3, r5
 8007ace:	f7f8 fb9f 	bl	8000210 <__aeabi_dsub>
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	460d      	mov	r5, r1
 8007ad6:	e75f      	b.n	8007998 <__ieee754_rem_pio2+0x1a0>
 8007ad8:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <__ieee754_rem_pio2+0x350>)
 8007ada:	4598      	cmp	r8, r3
 8007adc:	dd36      	ble.n	8007b4c <__ieee754_rem_pio2+0x354>
 8007ade:	ee10 2a10 	vmov	r2, s0
 8007ae2:	462b      	mov	r3, r5
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	f7f8 fb92 	bl	8000210 <__aeabi_dsub>
 8007aec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007af0:	e9ca 0100 	strd	r0, r1, [sl]
 8007af4:	e694      	b.n	8007820 <__ieee754_rem_pio2+0x28>
 8007af6:	bf00      	nop
 8007af8:	54400000 	.word	0x54400000
 8007afc:	3ff921fb 	.word	0x3ff921fb
 8007b00:	1a626331 	.word	0x1a626331
 8007b04:	3dd0b461 	.word	0x3dd0b461
 8007b08:	1a600000 	.word	0x1a600000
 8007b0c:	3dd0b461 	.word	0x3dd0b461
 8007b10:	2e037073 	.word	0x2e037073
 8007b14:	3ba3198a 	.word	0x3ba3198a
 8007b18:	6dc9c883 	.word	0x6dc9c883
 8007b1c:	3fe45f30 	.word	0x3fe45f30
 8007b20:	2e000000 	.word	0x2e000000
 8007b24:	3ba3198a 	.word	0x3ba3198a
 8007b28:	252049c1 	.word	0x252049c1
 8007b2c:	397b839a 	.word	0x397b839a
 8007b30:	3fe921fb 	.word	0x3fe921fb
 8007b34:	4002d97b 	.word	0x4002d97b
 8007b38:	3ff921fb 	.word	0x3ff921fb
 8007b3c:	413921fb 	.word	0x413921fb
 8007b40:	3fe00000 	.word	0x3fe00000
 8007b44:	08008870 	.word	0x08008870
 8007b48:	7fefffff 	.word	0x7fefffff
 8007b4c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007b50:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007b54:	ee10 0a10 	vmov	r0, s0
 8007b58:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007b5c:	ee10 6a10 	vmov	r6, s0
 8007b60:	460f      	mov	r7, r1
 8007b62:	f7f8 ffa7 	bl	8000ab4 <__aeabi_d2iz>
 8007b66:	f7f8 fca1 	bl	80004ac <__aeabi_i2d>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4630      	mov	r0, r6
 8007b70:	4639      	mov	r1, r7
 8007b72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b76:	f7f8 fb4b 	bl	8000210 <__aeabi_dsub>
 8007b7a:	4b23      	ldr	r3, [pc, #140]	; (8007c08 <__ieee754_rem_pio2+0x410>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f7f8 fcff 	bl	8000580 <__aeabi_dmul>
 8007b82:	460f      	mov	r7, r1
 8007b84:	4606      	mov	r6, r0
 8007b86:	f7f8 ff95 	bl	8000ab4 <__aeabi_d2iz>
 8007b8a:	f7f8 fc8f 	bl	80004ac <__aeabi_i2d>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	4630      	mov	r0, r6
 8007b94:	4639      	mov	r1, r7
 8007b96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b9a:	f7f8 fb39 	bl	8000210 <__aeabi_dsub>
 8007b9e:	4b1a      	ldr	r3, [pc, #104]	; (8007c08 <__ieee754_rem_pio2+0x410>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f7f8 fced 	bl	8000580 <__aeabi_dmul>
 8007ba6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007baa:	ad04      	add	r5, sp, #16
 8007bac:	f04f 0803 	mov.w	r8, #3
 8007bb0:	46a9      	mov	r9, r5
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	2700      	movs	r7, #0
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	463b      	mov	r3, r7
 8007bba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007bbe:	46c3      	mov	fp, r8
 8007bc0:	3d08      	subs	r5, #8
 8007bc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bc6:	f7f8 ff43 	bl	8000a50 <__aeabi_dcmpeq>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d1f3      	bne.n	8007bb6 <__ieee754_rem_pio2+0x3be>
 8007bce:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <__ieee754_rem_pio2+0x414>)
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	465b      	mov	r3, fp
 8007bda:	4651      	mov	r1, sl
 8007bdc:	4648      	mov	r0, r9
 8007bde:	f000 f8df 	bl	8007da0 <__kernel_rem_pio2>
 8007be2:	9b02      	ldr	r3, [sp, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	4683      	mov	fp, r0
 8007be8:	f6bf ae46 	bge.w	8007878 <__ieee754_rem_pio2+0x80>
 8007bec:	e9da 2100 	ldrd	r2, r1, [sl]
 8007bf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bf4:	e9ca 2300 	strd	r2, r3, [sl]
 8007bf8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007bfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c00:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007c04:	e73a      	b.n	8007a7c <__ieee754_rem_pio2+0x284>
 8007c06:	bf00      	nop
 8007c08:	41700000 	.word	0x41700000
 8007c0c:	080088f0 	.word	0x080088f0

08007c10 <__kernel_cos>:
 8007c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	ec57 6b10 	vmov	r6, r7, d0
 8007c18:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007c1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007c20:	ed8d 1b00 	vstr	d1, [sp]
 8007c24:	da07      	bge.n	8007c36 <__kernel_cos+0x26>
 8007c26:	ee10 0a10 	vmov	r0, s0
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	f7f8 ff42 	bl	8000ab4 <__aeabi_d2iz>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f000 8088 	beq.w	8007d46 <__kernel_cos+0x136>
 8007c36:	4632      	mov	r2, r6
 8007c38:	463b      	mov	r3, r7
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7f8 fc9f 	bl	8000580 <__aeabi_dmul>
 8007c42:	4b51      	ldr	r3, [pc, #324]	; (8007d88 <__kernel_cos+0x178>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	460d      	mov	r5, r1
 8007c4a:	f7f8 fc99 	bl	8000580 <__aeabi_dmul>
 8007c4e:	a340      	add	r3, pc, #256	; (adr r3, 8007d50 <__kernel_cos+0x140>)
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	4682      	mov	sl, r0
 8007c56:	468b      	mov	fp, r1
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	f7f8 fc90 	bl	8000580 <__aeabi_dmul>
 8007c60:	a33d      	add	r3, pc, #244	; (adr r3, 8007d58 <__kernel_cos+0x148>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fad5 	bl	8000214 <__adddf3>
 8007c6a:	4622      	mov	r2, r4
 8007c6c:	462b      	mov	r3, r5
 8007c6e:	f7f8 fc87 	bl	8000580 <__aeabi_dmul>
 8007c72:	a33b      	add	r3, pc, #236	; (adr r3, 8007d60 <__kernel_cos+0x150>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f7f8 faca 	bl	8000210 <__aeabi_dsub>
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	462b      	mov	r3, r5
 8007c80:	f7f8 fc7e 	bl	8000580 <__aeabi_dmul>
 8007c84:	a338      	add	r3, pc, #224	; (adr r3, 8007d68 <__kernel_cos+0x158>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	f7f8 fac3 	bl	8000214 <__adddf3>
 8007c8e:	4622      	mov	r2, r4
 8007c90:	462b      	mov	r3, r5
 8007c92:	f7f8 fc75 	bl	8000580 <__aeabi_dmul>
 8007c96:	a336      	add	r3, pc, #216	; (adr r3, 8007d70 <__kernel_cos+0x160>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	f7f8 fab8 	bl	8000210 <__aeabi_dsub>
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	462b      	mov	r3, r5
 8007ca4:	f7f8 fc6c 	bl	8000580 <__aeabi_dmul>
 8007ca8:	a333      	add	r3, pc, #204	; (adr r3, 8007d78 <__kernel_cos+0x168>)
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f7f8 fab1 	bl	8000214 <__adddf3>
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	f7f8 fc63 	bl	8000580 <__aeabi_dmul>
 8007cba:	4622      	mov	r2, r4
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	f7f8 fc5f 	bl	8000580 <__aeabi_dmul>
 8007cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	460d      	mov	r5, r1
 8007cca:	4630      	mov	r0, r6
 8007ccc:	4639      	mov	r1, r7
 8007cce:	f7f8 fc57 	bl	8000580 <__aeabi_dmul>
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f7f8 fa99 	bl	8000210 <__aeabi_dsub>
 8007cde:	4b2b      	ldr	r3, [pc, #172]	; (8007d8c <__kernel_cos+0x17c>)
 8007ce0:	4598      	cmp	r8, r3
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	460f      	mov	r7, r1
 8007ce6:	dc10      	bgt.n	8007d0a <__kernel_cos+0xfa>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4650      	mov	r0, sl
 8007cee:	4659      	mov	r1, fp
 8007cf0:	f7f8 fa8e 	bl	8000210 <__aeabi_dsub>
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4926      	ldr	r1, [pc, #152]	; (8007d90 <__kernel_cos+0x180>)
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f7f8 fa88 	bl	8000210 <__aeabi_dsub>
 8007d00:	ec41 0b10 	vmov	d0, r0, r1
 8007d04:	b003      	add	sp, #12
 8007d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0a:	4b22      	ldr	r3, [pc, #136]	; (8007d94 <__kernel_cos+0x184>)
 8007d0c:	4920      	ldr	r1, [pc, #128]	; (8007d90 <__kernel_cos+0x180>)
 8007d0e:	4598      	cmp	r8, r3
 8007d10:	bfcc      	ite	gt
 8007d12:	4d21      	ldrgt	r5, [pc, #132]	; (8007d98 <__kernel_cos+0x188>)
 8007d14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007d18:	2400      	movs	r4, #0
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	462b      	mov	r3, r5
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f7f8 fa76 	bl	8000210 <__aeabi_dsub>
 8007d24:	4622      	mov	r2, r4
 8007d26:	4680      	mov	r8, r0
 8007d28:	4689      	mov	r9, r1
 8007d2a:	462b      	mov	r3, r5
 8007d2c:	4650      	mov	r0, sl
 8007d2e:	4659      	mov	r1, fp
 8007d30:	f7f8 fa6e 	bl	8000210 <__aeabi_dsub>
 8007d34:	4632      	mov	r2, r6
 8007d36:	463b      	mov	r3, r7
 8007d38:	f7f8 fa6a 	bl	8000210 <__aeabi_dsub>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4640      	mov	r0, r8
 8007d42:	4649      	mov	r1, r9
 8007d44:	e7da      	b.n	8007cfc <__kernel_cos+0xec>
 8007d46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007d80 <__kernel_cos+0x170>
 8007d4a:	e7db      	b.n	8007d04 <__kernel_cos+0xf4>
 8007d4c:	f3af 8000 	nop.w
 8007d50:	be8838d4 	.word	0xbe8838d4
 8007d54:	bda8fae9 	.word	0xbda8fae9
 8007d58:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d5c:	3e21ee9e 	.word	0x3e21ee9e
 8007d60:	809c52ad 	.word	0x809c52ad
 8007d64:	3e927e4f 	.word	0x3e927e4f
 8007d68:	19cb1590 	.word	0x19cb1590
 8007d6c:	3efa01a0 	.word	0x3efa01a0
 8007d70:	16c15177 	.word	0x16c15177
 8007d74:	3f56c16c 	.word	0x3f56c16c
 8007d78:	5555554c 	.word	0x5555554c
 8007d7c:	3fa55555 	.word	0x3fa55555
 8007d80:	00000000 	.word	0x00000000
 8007d84:	3ff00000 	.word	0x3ff00000
 8007d88:	3fe00000 	.word	0x3fe00000
 8007d8c:	3fd33332 	.word	0x3fd33332
 8007d90:	3ff00000 	.word	0x3ff00000
 8007d94:	3fe90000 	.word	0x3fe90000
 8007d98:	3fd20000 	.word	0x3fd20000
 8007d9c:	00000000 	.word	0x00000000

08007da0 <__kernel_rem_pio2>:
 8007da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	ed2d 8b02 	vpush	{d8}
 8007da8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007dac:	f112 0f14 	cmn.w	r2, #20
 8007db0:	9308      	str	r3, [sp, #32]
 8007db2:	9101      	str	r1, [sp, #4]
 8007db4:	4bc4      	ldr	r3, [pc, #784]	; (80080c8 <__kernel_rem_pio2+0x328>)
 8007db6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007db8:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	9b08      	ldr	r3, [sp, #32]
 8007dc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007dc6:	bfa8      	it	ge
 8007dc8:	1ed4      	subge	r4, r2, #3
 8007dca:	9306      	str	r3, [sp, #24]
 8007dcc:	bfb2      	itee	lt
 8007dce:	2400      	movlt	r4, #0
 8007dd0:	2318      	movge	r3, #24
 8007dd2:	fb94 f4f3 	sdivge	r4, r4, r3
 8007dd6:	f06f 0317 	mvn.w	r3, #23
 8007dda:	fb04 3303 	mla	r3, r4, r3, r3
 8007dde:	eb03 0a02 	add.w	sl, r3, r2
 8007de2:	9b02      	ldr	r3, [sp, #8]
 8007de4:	9a06      	ldr	r2, [sp, #24]
 8007de6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80080b8 <__kernel_rem_pio2+0x318>
 8007dea:	eb03 0802 	add.w	r8, r3, r2
 8007dee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007df0:	1aa7      	subs	r7, r4, r2
 8007df2:	ae22      	add	r6, sp, #136	; 0x88
 8007df4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007df8:	2500      	movs	r5, #0
 8007dfa:	4545      	cmp	r5, r8
 8007dfc:	dd13      	ble.n	8007e26 <__kernel_rem_pio2+0x86>
 8007dfe:	9b08      	ldr	r3, [sp, #32]
 8007e00:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80080b8 <__kernel_rem_pio2+0x318>
 8007e04:	aa22      	add	r2, sp, #136	; 0x88
 8007e06:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007e0a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007e0e:	f04f 0800 	mov.w	r8, #0
 8007e12:	9b02      	ldr	r3, [sp, #8]
 8007e14:	4598      	cmp	r8, r3
 8007e16:	dc2f      	bgt.n	8007e78 <__kernel_rem_pio2+0xd8>
 8007e18:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007e1c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007e20:	462f      	mov	r7, r5
 8007e22:	2600      	movs	r6, #0
 8007e24:	e01b      	b.n	8007e5e <__kernel_rem_pio2+0xbe>
 8007e26:	42ef      	cmn	r7, r5
 8007e28:	d407      	bmi.n	8007e3a <__kernel_rem_pio2+0x9a>
 8007e2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007e2e:	f7f8 fb3d 	bl	80004ac <__aeabi_i2d>
 8007e32:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007e36:	3501      	adds	r5, #1
 8007e38:	e7df      	b.n	8007dfa <__kernel_rem_pio2+0x5a>
 8007e3a:	ec51 0b18 	vmov	r0, r1, d8
 8007e3e:	e7f8      	b.n	8007e32 <__kernel_rem_pio2+0x92>
 8007e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007e48:	f7f8 fb9a 	bl	8000580 <__aeabi_dmul>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e54:	f7f8 f9de 	bl	8000214 <__adddf3>
 8007e58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e5c:	3601      	adds	r6, #1
 8007e5e:	9b06      	ldr	r3, [sp, #24]
 8007e60:	429e      	cmp	r6, r3
 8007e62:	f1a7 0708 	sub.w	r7, r7, #8
 8007e66:	ddeb      	ble.n	8007e40 <__kernel_rem_pio2+0xa0>
 8007e68:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007e6c:	f108 0801 	add.w	r8, r8, #1
 8007e70:	ecab 7b02 	vstmia	fp!, {d7}
 8007e74:	3508      	adds	r5, #8
 8007e76:	e7cc      	b.n	8007e12 <__kernel_rem_pio2+0x72>
 8007e78:	9b02      	ldr	r3, [sp, #8]
 8007e7a:	aa0e      	add	r2, sp, #56	; 0x38
 8007e7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e80:	930d      	str	r3, [sp, #52]	; 0x34
 8007e82:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007e84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007e88:	9c02      	ldr	r4, [sp, #8]
 8007e8a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e8c:	00e3      	lsls	r3, r4, #3
 8007e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e90:	ab9a      	add	r3, sp, #616	; 0x268
 8007e92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e96:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007e9a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007e9e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007ea0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007ea4:	46c3      	mov	fp, r8
 8007ea6:	46a1      	mov	r9, r4
 8007ea8:	f1b9 0f00 	cmp.w	r9, #0
 8007eac:	f1a5 0508 	sub.w	r5, r5, #8
 8007eb0:	dc77      	bgt.n	8007fa2 <__kernel_rem_pio2+0x202>
 8007eb2:	ec47 6b10 	vmov	d0, r6, r7
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	f000 fc0a 	bl	80086d0 <scalbn>
 8007ebc:	ec57 6b10 	vmov	r6, r7, d0
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007ec6:	ee10 0a10 	vmov	r0, s0
 8007eca:	4639      	mov	r1, r7
 8007ecc:	f7f8 fb58 	bl	8000580 <__aeabi_dmul>
 8007ed0:	ec41 0b10 	vmov	d0, r0, r1
 8007ed4:	f000 fb7c 	bl	80085d0 <floor>
 8007ed8:	4b7c      	ldr	r3, [pc, #496]	; (80080cc <__kernel_rem_pio2+0x32c>)
 8007eda:	ec51 0b10 	vmov	r0, r1, d0
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f7f8 fb4e 	bl	8000580 <__aeabi_dmul>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 f990 	bl	8000210 <__aeabi_dsub>
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	f7f8 fdde 	bl	8000ab4 <__aeabi_d2iz>
 8007ef8:	9004      	str	r0, [sp, #16]
 8007efa:	f7f8 fad7 	bl	80004ac <__aeabi_i2d>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4630      	mov	r0, r6
 8007f04:	4639      	mov	r1, r7
 8007f06:	f7f8 f983 	bl	8000210 <__aeabi_dsub>
 8007f0a:	f1ba 0f00 	cmp.w	sl, #0
 8007f0e:	4606      	mov	r6, r0
 8007f10:	460f      	mov	r7, r1
 8007f12:	dd6d      	ble.n	8007ff0 <__kernel_rem_pio2+0x250>
 8007f14:	1e62      	subs	r2, r4, #1
 8007f16:	ab0e      	add	r3, sp, #56	; 0x38
 8007f18:	9d04      	ldr	r5, [sp, #16]
 8007f1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007f1e:	f1ca 0118 	rsb	r1, sl, #24
 8007f22:	fa40 f301 	asr.w	r3, r0, r1
 8007f26:	441d      	add	r5, r3
 8007f28:	408b      	lsls	r3, r1
 8007f2a:	1ac0      	subs	r0, r0, r3
 8007f2c:	ab0e      	add	r3, sp, #56	; 0x38
 8007f2e:	9504      	str	r5, [sp, #16]
 8007f30:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007f34:	f1ca 0317 	rsb	r3, sl, #23
 8007f38:	fa40 fb03 	asr.w	fp, r0, r3
 8007f3c:	f1bb 0f00 	cmp.w	fp, #0
 8007f40:	dd65      	ble.n	800800e <__kernel_rem_pio2+0x26e>
 8007f42:	9b04      	ldr	r3, [sp, #16]
 8007f44:	2200      	movs	r2, #0
 8007f46:	3301      	adds	r3, #1
 8007f48:	9304      	str	r3, [sp, #16]
 8007f4a:	4615      	mov	r5, r2
 8007f4c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007f50:	4294      	cmp	r4, r2
 8007f52:	f300 809c 	bgt.w	800808e <__kernel_rem_pio2+0x2ee>
 8007f56:	f1ba 0f00 	cmp.w	sl, #0
 8007f5a:	dd07      	ble.n	8007f6c <__kernel_rem_pio2+0x1cc>
 8007f5c:	f1ba 0f01 	cmp.w	sl, #1
 8007f60:	f000 80c0 	beq.w	80080e4 <__kernel_rem_pio2+0x344>
 8007f64:	f1ba 0f02 	cmp.w	sl, #2
 8007f68:	f000 80c6 	beq.w	80080f8 <__kernel_rem_pio2+0x358>
 8007f6c:	f1bb 0f02 	cmp.w	fp, #2
 8007f70:	d14d      	bne.n	800800e <__kernel_rem_pio2+0x26e>
 8007f72:	4632      	mov	r2, r6
 8007f74:	463b      	mov	r3, r7
 8007f76:	4956      	ldr	r1, [pc, #344]	; (80080d0 <__kernel_rem_pio2+0x330>)
 8007f78:	2000      	movs	r0, #0
 8007f7a:	f7f8 f949 	bl	8000210 <__aeabi_dsub>
 8007f7e:	4606      	mov	r6, r0
 8007f80:	460f      	mov	r7, r1
 8007f82:	2d00      	cmp	r5, #0
 8007f84:	d043      	beq.n	800800e <__kernel_rem_pio2+0x26e>
 8007f86:	4650      	mov	r0, sl
 8007f88:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80080c0 <__kernel_rem_pio2+0x320>
 8007f8c:	f000 fba0 	bl	80086d0 <scalbn>
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	ec53 2b10 	vmov	r2, r3, d0
 8007f98:	f7f8 f93a 	bl	8000210 <__aeabi_dsub>
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	e035      	b.n	800800e <__kernel_rem_pio2+0x26e>
 8007fa2:	4b4c      	ldr	r3, [pc, #304]	; (80080d4 <__kernel_rem_pio2+0x334>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	f7f8 fae9 	bl	8000580 <__aeabi_dmul>
 8007fae:	f7f8 fd81 	bl	8000ab4 <__aeabi_d2iz>
 8007fb2:	f7f8 fa7b 	bl	80004ac <__aeabi_i2d>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	ec43 2b18 	vmov	d8, r2, r3
 8007fbe:	4b46      	ldr	r3, [pc, #280]	; (80080d8 <__kernel_rem_pio2+0x338>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f7f8 fadd 	bl	8000580 <__aeabi_dmul>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4630      	mov	r0, r6
 8007fcc:	4639      	mov	r1, r7
 8007fce:	f7f8 f91f 	bl	8000210 <__aeabi_dsub>
 8007fd2:	f7f8 fd6f 	bl	8000ab4 <__aeabi_d2iz>
 8007fd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fda:	f84b 0b04 	str.w	r0, [fp], #4
 8007fde:	ec51 0b18 	vmov	r0, r1, d8
 8007fe2:	f7f8 f917 	bl	8000214 <__adddf3>
 8007fe6:	f109 39ff 	add.w	r9, r9, #4294967295
 8007fea:	4606      	mov	r6, r0
 8007fec:	460f      	mov	r7, r1
 8007fee:	e75b      	b.n	8007ea8 <__kernel_rem_pio2+0x108>
 8007ff0:	d106      	bne.n	8008000 <__kernel_rem_pio2+0x260>
 8007ff2:	1e63      	subs	r3, r4, #1
 8007ff4:	aa0e      	add	r2, sp, #56	; 0x38
 8007ff6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007ffa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007ffe:	e79d      	b.n	8007f3c <__kernel_rem_pio2+0x19c>
 8008000:	4b36      	ldr	r3, [pc, #216]	; (80080dc <__kernel_rem_pio2+0x33c>)
 8008002:	2200      	movs	r2, #0
 8008004:	f7f8 fd42 	bl	8000a8c <__aeabi_dcmpge>
 8008008:	2800      	cmp	r0, #0
 800800a:	d13d      	bne.n	8008088 <__kernel_rem_pio2+0x2e8>
 800800c:	4683      	mov	fp, r0
 800800e:	2200      	movs	r2, #0
 8008010:	2300      	movs	r3, #0
 8008012:	4630      	mov	r0, r6
 8008014:	4639      	mov	r1, r7
 8008016:	f7f8 fd1b 	bl	8000a50 <__aeabi_dcmpeq>
 800801a:	2800      	cmp	r0, #0
 800801c:	f000 80c0 	beq.w	80081a0 <__kernel_rem_pio2+0x400>
 8008020:	1e65      	subs	r5, r4, #1
 8008022:	462b      	mov	r3, r5
 8008024:	2200      	movs	r2, #0
 8008026:	9902      	ldr	r1, [sp, #8]
 8008028:	428b      	cmp	r3, r1
 800802a:	da6c      	bge.n	8008106 <__kernel_rem_pio2+0x366>
 800802c:	2a00      	cmp	r2, #0
 800802e:	f000 8089 	beq.w	8008144 <__kernel_rem_pio2+0x3a4>
 8008032:	ab0e      	add	r3, sp, #56	; 0x38
 8008034:	f1aa 0a18 	sub.w	sl, sl, #24
 8008038:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80ad 	beq.w	800819c <__kernel_rem_pio2+0x3fc>
 8008042:	4650      	mov	r0, sl
 8008044:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80080c0 <__kernel_rem_pio2+0x320>
 8008048:	f000 fb42 	bl	80086d0 <scalbn>
 800804c:	ab9a      	add	r3, sp, #616	; 0x268
 800804e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008052:	ec57 6b10 	vmov	r6, r7, d0
 8008056:	00ec      	lsls	r4, r5, #3
 8008058:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800805c:	46aa      	mov	sl, r5
 800805e:	f1ba 0f00 	cmp.w	sl, #0
 8008062:	f280 80d6 	bge.w	8008212 <__kernel_rem_pio2+0x472>
 8008066:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80080b8 <__kernel_rem_pio2+0x318>
 800806a:	462e      	mov	r6, r5
 800806c:	2e00      	cmp	r6, #0
 800806e:	f2c0 8104 	blt.w	800827a <__kernel_rem_pio2+0x4da>
 8008072:	ab72      	add	r3, sp, #456	; 0x1c8
 8008074:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008078:	f8df a064 	ldr.w	sl, [pc, #100]	; 80080e0 <__kernel_rem_pio2+0x340>
 800807c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008080:	f04f 0800 	mov.w	r8, #0
 8008084:	1baf      	subs	r7, r5, r6
 8008086:	e0ea      	b.n	800825e <__kernel_rem_pio2+0x4be>
 8008088:	f04f 0b02 	mov.w	fp, #2
 800808c:	e759      	b.n	8007f42 <__kernel_rem_pio2+0x1a2>
 800808e:	f8d8 3000 	ldr.w	r3, [r8]
 8008092:	b955      	cbnz	r5, 80080aa <__kernel_rem_pio2+0x30a>
 8008094:	b123      	cbz	r3, 80080a0 <__kernel_rem_pio2+0x300>
 8008096:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800809a:	f8c8 3000 	str.w	r3, [r8]
 800809e:	2301      	movs	r3, #1
 80080a0:	3201      	adds	r2, #1
 80080a2:	f108 0804 	add.w	r8, r8, #4
 80080a6:	461d      	mov	r5, r3
 80080a8:	e752      	b.n	8007f50 <__kernel_rem_pio2+0x1b0>
 80080aa:	1acb      	subs	r3, r1, r3
 80080ac:	f8c8 3000 	str.w	r3, [r8]
 80080b0:	462b      	mov	r3, r5
 80080b2:	e7f5      	b.n	80080a0 <__kernel_rem_pio2+0x300>
 80080b4:	f3af 8000 	nop.w
	...
 80080c4:	3ff00000 	.word	0x3ff00000
 80080c8:	08008a38 	.word	0x08008a38
 80080cc:	40200000 	.word	0x40200000
 80080d0:	3ff00000 	.word	0x3ff00000
 80080d4:	3e700000 	.word	0x3e700000
 80080d8:	41700000 	.word	0x41700000
 80080dc:	3fe00000 	.word	0x3fe00000
 80080e0:	080089f8 	.word	0x080089f8
 80080e4:	1e62      	subs	r2, r4, #1
 80080e6:	ab0e      	add	r3, sp, #56	; 0x38
 80080e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80080f0:	a90e      	add	r1, sp, #56	; 0x38
 80080f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80080f6:	e739      	b.n	8007f6c <__kernel_rem_pio2+0x1cc>
 80080f8:	1e62      	subs	r2, r4, #1
 80080fa:	ab0e      	add	r3, sp, #56	; 0x38
 80080fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008100:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008104:	e7f4      	b.n	80080f0 <__kernel_rem_pio2+0x350>
 8008106:	a90e      	add	r1, sp, #56	; 0x38
 8008108:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800810c:	3b01      	subs	r3, #1
 800810e:	430a      	orrs	r2, r1
 8008110:	e789      	b.n	8008026 <__kernel_rem_pio2+0x286>
 8008112:	3301      	adds	r3, #1
 8008114:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008118:	2900      	cmp	r1, #0
 800811a:	d0fa      	beq.n	8008112 <__kernel_rem_pio2+0x372>
 800811c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800811e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008122:	446a      	add	r2, sp
 8008124:	3a98      	subs	r2, #152	; 0x98
 8008126:	920a      	str	r2, [sp, #40]	; 0x28
 8008128:	9a08      	ldr	r2, [sp, #32]
 800812a:	18e3      	adds	r3, r4, r3
 800812c:	18a5      	adds	r5, r4, r2
 800812e:	aa22      	add	r2, sp, #136	; 0x88
 8008130:	f104 0801 	add.w	r8, r4, #1
 8008134:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	9b04      	ldr	r3, [sp, #16]
 800813c:	4543      	cmp	r3, r8
 800813e:	da04      	bge.n	800814a <__kernel_rem_pio2+0x3aa>
 8008140:	461c      	mov	r4, r3
 8008142:	e6a3      	b.n	8007e8c <__kernel_rem_pio2+0xec>
 8008144:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008146:	2301      	movs	r3, #1
 8008148:	e7e4      	b.n	8008114 <__kernel_rem_pio2+0x374>
 800814a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800814c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008150:	f7f8 f9ac 	bl	80004ac <__aeabi_i2d>
 8008154:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800815a:	46ab      	mov	fp, r5
 800815c:	461c      	mov	r4, r3
 800815e:	f04f 0900 	mov.w	r9, #0
 8008162:	2600      	movs	r6, #0
 8008164:	2700      	movs	r7, #0
 8008166:	9b06      	ldr	r3, [sp, #24]
 8008168:	4599      	cmp	r9, r3
 800816a:	dd06      	ble.n	800817a <__kernel_rem_pio2+0x3da>
 800816c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008172:	f108 0801 	add.w	r8, r8, #1
 8008176:	930a      	str	r3, [sp, #40]	; 0x28
 8008178:	e7df      	b.n	800813a <__kernel_rem_pio2+0x39a>
 800817a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800817e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008182:	f7f8 f9fd 	bl	8000580 <__aeabi_dmul>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4630      	mov	r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 f841 	bl	8000214 <__adddf3>
 8008192:	f109 0901 	add.w	r9, r9, #1
 8008196:	4606      	mov	r6, r0
 8008198:	460f      	mov	r7, r1
 800819a:	e7e4      	b.n	8008166 <__kernel_rem_pio2+0x3c6>
 800819c:	3d01      	subs	r5, #1
 800819e:	e748      	b.n	8008032 <__kernel_rem_pio2+0x292>
 80081a0:	ec47 6b10 	vmov	d0, r6, r7
 80081a4:	f1ca 0000 	rsb	r0, sl, #0
 80081a8:	f000 fa92 	bl	80086d0 <scalbn>
 80081ac:	ec57 6b10 	vmov	r6, r7, d0
 80081b0:	4ba0      	ldr	r3, [pc, #640]	; (8008434 <__kernel_rem_pio2+0x694>)
 80081b2:	ee10 0a10 	vmov	r0, s0
 80081b6:	2200      	movs	r2, #0
 80081b8:	4639      	mov	r1, r7
 80081ba:	f7f8 fc67 	bl	8000a8c <__aeabi_dcmpge>
 80081be:	b1f8      	cbz	r0, 8008200 <__kernel_rem_pio2+0x460>
 80081c0:	4b9d      	ldr	r3, [pc, #628]	; (8008438 <__kernel_rem_pio2+0x698>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 f9da 	bl	8000580 <__aeabi_dmul>
 80081cc:	f7f8 fc72 	bl	8000ab4 <__aeabi_d2iz>
 80081d0:	4680      	mov	r8, r0
 80081d2:	f7f8 f96b 	bl	80004ac <__aeabi_i2d>
 80081d6:	4b97      	ldr	r3, [pc, #604]	; (8008434 <__kernel_rem_pio2+0x694>)
 80081d8:	2200      	movs	r2, #0
 80081da:	f7f8 f9d1 	bl	8000580 <__aeabi_dmul>
 80081de:	460b      	mov	r3, r1
 80081e0:	4602      	mov	r2, r0
 80081e2:	4639      	mov	r1, r7
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7f8 f813 	bl	8000210 <__aeabi_dsub>
 80081ea:	f7f8 fc63 	bl	8000ab4 <__aeabi_d2iz>
 80081ee:	1c65      	adds	r5, r4, #1
 80081f0:	ab0e      	add	r3, sp, #56	; 0x38
 80081f2:	f10a 0a18 	add.w	sl, sl, #24
 80081f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081fa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80081fe:	e720      	b.n	8008042 <__kernel_rem_pio2+0x2a2>
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 fc56 	bl	8000ab4 <__aeabi_d2iz>
 8008208:	ab0e      	add	r3, sp, #56	; 0x38
 800820a:	4625      	mov	r5, r4
 800820c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008210:	e717      	b.n	8008042 <__kernel_rem_pio2+0x2a2>
 8008212:	ab0e      	add	r3, sp, #56	; 0x38
 8008214:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008218:	f7f8 f948 	bl	80004ac <__aeabi_i2d>
 800821c:	4632      	mov	r2, r6
 800821e:	463b      	mov	r3, r7
 8008220:	f7f8 f9ae 	bl	8000580 <__aeabi_dmul>
 8008224:	4b84      	ldr	r3, [pc, #528]	; (8008438 <__kernel_rem_pio2+0x698>)
 8008226:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800822a:	2200      	movs	r2, #0
 800822c:	4630      	mov	r0, r6
 800822e:	4639      	mov	r1, r7
 8008230:	f7f8 f9a6 	bl	8000580 <__aeabi_dmul>
 8008234:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008238:	4606      	mov	r6, r0
 800823a:	460f      	mov	r7, r1
 800823c:	e70f      	b.n	800805e <__kernel_rem_pio2+0x2be>
 800823e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008242:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008246:	f7f8 f99b 	bl	8000580 <__aeabi_dmul>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008252:	f7f7 ffdf 	bl	8000214 <__adddf3>
 8008256:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800825a:	f108 0801 	add.w	r8, r8, #1
 800825e:	9b02      	ldr	r3, [sp, #8]
 8008260:	4598      	cmp	r8, r3
 8008262:	dc01      	bgt.n	8008268 <__kernel_rem_pio2+0x4c8>
 8008264:	45b8      	cmp	r8, r7
 8008266:	ddea      	ble.n	800823e <__kernel_rem_pio2+0x49e>
 8008268:	ed9d 7b06 	vldr	d7, [sp, #24]
 800826c:	ab4a      	add	r3, sp, #296	; 0x128
 800826e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008272:	ed87 7b00 	vstr	d7, [r7]
 8008276:	3e01      	subs	r6, #1
 8008278:	e6f8      	b.n	800806c <__kernel_rem_pio2+0x2cc>
 800827a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800827c:	2b02      	cmp	r3, #2
 800827e:	dc0b      	bgt.n	8008298 <__kernel_rem_pio2+0x4f8>
 8008280:	2b00      	cmp	r3, #0
 8008282:	dc35      	bgt.n	80082f0 <__kernel_rem_pio2+0x550>
 8008284:	d059      	beq.n	800833a <__kernel_rem_pio2+0x59a>
 8008286:	9b04      	ldr	r3, [sp, #16]
 8008288:	f003 0007 	and.w	r0, r3, #7
 800828c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008290:	ecbd 8b02 	vpop	{d8}
 8008294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008298:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800829a:	2b03      	cmp	r3, #3
 800829c:	d1f3      	bne.n	8008286 <__kernel_rem_pio2+0x4e6>
 800829e:	ab4a      	add	r3, sp, #296	; 0x128
 80082a0:	4423      	add	r3, r4
 80082a2:	9306      	str	r3, [sp, #24]
 80082a4:	461c      	mov	r4, r3
 80082a6:	469a      	mov	sl, r3
 80082a8:	9502      	str	r5, [sp, #8]
 80082aa:	9b02      	ldr	r3, [sp, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f1aa 0a08 	sub.w	sl, sl, #8
 80082b2:	dc6b      	bgt.n	800838c <__kernel_rem_pio2+0x5ec>
 80082b4:	46aa      	mov	sl, r5
 80082b6:	f1ba 0f01 	cmp.w	sl, #1
 80082ba:	f1a4 0408 	sub.w	r4, r4, #8
 80082be:	f300 8085 	bgt.w	80083cc <__kernel_rem_pio2+0x62c>
 80082c2:	9c06      	ldr	r4, [sp, #24]
 80082c4:	2000      	movs	r0, #0
 80082c6:	3408      	adds	r4, #8
 80082c8:	2100      	movs	r1, #0
 80082ca:	2d01      	cmp	r5, #1
 80082cc:	f300 809d 	bgt.w	800840a <__kernel_rem_pio2+0x66a>
 80082d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80082d4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80082d8:	f1bb 0f00 	cmp.w	fp, #0
 80082dc:	f040 809b 	bne.w	8008416 <__kernel_rem_pio2+0x676>
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	e9c3 5600 	strd	r5, r6, [r3]
 80082e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80082ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80082ee:	e7ca      	b.n	8008286 <__kernel_rem_pio2+0x4e6>
 80082f0:	3408      	adds	r4, #8
 80082f2:	ab4a      	add	r3, sp, #296	; 0x128
 80082f4:	441c      	add	r4, r3
 80082f6:	462e      	mov	r6, r5
 80082f8:	2000      	movs	r0, #0
 80082fa:	2100      	movs	r1, #0
 80082fc:	2e00      	cmp	r6, #0
 80082fe:	da36      	bge.n	800836e <__kernel_rem_pio2+0x5ce>
 8008300:	f1bb 0f00 	cmp.w	fp, #0
 8008304:	d039      	beq.n	800837a <__kernel_rem_pio2+0x5da>
 8008306:	4602      	mov	r2, r0
 8008308:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800830c:	9c01      	ldr	r4, [sp, #4]
 800830e:	e9c4 2300 	strd	r2, r3, [r4]
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800831a:	f7f7 ff79 	bl	8000210 <__aeabi_dsub>
 800831e:	ae4c      	add	r6, sp, #304	; 0x130
 8008320:	2401      	movs	r4, #1
 8008322:	42a5      	cmp	r5, r4
 8008324:	da2c      	bge.n	8008380 <__kernel_rem_pio2+0x5e0>
 8008326:	f1bb 0f00 	cmp.w	fp, #0
 800832a:	d002      	beq.n	8008332 <__kernel_rem_pio2+0x592>
 800832c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008330:	4619      	mov	r1, r3
 8008332:	9b01      	ldr	r3, [sp, #4]
 8008334:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008338:	e7a5      	b.n	8008286 <__kernel_rem_pio2+0x4e6>
 800833a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800833e:	eb0d 0403 	add.w	r4, sp, r3
 8008342:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008346:	2000      	movs	r0, #0
 8008348:	2100      	movs	r1, #0
 800834a:	2d00      	cmp	r5, #0
 800834c:	da09      	bge.n	8008362 <__kernel_rem_pio2+0x5c2>
 800834e:	f1bb 0f00 	cmp.w	fp, #0
 8008352:	d002      	beq.n	800835a <__kernel_rem_pio2+0x5ba>
 8008354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008358:	4619      	mov	r1, r3
 800835a:	9b01      	ldr	r3, [sp, #4]
 800835c:	e9c3 0100 	strd	r0, r1, [r3]
 8008360:	e791      	b.n	8008286 <__kernel_rem_pio2+0x4e6>
 8008362:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008366:	f7f7 ff55 	bl	8000214 <__adddf3>
 800836a:	3d01      	subs	r5, #1
 800836c:	e7ed      	b.n	800834a <__kernel_rem_pio2+0x5aa>
 800836e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008372:	f7f7 ff4f 	bl	8000214 <__adddf3>
 8008376:	3e01      	subs	r6, #1
 8008378:	e7c0      	b.n	80082fc <__kernel_rem_pio2+0x55c>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	e7c5      	b.n	800830c <__kernel_rem_pio2+0x56c>
 8008380:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008384:	f7f7 ff46 	bl	8000214 <__adddf3>
 8008388:	3401      	adds	r4, #1
 800838a:	e7ca      	b.n	8008322 <__kernel_rem_pio2+0x582>
 800838c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008390:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008394:	9b02      	ldr	r3, [sp, #8]
 8008396:	3b01      	subs	r3, #1
 8008398:	9302      	str	r3, [sp, #8]
 800839a:	4632      	mov	r2, r6
 800839c:	463b      	mov	r3, r7
 800839e:	4640      	mov	r0, r8
 80083a0:	4649      	mov	r1, r9
 80083a2:	f7f7 ff37 	bl	8000214 <__adddf3>
 80083a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f7 ff2d 	bl	8000210 <__aeabi_dsub>
 80083b6:	4632      	mov	r2, r6
 80083b8:	463b      	mov	r3, r7
 80083ba:	f7f7 ff2b 	bl	8000214 <__adddf3>
 80083be:	ed9d 7b08 	vldr	d7, [sp, #32]
 80083c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80083c6:	ed8a 7b00 	vstr	d7, [sl]
 80083ca:	e76e      	b.n	80082aa <__kernel_rem_pio2+0x50a>
 80083cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80083d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80083d4:	4640      	mov	r0, r8
 80083d6:	4632      	mov	r2, r6
 80083d8:	463b      	mov	r3, r7
 80083da:	4649      	mov	r1, r9
 80083dc:	f7f7 ff1a 	bl	8000214 <__adddf3>
 80083e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4640      	mov	r0, r8
 80083ea:	4649      	mov	r1, r9
 80083ec:	f7f7 ff10 	bl	8000210 <__aeabi_dsub>
 80083f0:	4632      	mov	r2, r6
 80083f2:	463b      	mov	r3, r7
 80083f4:	f7f7 ff0e 	bl	8000214 <__adddf3>
 80083f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008400:	ed84 7b00 	vstr	d7, [r4]
 8008404:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008408:	e755      	b.n	80082b6 <__kernel_rem_pio2+0x516>
 800840a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800840e:	f7f7 ff01 	bl	8000214 <__adddf3>
 8008412:	3d01      	subs	r5, #1
 8008414:	e759      	b.n	80082ca <__kernel_rem_pio2+0x52a>
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	9a01      	ldr	r2, [sp, #4]
 800841a:	601d      	str	r5, [r3, #0]
 800841c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008420:	605c      	str	r4, [r3, #4]
 8008422:	609f      	str	r7, [r3, #8]
 8008424:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008428:	60d3      	str	r3, [r2, #12]
 800842a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800842e:	6110      	str	r0, [r2, #16]
 8008430:	6153      	str	r3, [r2, #20]
 8008432:	e728      	b.n	8008286 <__kernel_rem_pio2+0x4e6>
 8008434:	41700000 	.word	0x41700000
 8008438:	3e700000 	.word	0x3e700000
 800843c:	00000000 	.word	0x00000000

08008440 <__kernel_sin>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	ed2d 8b04 	vpush	{d8-d9}
 8008448:	eeb0 8a41 	vmov.f32	s16, s2
 800844c:	eef0 8a61 	vmov.f32	s17, s3
 8008450:	ec55 4b10 	vmov	r4, r5, d0
 8008454:	b083      	sub	sp, #12
 8008456:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800845a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800845e:	9001      	str	r0, [sp, #4]
 8008460:	da06      	bge.n	8008470 <__kernel_sin+0x30>
 8008462:	ee10 0a10 	vmov	r0, s0
 8008466:	4629      	mov	r1, r5
 8008468:	f7f8 fb24 	bl	8000ab4 <__aeabi_d2iz>
 800846c:	2800      	cmp	r0, #0
 800846e:	d051      	beq.n	8008514 <__kernel_sin+0xd4>
 8008470:	4622      	mov	r2, r4
 8008472:	462b      	mov	r3, r5
 8008474:	4620      	mov	r0, r4
 8008476:	4629      	mov	r1, r5
 8008478:	f7f8 f882 	bl	8000580 <__aeabi_dmul>
 800847c:	4682      	mov	sl, r0
 800847e:	468b      	mov	fp, r1
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4620      	mov	r0, r4
 8008486:	4629      	mov	r1, r5
 8008488:	f7f8 f87a 	bl	8000580 <__aeabi_dmul>
 800848c:	a341      	add	r3, pc, #260	; (adr r3, 8008594 <__kernel_sin+0x154>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	4680      	mov	r8, r0
 8008494:	4689      	mov	r9, r1
 8008496:	4650      	mov	r0, sl
 8008498:	4659      	mov	r1, fp
 800849a:	f7f8 f871 	bl	8000580 <__aeabi_dmul>
 800849e:	a33f      	add	r3, pc, #252	; (adr r3, 800859c <__kernel_sin+0x15c>)
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	f7f7 feb4 	bl	8000210 <__aeabi_dsub>
 80084a8:	4652      	mov	r2, sl
 80084aa:	465b      	mov	r3, fp
 80084ac:	f7f8 f868 	bl	8000580 <__aeabi_dmul>
 80084b0:	a33c      	add	r3, pc, #240	; (adr r3, 80085a4 <__kernel_sin+0x164>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f7f7 fead 	bl	8000214 <__adddf3>
 80084ba:	4652      	mov	r2, sl
 80084bc:	465b      	mov	r3, fp
 80084be:	f7f8 f85f 	bl	8000580 <__aeabi_dmul>
 80084c2:	a33a      	add	r3, pc, #232	; (adr r3, 80085ac <__kernel_sin+0x16c>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f7f7 fea2 	bl	8000210 <__aeabi_dsub>
 80084cc:	4652      	mov	r2, sl
 80084ce:	465b      	mov	r3, fp
 80084d0:	f7f8 f856 	bl	8000580 <__aeabi_dmul>
 80084d4:	a337      	add	r3, pc, #220	; (adr r3, 80085b4 <__kernel_sin+0x174>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f7f7 fe9b 	bl	8000214 <__adddf3>
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	4606      	mov	r6, r0
 80084e2:	460f      	mov	r7, r1
 80084e4:	b9eb      	cbnz	r3, 8008522 <__kernel_sin+0xe2>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4650      	mov	r0, sl
 80084ec:	4659      	mov	r1, fp
 80084ee:	f7f8 f847 	bl	8000580 <__aeabi_dmul>
 80084f2:	a325      	add	r3, pc, #148	; (adr r3, 8008588 <__kernel_sin+0x148>)
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f7f7 fe8a 	bl	8000210 <__aeabi_dsub>
 80084fc:	4642      	mov	r2, r8
 80084fe:	464b      	mov	r3, r9
 8008500:	f7f8 f83e 	bl	8000580 <__aeabi_dmul>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4620      	mov	r0, r4
 800850a:	4629      	mov	r1, r5
 800850c:	f7f7 fe82 	bl	8000214 <__adddf3>
 8008510:	4604      	mov	r4, r0
 8008512:	460d      	mov	r5, r1
 8008514:	ec45 4b10 	vmov	d0, r4, r5
 8008518:	b003      	add	sp, #12
 800851a:	ecbd 8b04 	vpop	{d8-d9}
 800851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008522:	4b1b      	ldr	r3, [pc, #108]	; (8008590 <__kernel_sin+0x150>)
 8008524:	ec51 0b18 	vmov	r0, r1, d8
 8008528:	2200      	movs	r2, #0
 800852a:	f7f8 f829 	bl	8000580 <__aeabi_dmul>
 800852e:	4632      	mov	r2, r6
 8008530:	ec41 0b19 	vmov	d9, r0, r1
 8008534:	463b      	mov	r3, r7
 8008536:	4640      	mov	r0, r8
 8008538:	4649      	mov	r1, r9
 800853a:	f7f8 f821 	bl	8000580 <__aeabi_dmul>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	ec51 0b19 	vmov	r0, r1, d9
 8008546:	f7f7 fe63 	bl	8000210 <__aeabi_dsub>
 800854a:	4652      	mov	r2, sl
 800854c:	465b      	mov	r3, fp
 800854e:	f7f8 f817 	bl	8000580 <__aeabi_dmul>
 8008552:	ec53 2b18 	vmov	r2, r3, d8
 8008556:	f7f7 fe5b 	bl	8000210 <__aeabi_dsub>
 800855a:	a30b      	add	r3, pc, #44	; (adr r3, 8008588 <__kernel_sin+0x148>)
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	4606      	mov	r6, r0
 8008562:	460f      	mov	r7, r1
 8008564:	4640      	mov	r0, r8
 8008566:	4649      	mov	r1, r9
 8008568:	f7f8 f80a 	bl	8000580 <__aeabi_dmul>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4630      	mov	r0, r6
 8008572:	4639      	mov	r1, r7
 8008574:	f7f7 fe4e 	bl	8000214 <__adddf3>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4620      	mov	r0, r4
 800857e:	4629      	mov	r1, r5
 8008580:	f7f7 fe46 	bl	8000210 <__aeabi_dsub>
 8008584:	e7c4      	b.n	8008510 <__kernel_sin+0xd0>
 8008586:	bf00      	nop
 8008588:	55555549 	.word	0x55555549
 800858c:	3fc55555 	.word	0x3fc55555
 8008590:	3fe00000 	.word	0x3fe00000
 8008594:	5acfd57c 	.word	0x5acfd57c
 8008598:	3de5d93a 	.word	0x3de5d93a
 800859c:	8a2b9ceb 	.word	0x8a2b9ceb
 80085a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80085a4:	57b1fe7d 	.word	0x57b1fe7d
 80085a8:	3ec71de3 	.word	0x3ec71de3
 80085ac:	19c161d5 	.word	0x19c161d5
 80085b0:	3f2a01a0 	.word	0x3f2a01a0
 80085b4:	1110f8a6 	.word	0x1110f8a6
 80085b8:	3f811111 	.word	0x3f811111

080085bc <fabs>:
 80085bc:	ec51 0b10 	vmov	r0, r1, d0
 80085c0:	ee10 2a10 	vmov	r2, s0
 80085c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085c8:	ec43 2b10 	vmov	d0, r2, r3
 80085cc:	4770      	bx	lr
	...

080085d0 <floor>:
 80085d0:	ec51 0b10 	vmov	r0, r1, d0
 80085d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80085dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80085e0:	2e13      	cmp	r6, #19
 80085e2:	ee10 5a10 	vmov	r5, s0
 80085e6:	ee10 8a10 	vmov	r8, s0
 80085ea:	460c      	mov	r4, r1
 80085ec:	dc32      	bgt.n	8008654 <floor+0x84>
 80085ee:	2e00      	cmp	r6, #0
 80085f0:	da14      	bge.n	800861c <floor+0x4c>
 80085f2:	a333      	add	r3, pc, #204	; (adr r3, 80086c0 <floor+0xf0>)
 80085f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f8:	f7f7 fe0c 	bl	8000214 <__adddf3>
 80085fc:	2200      	movs	r2, #0
 80085fe:	2300      	movs	r3, #0
 8008600:	f7f8 fa4e 	bl	8000aa0 <__aeabi_dcmpgt>
 8008604:	b138      	cbz	r0, 8008616 <floor+0x46>
 8008606:	2c00      	cmp	r4, #0
 8008608:	da57      	bge.n	80086ba <floor+0xea>
 800860a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800860e:	431d      	orrs	r5, r3
 8008610:	d001      	beq.n	8008616 <floor+0x46>
 8008612:	4c2d      	ldr	r4, [pc, #180]	; (80086c8 <floor+0xf8>)
 8008614:	2500      	movs	r5, #0
 8008616:	4621      	mov	r1, r4
 8008618:	4628      	mov	r0, r5
 800861a:	e025      	b.n	8008668 <floor+0x98>
 800861c:	4f2b      	ldr	r7, [pc, #172]	; (80086cc <floor+0xfc>)
 800861e:	4137      	asrs	r7, r6
 8008620:	ea01 0307 	and.w	r3, r1, r7
 8008624:	4303      	orrs	r3, r0
 8008626:	d01f      	beq.n	8008668 <floor+0x98>
 8008628:	a325      	add	r3, pc, #148	; (adr r3, 80086c0 <floor+0xf0>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f7f7 fdf1 	bl	8000214 <__adddf3>
 8008632:	2200      	movs	r2, #0
 8008634:	2300      	movs	r3, #0
 8008636:	f7f8 fa33 	bl	8000aa0 <__aeabi_dcmpgt>
 800863a:	2800      	cmp	r0, #0
 800863c:	d0eb      	beq.n	8008616 <floor+0x46>
 800863e:	2c00      	cmp	r4, #0
 8008640:	bfbe      	ittt	lt
 8008642:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008646:	fa43 f606 	asrlt.w	r6, r3, r6
 800864a:	19a4      	addlt	r4, r4, r6
 800864c:	ea24 0407 	bic.w	r4, r4, r7
 8008650:	2500      	movs	r5, #0
 8008652:	e7e0      	b.n	8008616 <floor+0x46>
 8008654:	2e33      	cmp	r6, #51	; 0x33
 8008656:	dd0b      	ble.n	8008670 <floor+0xa0>
 8008658:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800865c:	d104      	bne.n	8008668 <floor+0x98>
 800865e:	ee10 2a10 	vmov	r2, s0
 8008662:	460b      	mov	r3, r1
 8008664:	f7f7 fdd6 	bl	8000214 <__adddf3>
 8008668:	ec41 0b10 	vmov	d0, r0, r1
 800866c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008670:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008674:	f04f 33ff 	mov.w	r3, #4294967295
 8008678:	fa23 f707 	lsr.w	r7, r3, r7
 800867c:	4207      	tst	r7, r0
 800867e:	d0f3      	beq.n	8008668 <floor+0x98>
 8008680:	a30f      	add	r3, pc, #60	; (adr r3, 80086c0 <floor+0xf0>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 fdc5 	bl	8000214 <__adddf3>
 800868a:	2200      	movs	r2, #0
 800868c:	2300      	movs	r3, #0
 800868e:	f7f8 fa07 	bl	8000aa0 <__aeabi_dcmpgt>
 8008692:	2800      	cmp	r0, #0
 8008694:	d0bf      	beq.n	8008616 <floor+0x46>
 8008696:	2c00      	cmp	r4, #0
 8008698:	da02      	bge.n	80086a0 <floor+0xd0>
 800869a:	2e14      	cmp	r6, #20
 800869c:	d103      	bne.n	80086a6 <floor+0xd6>
 800869e:	3401      	adds	r4, #1
 80086a0:	ea25 0507 	bic.w	r5, r5, r7
 80086a4:	e7b7      	b.n	8008616 <floor+0x46>
 80086a6:	2301      	movs	r3, #1
 80086a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80086ac:	fa03 f606 	lsl.w	r6, r3, r6
 80086b0:	4435      	add	r5, r6
 80086b2:	4545      	cmp	r5, r8
 80086b4:	bf38      	it	cc
 80086b6:	18e4      	addcc	r4, r4, r3
 80086b8:	e7f2      	b.n	80086a0 <floor+0xd0>
 80086ba:	2500      	movs	r5, #0
 80086bc:	462c      	mov	r4, r5
 80086be:	e7aa      	b.n	8008616 <floor+0x46>
 80086c0:	8800759c 	.word	0x8800759c
 80086c4:	7e37e43c 	.word	0x7e37e43c
 80086c8:	bff00000 	.word	0xbff00000
 80086cc:	000fffff 	.word	0x000fffff

080086d0 <scalbn>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	ec55 4b10 	vmov	r4, r5, d0
 80086d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80086da:	4606      	mov	r6, r0
 80086dc:	462b      	mov	r3, r5
 80086de:	b99a      	cbnz	r2, 8008708 <scalbn+0x38>
 80086e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80086e4:	4323      	orrs	r3, r4
 80086e6:	d036      	beq.n	8008756 <scalbn+0x86>
 80086e8:	4b39      	ldr	r3, [pc, #228]	; (80087d0 <scalbn+0x100>)
 80086ea:	4629      	mov	r1, r5
 80086ec:	ee10 0a10 	vmov	r0, s0
 80086f0:	2200      	movs	r2, #0
 80086f2:	f7f7 ff45 	bl	8000580 <__aeabi_dmul>
 80086f6:	4b37      	ldr	r3, [pc, #220]	; (80087d4 <scalbn+0x104>)
 80086f8:	429e      	cmp	r6, r3
 80086fa:	4604      	mov	r4, r0
 80086fc:	460d      	mov	r5, r1
 80086fe:	da10      	bge.n	8008722 <scalbn+0x52>
 8008700:	a32b      	add	r3, pc, #172	; (adr r3, 80087b0 <scalbn+0xe0>)
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	e03a      	b.n	800877e <scalbn+0xae>
 8008708:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800870c:	428a      	cmp	r2, r1
 800870e:	d10c      	bne.n	800872a <scalbn+0x5a>
 8008710:	ee10 2a10 	vmov	r2, s0
 8008714:	4620      	mov	r0, r4
 8008716:	4629      	mov	r1, r5
 8008718:	f7f7 fd7c 	bl	8000214 <__adddf3>
 800871c:	4604      	mov	r4, r0
 800871e:	460d      	mov	r5, r1
 8008720:	e019      	b.n	8008756 <scalbn+0x86>
 8008722:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008726:	460b      	mov	r3, r1
 8008728:	3a36      	subs	r2, #54	; 0x36
 800872a:	4432      	add	r2, r6
 800872c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008730:	428a      	cmp	r2, r1
 8008732:	dd08      	ble.n	8008746 <scalbn+0x76>
 8008734:	2d00      	cmp	r5, #0
 8008736:	a120      	add	r1, pc, #128	; (adr r1, 80087b8 <scalbn+0xe8>)
 8008738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800873c:	da1c      	bge.n	8008778 <scalbn+0xa8>
 800873e:	a120      	add	r1, pc, #128	; (adr r1, 80087c0 <scalbn+0xf0>)
 8008740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008744:	e018      	b.n	8008778 <scalbn+0xa8>
 8008746:	2a00      	cmp	r2, #0
 8008748:	dd08      	ble.n	800875c <scalbn+0x8c>
 800874a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800874e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008752:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008756:	ec45 4b10 	vmov	d0, r4, r5
 800875a:	bd70      	pop	{r4, r5, r6, pc}
 800875c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008760:	da19      	bge.n	8008796 <scalbn+0xc6>
 8008762:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008766:	429e      	cmp	r6, r3
 8008768:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800876c:	dd0a      	ble.n	8008784 <scalbn+0xb4>
 800876e:	a112      	add	r1, pc, #72	; (adr r1, 80087b8 <scalbn+0xe8>)
 8008770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e2      	bne.n	800873e <scalbn+0x6e>
 8008778:	a30f      	add	r3, pc, #60	; (adr r3, 80087b8 <scalbn+0xe8>)
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	f7f7 feff 	bl	8000580 <__aeabi_dmul>
 8008782:	e7cb      	b.n	800871c <scalbn+0x4c>
 8008784:	a10a      	add	r1, pc, #40	; (adr r1, 80087b0 <scalbn+0xe0>)
 8008786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0b8      	beq.n	8008700 <scalbn+0x30>
 800878e:	a10e      	add	r1, pc, #56	; (adr r1, 80087c8 <scalbn+0xf8>)
 8008790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008794:	e7b4      	b.n	8008700 <scalbn+0x30>
 8008796:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800879a:	3236      	adds	r2, #54	; 0x36
 800879c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80087a4:	4620      	mov	r0, r4
 80087a6:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <scalbn+0x108>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	e7e8      	b.n	800877e <scalbn+0xae>
 80087ac:	f3af 8000 	nop.w
 80087b0:	c2f8f359 	.word	0xc2f8f359
 80087b4:	01a56e1f 	.word	0x01a56e1f
 80087b8:	8800759c 	.word	0x8800759c
 80087bc:	7e37e43c 	.word	0x7e37e43c
 80087c0:	8800759c 	.word	0x8800759c
 80087c4:	fe37e43c 	.word	0xfe37e43c
 80087c8:	c2f8f359 	.word	0xc2f8f359
 80087cc:	81a56e1f 	.word	0x81a56e1f
 80087d0:	43500000 	.word	0x43500000
 80087d4:	ffff3cb0 	.word	0xffff3cb0
 80087d8:	3c900000 	.word	0x3c900000

080087dc <__libc_init_array>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4d0d      	ldr	r5, [pc, #52]	; (8008814 <__libc_init_array+0x38>)
 80087e0:	4c0d      	ldr	r4, [pc, #52]	; (8008818 <__libc_init_array+0x3c>)
 80087e2:	1b64      	subs	r4, r4, r5
 80087e4:	10a4      	asrs	r4, r4, #2
 80087e6:	2600      	movs	r6, #0
 80087e8:	42a6      	cmp	r6, r4
 80087ea:	d109      	bne.n	8008800 <__libc_init_array+0x24>
 80087ec:	4d0b      	ldr	r5, [pc, #44]	; (800881c <__libc_init_array+0x40>)
 80087ee:	4c0c      	ldr	r4, [pc, #48]	; (8008820 <__libc_init_array+0x44>)
 80087f0:	f000 f820 	bl	8008834 <_init>
 80087f4:	1b64      	subs	r4, r4, r5
 80087f6:	10a4      	asrs	r4, r4, #2
 80087f8:	2600      	movs	r6, #0
 80087fa:	42a6      	cmp	r6, r4
 80087fc:	d105      	bne.n	800880a <__libc_init_array+0x2e>
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f855 3b04 	ldr.w	r3, [r5], #4
 8008804:	4798      	blx	r3
 8008806:	3601      	adds	r6, #1
 8008808:	e7ee      	b.n	80087e8 <__libc_init_array+0xc>
 800880a:	f855 3b04 	ldr.w	r3, [r5], #4
 800880e:	4798      	blx	r3
 8008810:	3601      	adds	r6, #1
 8008812:	e7f2      	b.n	80087fa <__libc_init_array+0x1e>
 8008814:	08008a50 	.word	0x08008a50
 8008818:	08008a50 	.word	0x08008a50
 800881c:	08008a50 	.word	0x08008a50
 8008820:	08008a54 	.word	0x08008a54

08008824 <memset>:
 8008824:	4402      	add	r2, r0
 8008826:	4603      	mov	r3, r0
 8008828:	4293      	cmp	r3, r2
 800882a:	d100      	bne.n	800882e <memset+0xa>
 800882c:	4770      	bx	lr
 800882e:	f803 1b01 	strb.w	r1, [r3], #1
 8008832:	e7f9      	b.n	8008828 <memset+0x4>

08008834 <_init>:
 8008834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008836:	bf00      	nop
 8008838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883a:	bc08      	pop	{r3}
 800883c:	469e      	mov	lr, r3
 800883e:	4770      	bx	lr

08008840 <_fini>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	bf00      	nop
 8008844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008846:	bc08      	pop	{r3}
 8008848:	469e      	mov	lr, r3
 800884a:	4770      	bx	lr
